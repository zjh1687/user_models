
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.13.0
 * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



/**
 * Used by group by
 */
export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model test
 */

export type test = {
  test_idx: number
  test_value: string
  test_deletion: number
}

/**
 * Model board_cate
 */

export type board_cate = {
  tca_idx: number
  tca_title: string
}

/**
 * Model board_post
 */

export type board_post = {
  bpo_idx: number
  bpo_bca_idx: number
  bpo_title: string
  bpo_desc: string
}

/**
 * Model rs_member
 */

export type rs_member = {
  mem_idx: number
  mem_userpw: string
  mem_userid: string
  mem_email: string
  mem_lastlogin_datetime: string
  mem_lastlogin_timestamp: number
  mem_inactive_check: string | null
  mem_is_admin: number
  mem_point: number
}

/**
 * Model rs_mem_login_log
 */

export type rs_mem_login_log = {
  mll_idx: number
  mll_success: number
  mll_mem_idx: number
  mll_email: string
  mll_datetime: string
  mll_reason: string
  mll_timestamp: number | null
  mll_ip: string
  mll_fail_count: number
}

/**
 * Model rs_mgr
 */

export type rs_mgr = {
  mgr_id: number
  mgr_title: string
  mgr_datetime: string
  mgr_timestemp: number
}

/**
 * Model rs_mgr_mem
 */

export type rs_mgr_mem = {
  mgm_mgr_idx: number
  mgm_mem_idx: number
  mgm_datetime: string
  mgm_timestemp: number
}

/**
 * Model rs_point_log
 */

export type rs_point_log = {
  poi_mem_idx: number
  poi_mem_id: number
  poi_inc_poi: string
  poi_type: string | null
  poi_datetime: string
  poi_timestemp: number
}

/**
 * Model rs_point
 */

export type rs_point = {
  idx: number
  poi_mem_id: number
  poi_point: number
  poi_datetime: string
  poi_timestemp: number
}

/**
 * Model rs_board_category
 */

export type rs_board_category = {
  cat_idx: number
  cat_title: string
}

/**
 * Model rs_board_comment
 */

export type rs_board_comment = {
  cmt_idx: number
  cmt_content: string
  cmt_mem_idx: number
  cmt_mem_id: string
  cmt_mem_nick: string
  cmt_pass: number | null
  cmt_create_datetime: string
  cmt_create_timestemp: number
  cmt_update_datetime: string
  cmt_update_timestemp: number
}

/**
 * Model rs_board_post
 */

export type rs_board_post = {
  pst_idx: number
  pst_title: string
  pst_content: string
  pst_pass: string | null
  pst_create_datetime: string
  pst_create_timestemp: number
  pst_update_datetime: string
  pst_update_timestemp: number
  pst_hit: number
  pst_cat_idx: number
  pst_mem_idx: number
  pst_mem_id: string
  pst_mem_nick: string
}

/**
 * Model rs_mem_auth
 */

export type rs_mem_auth = {
  auth_idx: number
  auth_email: string
  authNumber: number
  auth_datetime: string
}

/**
 * Model rs_mem_token
 */

export type rs_mem_token = {
  mtk_idx: number
  mtk_refresh: string
  mtk_email: string
}

/**
 * Model rs_board_likebad_log
 */

export type rs_board_likebad_log = {
  log_idx: number
  log_cnt_like: number | null
  log_cnt_bad: number | null
  log_update_datetime: string
  log_update_timestemp: number
}

/**
 * Model rs_board_likebad_map
 */

export type rs_board_likebad_map = {
  blm_idx: number
  blm_user_idx: number
  blm_post_idx: number | null
  blm_cmt_idx: number | null
  blm_update_timestemp: number
  blm_update_datetime: string
  blm_cnt_like: number | null
  blm_cnt_bad: number | null
}

/**
 * Model rs_note
 */

export type rs_note = {
  not_idx: number
  not_recv_id: number | null
  not_send_id: number | null
  not_type: number
  not_title: string
  not_relate_post_idx: number | null
  not_content: string
  not_datetime: string
  not_timestemp: number
}

/**
 * Model rs_board_admin
 */

export type rs_board_admin = {
  adm_idx: number
  adm_mem_idx: number
  adm_mem_id: string
}

/**
 * Model pris_member
 */

export type pris_member = {
  mem_idx: number
  mem_email: string
  mem_password: string
}

/**
 * Model rs_menu
 */

export type rs_menu = {
  menu_idx: number
  menu_code: string | null
  ins_date: string | null
  upd_date: string | null
  menu_name: string | null
}

/**
 * Model test2
 */

export type test2 = {
  test_idx: number
  test_unique: string
  test_deletion: number
}

/**
 * Model pris_log
 */

export type pris_log = {
  id: number
  email: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Tests
 * const tests = await prisma.test.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Tests
   * const tests = await prisma.test.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.test`: Exposes CRUD operations for the **test** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tests
    * const tests = await prisma.test.findMany()
    * ```
    */
  get test(): Prisma.testDelegate;

  /**
   * `prisma.board_cate`: Exposes CRUD operations for the **board_cate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Board_cates
    * const board_cates = await prisma.board_cate.findMany()
    * ```
    */
  get board_cate(): Prisma.board_cateDelegate;

  /**
   * `prisma.board_post`: Exposes CRUD operations for the **board_post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Board_posts
    * const board_posts = await prisma.board_post.findMany()
    * ```
    */
  get board_post(): Prisma.board_postDelegate;

  /**
   * `prisma.rs_member`: Exposes CRUD operations for the **rs_member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_members
    * const rs_members = await prisma.rs_member.findMany()
    * ```
    */
  get rs_member(): Prisma.rs_memberDelegate;

  /**
   * `prisma.rs_mem_login_log`: Exposes CRUD operations for the **rs_mem_login_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_mem_login_logs
    * const rs_mem_login_logs = await prisma.rs_mem_login_log.findMany()
    * ```
    */
  get rs_mem_login_log(): Prisma.rs_mem_login_logDelegate;

  /**
   * `prisma.rs_mgr`: Exposes CRUD operations for the **rs_mgr** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_mgrs
    * const rs_mgrs = await prisma.rs_mgr.findMany()
    * ```
    */
  get rs_mgr(): Prisma.rs_mgrDelegate;

  /**
   * `prisma.rs_mgr_mem`: Exposes CRUD operations for the **rs_mgr_mem** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_mgr_mems
    * const rs_mgr_mems = await prisma.rs_mgr_mem.findMany()
    * ```
    */
  get rs_mgr_mem(): Prisma.rs_mgr_memDelegate;

  /**
   * `prisma.rs_point_log`: Exposes CRUD operations for the **rs_point_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_point_logs
    * const rs_point_logs = await prisma.rs_point_log.findMany()
    * ```
    */
  get rs_point_log(): Prisma.rs_point_logDelegate;

  /**
   * `prisma.rs_point`: Exposes CRUD operations for the **rs_point** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_points
    * const rs_points = await prisma.rs_point.findMany()
    * ```
    */
  get rs_point(): Prisma.rs_pointDelegate;

  /**
   * `prisma.rs_board_category`: Exposes CRUD operations for the **rs_board_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_board_categories
    * const rs_board_categories = await prisma.rs_board_category.findMany()
    * ```
    */
  get rs_board_category(): Prisma.rs_board_categoryDelegate;

  /**
   * `prisma.rs_board_comment`: Exposes CRUD operations for the **rs_board_comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_board_comments
    * const rs_board_comments = await prisma.rs_board_comment.findMany()
    * ```
    */
  get rs_board_comment(): Prisma.rs_board_commentDelegate;

  /**
   * `prisma.rs_board_post`: Exposes CRUD operations for the **rs_board_post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_board_posts
    * const rs_board_posts = await prisma.rs_board_post.findMany()
    * ```
    */
  get rs_board_post(): Prisma.rs_board_postDelegate;

  /**
   * `prisma.rs_mem_auth`: Exposes CRUD operations for the **rs_mem_auth** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_mem_auths
    * const rs_mem_auths = await prisma.rs_mem_auth.findMany()
    * ```
    */
  get rs_mem_auth(): Prisma.rs_mem_authDelegate;

  /**
   * `prisma.rs_mem_token`: Exposes CRUD operations for the **rs_mem_token** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_mem_tokens
    * const rs_mem_tokens = await prisma.rs_mem_token.findMany()
    * ```
    */
  get rs_mem_token(): Prisma.rs_mem_tokenDelegate;

  /**
   * `prisma.rs_board_likebad_log`: Exposes CRUD operations for the **rs_board_likebad_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_board_likebad_logs
    * const rs_board_likebad_logs = await prisma.rs_board_likebad_log.findMany()
    * ```
    */
  get rs_board_likebad_log(): Prisma.rs_board_likebad_logDelegate;

  /**
   * `prisma.rs_board_likebad_map`: Exposes CRUD operations for the **rs_board_likebad_map** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_board_likebad_maps
    * const rs_board_likebad_maps = await prisma.rs_board_likebad_map.findMany()
    * ```
    */
  get rs_board_likebad_map(): Prisma.rs_board_likebad_mapDelegate;

  /**
   * `prisma.rs_note`: Exposes CRUD operations for the **rs_note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_notes
    * const rs_notes = await prisma.rs_note.findMany()
    * ```
    */
  get rs_note(): Prisma.rs_noteDelegate;

  /**
   * `prisma.rs_board_admin`: Exposes CRUD operations for the **rs_board_admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_board_admins
    * const rs_board_admins = await prisma.rs_board_admin.findMany()
    * ```
    */
  get rs_board_admin(): Prisma.rs_board_adminDelegate;

  /**
   * `prisma.pris_member`: Exposes CRUD operations for the **pris_member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pris_members
    * const pris_members = await prisma.pris_member.findMany()
    * ```
    */
  get pris_member(): Prisma.pris_memberDelegate;

  /**
   * `prisma.rs_menu`: Exposes CRUD operations for the **rs_menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rs_menus
    * const rs_menus = await prisma.rs_menu.findMany()
    * ```
    */
  get rs_menu(): Prisma.rs_menuDelegate;

  /**
   * `prisma.test2`: Exposes CRUD operations for the **test2** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Test2s
    * const test2s = await prisma.test2.findMany()
    * ```
    */
  get test2(): Prisma.test2Delegate;

  /**
   * `prisma.pris_log`: Exposes CRUD operations for the **pris_log** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pris_logs
    * const pris_logs = await prisma.pris_log.findMany()
    * ```
    */
  get pris_log(): Prisma.pris_logDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.13.0
   * Query Engine version: 833ab05d2a20e822f6736a39a27de4fc8f6b3e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;



  /**
   * Used by group by
   */
  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    test: 'test',
    board_cate: 'board_cate',
    board_post: 'board_post',
    rs_member: 'rs_member',
    rs_mem_login_log: 'rs_mem_login_log',
    rs_mgr: 'rs_mgr',
    rs_mgr_mem: 'rs_mgr_mem',
    rs_point_log: 'rs_point_log',
    rs_point: 'rs_point',
    rs_board_category: 'rs_board_category',
    rs_board_comment: 'rs_board_comment',
    rs_board_post: 'rs_board_post',
    rs_mem_auth: 'rs_mem_auth',
    rs_mem_token: 'rs_mem_token',
    rs_board_likebad_log: 'rs_board_likebad_log',
    rs_board_likebad_map: 'rs_board_likebad_map',
    rs_note: 'rs_note',
    rs_board_admin: 'rs_board_admin',
    pris_member: 'pris_member',
    rs_menu: 'rs_menu',
    test2: 'test2',
    pris_log: 'pris_log'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model test
   */


  export type AggregateTest = {
    count: number | null
    avg: TestAvgAggregateOutputType | null
    sum: TestSumAggregateOutputType | null
    min: TestMinAggregateOutputType | null
    max: TestMaxAggregateOutputType | null
  }

  export type TestAvgAggregateOutputType = {
    test_idx: number
    test_deletion: number
  }

  export type TestSumAggregateOutputType = {
    test_idx: number
    test_deletion: number
  }

  export type TestMinAggregateOutputType = {
    test_idx: number
    test_value: string | null
    test_deletion: number
  }

  export type TestMaxAggregateOutputType = {
    test_idx: number
    test_value: string | null
    test_deletion: number
  }

  export type TestCountAggregateOutputType = {
    test_idx: number
    test_value: number | null
    test_deletion: number
    _all: number
  }


  export type TestAvgAggregateInputType = {
    test_idx?: true
    test_deletion?: true
  }

  export type TestSumAggregateInputType = {
    test_idx?: true
    test_deletion?: true
  }

  export type TestMinAggregateInputType = {
    test_idx?: true
    test_value?: true
    test_deletion?: true
  }

  export type TestMaxAggregateInputType = {
    test_idx?: true
    test_value?: true
    test_deletion?: true
  }

  export type TestCountAggregateInputType = {
    test_idx?: true
    test_value?: true
    test_deletion?: true
    _all?: true
  }

  export type AggregateTestArgs = {
    where?: testWhereInput
    orderBy?: Enumerable<testOrderByInput>
    cursor?: testWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: TestAvgAggregateInputType
    sum?: TestSumAggregateInputType
    min?: TestMinAggregateInputType
    max?: TestMaxAggregateInputType
  }

  export type GetTestAggregateType<T extends AggregateTestArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetTestAggregateScalarType<T[P]>
  }

  export type GetTestAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof TestAvgAggregateOutputType ? TestAvgAggregateOutputType[P] : never
  }

    



  export type testSelect = {
    test_idx?: boolean
    test_value?: boolean
    test_deletion?: boolean
  }

  export type testGetPayload<
    S extends boolean | null | undefined | testArgs,
    U = keyof S
      > = S extends true
        ? test
    : S extends undefined
    ? never
    : S extends testArgs | FindManytestArgs
    ?'include' extends U
    ? test 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof test ?test [P]
  : 
     never
  } 
    : test
  : test


  export interface testDelegate {
    /**
     * Find zero or one Test that matches the filter.
     * @param {FindUniquetestArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquetestArgs>(
      args: Subset<T, FindUniquetestArgs>
    ): CheckSelect<T, Prisma__testClient<test | null>, Prisma__testClient<testGetPayload<T> | null>>
    /**
     * Find the first Test that matches the filter.
     * @param {FindFirsttestArgs} args - Arguments to find a Test
     * @example
     * // Get one Test
     * const test = await prisma.test.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirsttestArgs>(
      args?: Subset<T, FindFirsttestArgs>
    ): CheckSelect<T, Prisma__testClient<test | null>, Prisma__testClient<testGetPayload<T> | null>>
    /**
     * Find zero or more Tests that matches the filter.
     * @param {FindManytestArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tests
     * const tests = await prisma.test.findMany()
     * 
     * // Get first 10 Tests
     * const tests = await prisma.test.findMany({ take: 10 })
     * 
     * // Only select the `test_idx`
     * const testWithTest_idxOnly = await prisma.test.findMany({ select: { test_idx: true } })
     * 
    **/
    findMany<T extends FindManytestArgs>(
      args?: Subset<T, FindManytestArgs>
    ): CheckSelect<T, Promise<Array<test>>, Promise<Array<testGetPayload<T>>>>
    /**
     * Create a Test.
     * @param {testCreateArgs} args - Arguments to create a Test.
     * @example
     * // Create one Test
     * const Test = await prisma.test.create({
     *   data: {
     *     // ... data to create a Test
     *   }
     * })
     * 
    **/
    create<T extends testCreateArgs>(
      args: Subset<T, testCreateArgs>
    ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
    /**
     * Delete a Test.
     * @param {testDeleteArgs} args - Arguments to delete one Test.
     * @example
     * // Delete one Test
     * const Test = await prisma.test.delete({
     *   where: {
     *     // ... filter to delete one Test
     *   }
     * })
     * 
    **/
    delete<T extends testDeleteArgs>(
      args: Subset<T, testDeleteArgs>
    ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
    /**
     * Update one Test.
     * @param {testUpdateArgs} args - Arguments to update one Test.
     * @example
     * // Update one Test
     * const test = await prisma.test.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends testUpdateArgs>(
      args: Subset<T, testUpdateArgs>
    ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
    /**
     * Delete zero or more Tests.
     * @param {testDeleteManyArgs} args - Arguments to filter Tests to delete.
     * @example
     * // Delete a few Tests
     * const { count } = await prisma.test.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends testDeleteManyArgs>(
      args?: Subset<T, testDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Tests.
     * @param {testUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tests
     * const test = await prisma.test.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends testUpdateManyArgs>(
      args: Subset<T, testUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Test.
     * @param {testUpsertArgs} args - Arguments to update or create a Test.
     * @example
     * // Update or create a Test
     * const test = await prisma.test.upsert({
     *   create: {
     *     // ... data to create a Test
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test we want to update
     *   }
     * })
    **/
    upsert<T extends testUpsertArgs>(
      args: Subset<T, testUpsertArgs>
    ): CheckSelect<T, Prisma__testClient<test>, Prisma__testClient<testGetPayload<T>>>
    /**
     * Find zero or one Test that matches the filter.
     * @param {FindUniquetestArgs} args - Arguments to find a Test
     * @deprecated This will be deprecated please use prisma.test.findUnique
     * @example
     * // Get one Test
     * const test = await prisma.test.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquetestArgs>(
      args: Subset<T, FindUniquetestArgs>
    ): CheckSelect<T, Prisma__testClient<test | null>, Prisma__testClient<testGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManytestArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateTestArgs>(args: Subset<T, AggregateTestArgs>): Promise<GetTestAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for test.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__testClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * test findUnique
   */
  export type FindUniquetestArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
    /**
     * Filter, which test to fetch.
    **/
    where: testWhereUniqueInput
  }


  /**
   * test findFirst
   */
  export type FindFirsttestArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
    /**
     * Filter, which test to fetch.
    **/
    where?: testWhereInput
    orderBy?: Enumerable<testOrderByInput>
    cursor?: testWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<TestScalarFieldEnum>
  }


  /**
   * test findMany
   */
  export type FindManytestArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
    /**
     * Filter, which tests to fetch.
    **/
    where?: testWhereInput
    /**
     * Determine the order of the tests to fetch.
    **/
    orderBy?: Enumerable<testOrderByInput>
    /**
     * Sets the position for listing tests.
    **/
    cursor?: testWhereUniqueInput
    /**
     * The number of tests to fetch. If negative number, it will take tests before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` tests.
    **/
    skip?: number
    distinct?: Enumerable<TestScalarFieldEnum>
  }


  /**
   * test create
   */
  export type testCreateArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
    /**
     * The data needed to create a test.
    **/
    data: testCreateInput
  }


  /**
   * test update
   */
  export type testUpdateArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
    /**
     * The data needed to update a test.
    **/
    data: testUpdateInput
    /**
     * Choose, which test to update.
    **/
    where: testWhereUniqueInput
  }


  /**
   * test updateMany
   */
  export type testUpdateManyArgs = {
    data: testUpdateManyMutationInput
    where?: testWhereInput
  }


  /**
   * test upsert
   */
  export type testUpsertArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
    /**
     * The filter to search for the test to update in case it exists.
    **/
    where: testWhereUniqueInput
    /**
     * In case the test found by the `where` argument doesn't exist, create a new test with this data.
    **/
    create: testCreateInput
    /**
     * In case the test was found with the provided `where` argument, update it with this data.
    **/
    update: testUpdateInput
  }


  /**
   * test delete
   */
  export type testDeleteArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
    /**
     * Filter which test to delete.
    **/
    where: testWhereUniqueInput
  }


  /**
   * test deleteMany
   */
  export type testDeleteManyArgs = {
    where?: testWhereInput
  }


  /**
   * test without action
   */
  export type testArgs = {
    /**
     * Select specific fields to fetch from the test
    **/
    select?: testSelect | null
  }



  /**
   * Model board_cate
   */


  export type AggregateBoard_cate = {
    count: number | null
    avg: Board_cateAvgAggregateOutputType | null
    sum: Board_cateSumAggregateOutputType | null
    min: Board_cateMinAggregateOutputType | null
    max: Board_cateMaxAggregateOutputType | null
  }

  export type Board_cateAvgAggregateOutputType = {
    tca_idx: number
  }

  export type Board_cateSumAggregateOutputType = {
    tca_idx: number
  }

  export type Board_cateMinAggregateOutputType = {
    tca_idx: number
    tca_title: string | null
  }

  export type Board_cateMaxAggregateOutputType = {
    tca_idx: number
    tca_title: string | null
  }

  export type Board_cateCountAggregateOutputType = {
    tca_idx: number
    tca_title: number | null
    _all: number
  }


  export type Board_cateAvgAggregateInputType = {
    tca_idx?: true
  }

  export type Board_cateSumAggregateInputType = {
    tca_idx?: true
  }

  export type Board_cateMinAggregateInputType = {
    tca_idx?: true
    tca_title?: true
  }

  export type Board_cateMaxAggregateInputType = {
    tca_idx?: true
    tca_title?: true
  }

  export type Board_cateCountAggregateInputType = {
    tca_idx?: true
    tca_title?: true
    _all?: true
  }

  export type AggregateBoard_cateArgs = {
    where?: board_cateWhereInput
    orderBy?: Enumerable<board_cateOrderByInput>
    cursor?: board_cateWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Board_cateAvgAggregateInputType
    sum?: Board_cateSumAggregateInputType
    min?: Board_cateMinAggregateInputType
    max?: Board_cateMaxAggregateInputType
  }

  export type GetBoard_cateAggregateType<T extends AggregateBoard_cateArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetBoard_cateAggregateScalarType<T[P]>
  }

  export type GetBoard_cateAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Board_cateAvgAggregateOutputType ? Board_cateAvgAggregateOutputType[P] : never
  }

    



  export type board_cateSelect = {
    tca_idx?: boolean
    tca_title?: boolean
    board_post?: boolean | FindManyboard_postArgs
  }

  export type board_cateInclude = {
    board_post?: boolean | FindManyboard_postArgs
  }

  export type board_cateGetPayload<
    S extends boolean | null | undefined | board_cateArgs,
    U = keyof S
      > = S extends true
        ? board_cate
    : S extends undefined
    ? never
    : S extends board_cateArgs | FindManyboard_cateArgs
    ?'include' extends U
    ? board_cate  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'board_post'
        ? Array < board_postGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof board_cate ?board_cate [P]
  : 
          P extends 'board_post'
        ? Array < board_postGetPayload<S['select'][P]>>  : never
  } 
    : board_cate
  : board_cate


  export interface board_cateDelegate {
    /**
     * Find zero or one Board_cate that matches the filter.
     * @param {FindUniqueboard_cateArgs} args - Arguments to find a Board_cate
     * @example
     * // Get one Board_cate
     * const board_cate = await prisma.board_cate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueboard_cateArgs>(
      args: Subset<T, FindUniqueboard_cateArgs>
    ): CheckSelect<T, Prisma__board_cateClient<board_cate | null>, Prisma__board_cateClient<board_cateGetPayload<T> | null>>
    /**
     * Find the first Board_cate that matches the filter.
     * @param {FindFirstboard_cateArgs} args - Arguments to find a Board_cate
     * @example
     * // Get one Board_cate
     * const board_cate = await prisma.board_cate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstboard_cateArgs>(
      args?: Subset<T, FindFirstboard_cateArgs>
    ): CheckSelect<T, Prisma__board_cateClient<board_cate | null>, Prisma__board_cateClient<board_cateGetPayload<T> | null>>
    /**
     * Find zero or more Board_cates that matches the filter.
     * @param {FindManyboard_cateArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Board_cates
     * const board_cates = await prisma.board_cate.findMany()
     * 
     * // Get first 10 Board_cates
     * const board_cates = await prisma.board_cate.findMany({ take: 10 })
     * 
     * // Only select the `tca_idx`
     * const board_cateWithTca_idxOnly = await prisma.board_cate.findMany({ select: { tca_idx: true } })
     * 
    **/
    findMany<T extends FindManyboard_cateArgs>(
      args?: Subset<T, FindManyboard_cateArgs>
    ): CheckSelect<T, Promise<Array<board_cate>>, Promise<Array<board_cateGetPayload<T>>>>
    /**
     * Create a Board_cate.
     * @param {board_cateCreateArgs} args - Arguments to create a Board_cate.
     * @example
     * // Create one Board_cate
     * const Board_cate = await prisma.board_cate.create({
     *   data: {
     *     // ... data to create a Board_cate
     *   }
     * })
     * 
    **/
    create<T extends board_cateCreateArgs>(
      args: Subset<T, board_cateCreateArgs>
    ): CheckSelect<T, Prisma__board_cateClient<board_cate>, Prisma__board_cateClient<board_cateGetPayload<T>>>
    /**
     * Delete a Board_cate.
     * @param {board_cateDeleteArgs} args - Arguments to delete one Board_cate.
     * @example
     * // Delete one Board_cate
     * const Board_cate = await prisma.board_cate.delete({
     *   where: {
     *     // ... filter to delete one Board_cate
     *   }
     * })
     * 
    **/
    delete<T extends board_cateDeleteArgs>(
      args: Subset<T, board_cateDeleteArgs>
    ): CheckSelect<T, Prisma__board_cateClient<board_cate>, Prisma__board_cateClient<board_cateGetPayload<T>>>
    /**
     * Update one Board_cate.
     * @param {board_cateUpdateArgs} args - Arguments to update one Board_cate.
     * @example
     * // Update one Board_cate
     * const board_cate = await prisma.board_cate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends board_cateUpdateArgs>(
      args: Subset<T, board_cateUpdateArgs>
    ): CheckSelect<T, Prisma__board_cateClient<board_cate>, Prisma__board_cateClient<board_cateGetPayload<T>>>
    /**
     * Delete zero or more Board_cates.
     * @param {board_cateDeleteManyArgs} args - Arguments to filter Board_cates to delete.
     * @example
     * // Delete a few Board_cates
     * const { count } = await prisma.board_cate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends board_cateDeleteManyArgs>(
      args?: Subset<T, board_cateDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Board_cates.
     * @param {board_cateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Board_cates
     * const board_cate = await prisma.board_cate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends board_cateUpdateManyArgs>(
      args: Subset<T, board_cateUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Board_cate.
     * @param {board_cateUpsertArgs} args - Arguments to update or create a Board_cate.
     * @example
     * // Update or create a Board_cate
     * const board_cate = await prisma.board_cate.upsert({
     *   create: {
     *     // ... data to create a Board_cate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Board_cate we want to update
     *   }
     * })
    **/
    upsert<T extends board_cateUpsertArgs>(
      args: Subset<T, board_cateUpsertArgs>
    ): CheckSelect<T, Prisma__board_cateClient<board_cate>, Prisma__board_cateClient<board_cateGetPayload<T>>>
    /**
     * Find zero or one Board_cate that matches the filter.
     * @param {FindUniqueboard_cateArgs} args - Arguments to find a Board_cate
     * @deprecated This will be deprecated please use prisma.board_cate.findUnique
     * @example
     * // Get one Board_cate
     * const board_cate = await prisma.board_cate.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueboard_cateArgs>(
      args: Subset<T, FindUniqueboard_cateArgs>
    ): CheckSelect<T, Prisma__board_cateClient<board_cate | null>, Prisma__board_cateClient<board_cateGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyboard_cateArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateBoard_cateArgs>(args: Subset<T, AggregateBoard_cateArgs>): Promise<GetBoard_cateAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for board_cate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__board_cateClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    board_post<T extends FindManyboard_postArgs = {}>(args?: Subset<T, FindManyboard_postArgs>): CheckSelect<T, Promise<Array<board_post>>, Promise<Array<board_postGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * board_cate findUnique
   */
  export type FindUniqueboard_cateArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
    /**
     * Filter, which board_cate to fetch.
    **/
    where: board_cateWhereUniqueInput
  }


  /**
   * board_cate findFirst
   */
  export type FindFirstboard_cateArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
    /**
     * Filter, which board_cate to fetch.
    **/
    where?: board_cateWhereInput
    orderBy?: Enumerable<board_cateOrderByInput>
    cursor?: board_cateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Board_cateScalarFieldEnum>
  }


  /**
   * board_cate findMany
   */
  export type FindManyboard_cateArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
    /**
     * Filter, which board_cates to fetch.
    **/
    where?: board_cateWhereInput
    /**
     * Determine the order of the board_cates to fetch.
    **/
    orderBy?: Enumerable<board_cateOrderByInput>
    /**
     * Sets the position for listing board_cates.
    **/
    cursor?: board_cateWhereUniqueInput
    /**
     * The number of board_cates to fetch. If negative number, it will take board_cates before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` board_cates.
    **/
    skip?: number
    distinct?: Enumerable<Board_cateScalarFieldEnum>
  }


  /**
   * board_cate create
   */
  export type board_cateCreateArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
    /**
     * The data needed to create a board_cate.
    **/
    data: board_cateCreateInput
  }


  /**
   * board_cate update
   */
  export type board_cateUpdateArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
    /**
     * The data needed to update a board_cate.
    **/
    data: board_cateUpdateInput
    /**
     * Choose, which board_cate to update.
    **/
    where: board_cateWhereUniqueInput
  }


  /**
   * board_cate updateMany
   */
  export type board_cateUpdateManyArgs = {
    data: board_cateUpdateManyMutationInput
    where?: board_cateWhereInput
  }


  /**
   * board_cate upsert
   */
  export type board_cateUpsertArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
    /**
     * The filter to search for the board_cate to update in case it exists.
    **/
    where: board_cateWhereUniqueInput
    /**
     * In case the board_cate found by the `where` argument doesn't exist, create a new board_cate with this data.
    **/
    create: board_cateCreateInput
    /**
     * In case the board_cate was found with the provided `where` argument, update it with this data.
    **/
    update: board_cateUpdateInput
  }


  /**
   * board_cate delete
   */
  export type board_cateDeleteArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
    /**
     * Filter which board_cate to delete.
    **/
    where: board_cateWhereUniqueInput
  }


  /**
   * board_cate deleteMany
   */
  export type board_cateDeleteManyArgs = {
    where?: board_cateWhereInput
  }


  /**
   * board_cate without action
   */
  export type board_cateArgs = {
    /**
     * Select specific fields to fetch from the board_cate
    **/
    select?: board_cateSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_cateInclude | null
  }



  /**
   * Model board_post
   */


  export type AggregateBoard_post = {
    count: number | null
    avg: Board_postAvgAggregateOutputType | null
    sum: Board_postSumAggregateOutputType | null
    min: Board_postMinAggregateOutputType | null
    max: Board_postMaxAggregateOutputType | null
  }

  export type Board_postAvgAggregateOutputType = {
    bpo_idx: number
    bpo_bca_idx: number
  }

  export type Board_postSumAggregateOutputType = {
    bpo_idx: number
    bpo_bca_idx: number
  }

  export type Board_postMinAggregateOutputType = {
    bpo_idx: number
    bpo_bca_idx: number
    bpo_title: string | null
    bpo_desc: string | null
  }

  export type Board_postMaxAggregateOutputType = {
    bpo_idx: number
    bpo_bca_idx: number
    bpo_title: string | null
    bpo_desc: string | null
  }

  export type Board_postCountAggregateOutputType = {
    bpo_idx: number
    bpo_bca_idx: number
    bpo_title: number | null
    bpo_desc: number | null
    _all: number
  }


  export type Board_postAvgAggregateInputType = {
    bpo_idx?: true
    bpo_bca_idx?: true
  }

  export type Board_postSumAggregateInputType = {
    bpo_idx?: true
    bpo_bca_idx?: true
  }

  export type Board_postMinAggregateInputType = {
    bpo_idx?: true
    bpo_bca_idx?: true
    bpo_title?: true
    bpo_desc?: true
  }

  export type Board_postMaxAggregateInputType = {
    bpo_idx?: true
    bpo_bca_idx?: true
    bpo_title?: true
    bpo_desc?: true
  }

  export type Board_postCountAggregateInputType = {
    bpo_idx?: true
    bpo_bca_idx?: true
    bpo_title?: true
    bpo_desc?: true
    _all?: true
  }

  export type AggregateBoard_postArgs = {
    where?: board_postWhereInput
    orderBy?: Enumerable<board_postOrderByInput>
    cursor?: board_postWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Board_postAvgAggregateInputType
    sum?: Board_postSumAggregateInputType
    min?: Board_postMinAggregateInputType
    max?: Board_postMaxAggregateInputType
  }

  export type GetBoard_postAggregateType<T extends AggregateBoard_postArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetBoard_postAggregateScalarType<T[P]>
  }

  export type GetBoard_postAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Board_postAvgAggregateOutputType ? Board_postAvgAggregateOutputType[P] : never
  }

    



  export type board_postSelect = {
    bpo_idx?: boolean
    bpo_bca_idx?: boolean
    bpo_title?: boolean
    bpo_desc?: boolean
    board_cate?: boolean | board_cateArgs
  }

  export type board_postInclude = {
    board_cate?: boolean | board_cateArgs
  }

  export type board_postGetPayload<
    S extends boolean | null | undefined | board_postArgs,
    U = keyof S
      > = S extends true
        ? board_post
    : S extends undefined
    ? never
    : S extends board_postArgs | FindManyboard_postArgs
    ?'include' extends U
    ? board_post  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'board_cate'
        ? board_cateGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof board_post ?board_post [P]
  : 
          P extends 'board_cate'
        ? board_cateGetPayload<S['select'][P]> : never
  } 
    : board_post
  : board_post


  export interface board_postDelegate {
    /**
     * Find zero or one Board_post that matches the filter.
     * @param {FindUniqueboard_postArgs} args - Arguments to find a Board_post
     * @example
     * // Get one Board_post
     * const board_post = await prisma.board_post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueboard_postArgs>(
      args: Subset<T, FindUniqueboard_postArgs>
    ): CheckSelect<T, Prisma__board_postClient<board_post | null>, Prisma__board_postClient<board_postGetPayload<T> | null>>
    /**
     * Find the first Board_post that matches the filter.
     * @param {FindFirstboard_postArgs} args - Arguments to find a Board_post
     * @example
     * // Get one Board_post
     * const board_post = await prisma.board_post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstboard_postArgs>(
      args?: Subset<T, FindFirstboard_postArgs>
    ): CheckSelect<T, Prisma__board_postClient<board_post | null>, Prisma__board_postClient<board_postGetPayload<T> | null>>
    /**
     * Find zero or more Board_posts that matches the filter.
     * @param {FindManyboard_postArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Board_posts
     * const board_posts = await prisma.board_post.findMany()
     * 
     * // Get first 10 Board_posts
     * const board_posts = await prisma.board_post.findMany({ take: 10 })
     * 
     * // Only select the `bpo_idx`
     * const board_postWithBpo_idxOnly = await prisma.board_post.findMany({ select: { bpo_idx: true } })
     * 
    **/
    findMany<T extends FindManyboard_postArgs>(
      args?: Subset<T, FindManyboard_postArgs>
    ): CheckSelect<T, Promise<Array<board_post>>, Promise<Array<board_postGetPayload<T>>>>
    /**
     * Create a Board_post.
     * @param {board_postCreateArgs} args - Arguments to create a Board_post.
     * @example
     * // Create one Board_post
     * const Board_post = await prisma.board_post.create({
     *   data: {
     *     // ... data to create a Board_post
     *   }
     * })
     * 
    **/
    create<T extends board_postCreateArgs>(
      args: Subset<T, board_postCreateArgs>
    ): CheckSelect<T, Prisma__board_postClient<board_post>, Prisma__board_postClient<board_postGetPayload<T>>>
    /**
     * Delete a Board_post.
     * @param {board_postDeleteArgs} args - Arguments to delete one Board_post.
     * @example
     * // Delete one Board_post
     * const Board_post = await prisma.board_post.delete({
     *   where: {
     *     // ... filter to delete one Board_post
     *   }
     * })
     * 
    **/
    delete<T extends board_postDeleteArgs>(
      args: Subset<T, board_postDeleteArgs>
    ): CheckSelect<T, Prisma__board_postClient<board_post>, Prisma__board_postClient<board_postGetPayload<T>>>
    /**
     * Update one Board_post.
     * @param {board_postUpdateArgs} args - Arguments to update one Board_post.
     * @example
     * // Update one Board_post
     * const board_post = await prisma.board_post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends board_postUpdateArgs>(
      args: Subset<T, board_postUpdateArgs>
    ): CheckSelect<T, Prisma__board_postClient<board_post>, Prisma__board_postClient<board_postGetPayload<T>>>
    /**
     * Delete zero or more Board_posts.
     * @param {board_postDeleteManyArgs} args - Arguments to filter Board_posts to delete.
     * @example
     * // Delete a few Board_posts
     * const { count } = await prisma.board_post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends board_postDeleteManyArgs>(
      args?: Subset<T, board_postDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Board_posts.
     * @param {board_postUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Board_posts
     * const board_post = await prisma.board_post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends board_postUpdateManyArgs>(
      args: Subset<T, board_postUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Board_post.
     * @param {board_postUpsertArgs} args - Arguments to update or create a Board_post.
     * @example
     * // Update or create a Board_post
     * const board_post = await prisma.board_post.upsert({
     *   create: {
     *     // ... data to create a Board_post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Board_post we want to update
     *   }
     * })
    **/
    upsert<T extends board_postUpsertArgs>(
      args: Subset<T, board_postUpsertArgs>
    ): CheckSelect<T, Prisma__board_postClient<board_post>, Prisma__board_postClient<board_postGetPayload<T>>>
    /**
     * Find zero or one Board_post that matches the filter.
     * @param {FindUniqueboard_postArgs} args - Arguments to find a Board_post
     * @deprecated This will be deprecated please use prisma.board_post.findUnique
     * @example
     * // Get one Board_post
     * const board_post = await prisma.board_post.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueboard_postArgs>(
      args: Subset<T, FindUniqueboard_postArgs>
    ): CheckSelect<T, Prisma__board_postClient<board_post | null>, Prisma__board_postClient<board_postGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyboard_postArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateBoard_postArgs>(args: Subset<T, AggregateBoard_postArgs>): Promise<GetBoard_postAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for board_post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__board_postClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    board_cate<T extends board_cateArgs = {}>(args?: Subset<T, board_cateArgs>): CheckSelect<T, Prisma__board_cateClient<board_cate | null>, Prisma__board_cateClient<board_cateGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * board_post findUnique
   */
  export type FindUniqueboard_postArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
    /**
     * Filter, which board_post to fetch.
    **/
    where: board_postWhereUniqueInput
  }


  /**
   * board_post findFirst
   */
  export type FindFirstboard_postArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
    /**
     * Filter, which board_post to fetch.
    **/
    where?: board_postWhereInput
    orderBy?: Enumerable<board_postOrderByInput>
    cursor?: board_postWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Board_postScalarFieldEnum>
  }


  /**
   * board_post findMany
   */
  export type FindManyboard_postArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
    /**
     * Filter, which board_posts to fetch.
    **/
    where?: board_postWhereInput
    /**
     * Determine the order of the board_posts to fetch.
    **/
    orderBy?: Enumerable<board_postOrderByInput>
    /**
     * Sets the position for listing board_posts.
    **/
    cursor?: board_postWhereUniqueInput
    /**
     * The number of board_posts to fetch. If negative number, it will take board_posts before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` board_posts.
    **/
    skip?: number
    distinct?: Enumerable<Board_postScalarFieldEnum>
  }


  /**
   * board_post create
   */
  export type board_postCreateArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
    /**
     * The data needed to create a board_post.
    **/
    data: board_postCreateInput
  }


  /**
   * board_post update
   */
  export type board_postUpdateArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
    /**
     * The data needed to update a board_post.
    **/
    data: board_postUpdateInput
    /**
     * Choose, which board_post to update.
    **/
    where: board_postWhereUniqueInput
  }


  /**
   * board_post updateMany
   */
  export type board_postUpdateManyArgs = {
    data: board_postUpdateManyMutationInput
    where?: board_postWhereInput
  }


  /**
   * board_post upsert
   */
  export type board_postUpsertArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
    /**
     * The filter to search for the board_post to update in case it exists.
    **/
    where: board_postWhereUniqueInput
    /**
     * In case the board_post found by the `where` argument doesn't exist, create a new board_post with this data.
    **/
    create: board_postCreateInput
    /**
     * In case the board_post was found with the provided `where` argument, update it with this data.
    **/
    update: board_postUpdateInput
  }


  /**
   * board_post delete
   */
  export type board_postDeleteArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
    /**
     * Filter which board_post to delete.
    **/
    where: board_postWhereUniqueInput
  }


  /**
   * board_post deleteMany
   */
  export type board_postDeleteManyArgs = {
    where?: board_postWhereInput
  }


  /**
   * board_post without action
   */
  export type board_postArgs = {
    /**
     * Select specific fields to fetch from the board_post
    **/
    select?: board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: board_postInclude | null
  }



  /**
   * Model rs_member
   */


  export type AggregateRs_member = {
    count: number | null
    avg: Rs_memberAvgAggregateOutputType | null
    sum: Rs_memberSumAggregateOutputType | null
    min: Rs_memberMinAggregateOutputType | null
    max: Rs_memberMaxAggregateOutputType | null
  }

  export type Rs_memberAvgAggregateOutputType = {
    mem_idx: number
    mem_lastlogin_timestamp: number
    mem_is_admin: number
    mem_point: number
  }

  export type Rs_memberSumAggregateOutputType = {
    mem_idx: number
    mem_lastlogin_timestamp: number
    mem_is_admin: number
    mem_point: number
  }

  export type Rs_memberMinAggregateOutputType = {
    mem_idx: number
    mem_userpw: string | null
    mem_userid: string | null
    mem_email: string | null
    mem_lastlogin_datetime: string | null
    mem_lastlogin_timestamp: number
    mem_inactive_check: string | null
    mem_is_admin: number
    mem_point: number
  }

  export type Rs_memberMaxAggregateOutputType = {
    mem_idx: number
    mem_userpw: string | null
    mem_userid: string | null
    mem_email: string | null
    mem_lastlogin_datetime: string | null
    mem_lastlogin_timestamp: number
    mem_inactive_check: string | null
    mem_is_admin: number
    mem_point: number
  }

  export type Rs_memberCountAggregateOutputType = {
    mem_idx: number
    mem_userpw: number | null
    mem_userid: number | null
    mem_email: number | null
    mem_lastlogin_datetime: number | null
    mem_lastlogin_timestamp: number
    mem_inactive_check: number | null
    mem_is_admin: number
    mem_point: number
    _all: number
  }


  export type Rs_memberAvgAggregateInputType = {
    mem_idx?: true
    mem_lastlogin_timestamp?: true
    mem_is_admin?: true
    mem_point?: true
  }

  export type Rs_memberSumAggregateInputType = {
    mem_idx?: true
    mem_lastlogin_timestamp?: true
    mem_is_admin?: true
    mem_point?: true
  }

  export type Rs_memberMinAggregateInputType = {
    mem_idx?: true
    mem_userpw?: true
    mem_userid?: true
    mem_email?: true
    mem_lastlogin_datetime?: true
    mem_lastlogin_timestamp?: true
    mem_inactive_check?: true
    mem_is_admin?: true
    mem_point?: true
  }

  export type Rs_memberMaxAggregateInputType = {
    mem_idx?: true
    mem_userpw?: true
    mem_userid?: true
    mem_email?: true
    mem_lastlogin_datetime?: true
    mem_lastlogin_timestamp?: true
    mem_inactive_check?: true
    mem_is_admin?: true
    mem_point?: true
  }

  export type Rs_memberCountAggregateInputType = {
    mem_idx?: true
    mem_userpw?: true
    mem_userid?: true
    mem_email?: true
    mem_lastlogin_datetime?: true
    mem_lastlogin_timestamp?: true
    mem_inactive_check?: true
    mem_is_admin?: true
    mem_point?: true
    _all?: true
  }

  export type AggregateRs_memberArgs = {
    where?: rs_memberWhereInput
    orderBy?: Enumerable<rs_memberOrderByInput>
    cursor?: rs_memberWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_memberAvgAggregateInputType
    sum?: Rs_memberSumAggregateInputType
    min?: Rs_memberMinAggregateInputType
    max?: Rs_memberMaxAggregateInputType
  }

  export type GetRs_memberAggregateType<T extends AggregateRs_memberArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_memberAggregateScalarType<T[P]>
  }

  export type GetRs_memberAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_memberAvgAggregateOutputType ? Rs_memberAvgAggregateOutputType[P] : never
  }

    



  export type rs_memberSelect = {
    mem_idx?: boolean
    mem_userpw?: boolean
    mem_userid?: boolean
    mem_email?: boolean
    mem_lastlogin_datetime?: boolean
    mem_lastlogin_timestamp?: boolean
    mem_inactive_check?: boolean
    mem_is_admin?: boolean
    mem_point?: boolean
    rs_mgr_mem?: boolean | rs_mgr_memArgs
    rs_note_rs_memberTors_note_not_recv_id?: boolean | FindManyrs_noteArgs
    rs_note_rs_memberTors_note_not_send_id?: boolean | FindManyrs_noteArgs
    rs_point?: boolean | rs_pointArgs
  }

  export type rs_memberInclude = {
    rs_mgr_mem?: boolean | rs_mgr_memArgs
    rs_note_rs_memberTors_note_not_recv_id?: boolean | FindManyrs_noteArgs
    rs_note_rs_memberTors_note_not_send_id?: boolean | FindManyrs_noteArgs
    rs_point?: boolean | rs_pointArgs
  }

  export type rs_memberGetPayload<
    S extends boolean | null | undefined | rs_memberArgs,
    U = keyof S
      > = S extends true
        ? rs_member
    : S extends undefined
    ? never
    : S extends rs_memberArgs | FindManyrs_memberArgs
    ?'include' extends U
    ? rs_member  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_mgr_mem'
        ? rs_mgr_memGetPayload<S['include'][P]> | null :
        P extends 'rs_note_rs_memberTors_note_not_recv_id'
        ? Array < rs_noteGetPayload<S['include'][P]>>  :
        P extends 'rs_note_rs_memberTors_note_not_send_id'
        ? Array < rs_noteGetPayload<S['include'][P]>>  :
        P extends 'rs_point'
        ? rs_pointGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_member ?rs_member [P]
  : 
          P extends 'rs_mgr_mem'
        ? rs_mgr_memGetPayload<S['select'][P]> | null :
        P extends 'rs_note_rs_memberTors_note_not_recv_id'
        ? Array < rs_noteGetPayload<S['select'][P]>>  :
        P extends 'rs_note_rs_memberTors_note_not_send_id'
        ? Array < rs_noteGetPayload<S['select'][P]>>  :
        P extends 'rs_point'
        ? rs_pointGetPayload<S['select'][P]> | null : never
  } 
    : rs_member
  : rs_member


  export interface rs_memberDelegate {
    /**
     * Find zero or one Rs_member that matches the filter.
     * @param {FindUniquers_memberArgs} args - Arguments to find a Rs_member
     * @example
     * // Get one Rs_member
     * const rs_member = await prisma.rs_member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_memberArgs>(
      args: Subset<T, FindUniquers_memberArgs>
    ): CheckSelect<T, Prisma__rs_memberClient<rs_member | null>, Prisma__rs_memberClient<rs_memberGetPayload<T> | null>>
    /**
     * Find the first Rs_member that matches the filter.
     * @param {FindFirstrs_memberArgs} args - Arguments to find a Rs_member
     * @example
     * // Get one Rs_member
     * const rs_member = await prisma.rs_member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_memberArgs>(
      args?: Subset<T, FindFirstrs_memberArgs>
    ): CheckSelect<T, Prisma__rs_memberClient<rs_member | null>, Prisma__rs_memberClient<rs_memberGetPayload<T> | null>>
    /**
     * Find zero or more Rs_members that matches the filter.
     * @param {FindManyrs_memberArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_members
     * const rs_members = await prisma.rs_member.findMany()
     * 
     * // Get first 10 Rs_members
     * const rs_members = await prisma.rs_member.findMany({ take: 10 })
     * 
     * // Only select the `mem_idx`
     * const rs_memberWithMem_idxOnly = await prisma.rs_member.findMany({ select: { mem_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_memberArgs>(
      args?: Subset<T, FindManyrs_memberArgs>
    ): CheckSelect<T, Promise<Array<rs_member>>, Promise<Array<rs_memberGetPayload<T>>>>
    /**
     * Create a Rs_member.
     * @param {rs_memberCreateArgs} args - Arguments to create a Rs_member.
     * @example
     * // Create one Rs_member
     * const Rs_member = await prisma.rs_member.create({
     *   data: {
     *     // ... data to create a Rs_member
     *   }
     * })
     * 
    **/
    create<T extends rs_memberCreateArgs>(
      args: Subset<T, rs_memberCreateArgs>
    ): CheckSelect<T, Prisma__rs_memberClient<rs_member>, Prisma__rs_memberClient<rs_memberGetPayload<T>>>
    /**
     * Delete a Rs_member.
     * @param {rs_memberDeleteArgs} args - Arguments to delete one Rs_member.
     * @example
     * // Delete one Rs_member
     * const Rs_member = await prisma.rs_member.delete({
     *   where: {
     *     // ... filter to delete one Rs_member
     *   }
     * })
     * 
    **/
    delete<T extends rs_memberDeleteArgs>(
      args: Subset<T, rs_memberDeleteArgs>
    ): CheckSelect<T, Prisma__rs_memberClient<rs_member>, Prisma__rs_memberClient<rs_memberGetPayload<T>>>
    /**
     * Update one Rs_member.
     * @param {rs_memberUpdateArgs} args - Arguments to update one Rs_member.
     * @example
     * // Update one Rs_member
     * const rs_member = await prisma.rs_member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_memberUpdateArgs>(
      args: Subset<T, rs_memberUpdateArgs>
    ): CheckSelect<T, Prisma__rs_memberClient<rs_member>, Prisma__rs_memberClient<rs_memberGetPayload<T>>>
    /**
     * Delete zero or more Rs_members.
     * @param {rs_memberDeleteManyArgs} args - Arguments to filter Rs_members to delete.
     * @example
     * // Delete a few Rs_members
     * const { count } = await prisma.rs_member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_memberDeleteManyArgs>(
      args?: Subset<T, rs_memberDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_members.
     * @param {rs_memberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_members
     * const rs_member = await prisma.rs_member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_memberUpdateManyArgs>(
      args: Subset<T, rs_memberUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_member.
     * @param {rs_memberUpsertArgs} args - Arguments to update or create a Rs_member.
     * @example
     * // Update or create a Rs_member
     * const rs_member = await prisma.rs_member.upsert({
     *   create: {
     *     // ... data to create a Rs_member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_member we want to update
     *   }
     * })
    **/
    upsert<T extends rs_memberUpsertArgs>(
      args: Subset<T, rs_memberUpsertArgs>
    ): CheckSelect<T, Prisma__rs_memberClient<rs_member>, Prisma__rs_memberClient<rs_memberGetPayload<T>>>
    /**
     * Find zero or one Rs_member that matches the filter.
     * @param {FindUniquers_memberArgs} args - Arguments to find a Rs_member
     * @deprecated This will be deprecated please use prisma.rs_member.findUnique
     * @example
     * // Get one Rs_member
     * const rs_member = await prisma.rs_member.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_memberArgs>(
      args: Subset<T, FindUniquers_memberArgs>
    ): CheckSelect<T, Prisma__rs_memberClient<rs_member | null>, Prisma__rs_memberClient<rs_memberGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_memberArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_memberArgs>(args: Subset<T, AggregateRs_memberArgs>): Promise<GetRs_memberAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_memberClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_mgr_mem<T extends rs_mgr_memArgs = {}>(args?: Subset<T, rs_mgr_memArgs>): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem | null>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T> | null>>;

    rs_note_rs_memberTors_note_not_recv_id<T extends FindManyrs_noteArgs = {}>(args?: Subset<T, FindManyrs_noteArgs>): CheckSelect<T, Promise<Array<rs_note>>, Promise<Array<rs_noteGetPayload<T>>>>;

    rs_note_rs_memberTors_note_not_send_id<T extends FindManyrs_noteArgs = {}>(args?: Subset<T, FindManyrs_noteArgs>): CheckSelect<T, Promise<Array<rs_note>>, Promise<Array<rs_noteGetPayload<T>>>>;

    rs_point<T extends rs_pointArgs = {}>(args?: Subset<T, rs_pointArgs>): CheckSelect<T, Prisma__rs_pointClient<rs_point | null>, Prisma__rs_pointClient<rs_pointGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_member findUnique
   */
  export type FindUniquers_memberArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
    /**
     * Filter, which rs_member to fetch.
    **/
    where: rs_memberWhereUniqueInput
  }


  /**
   * rs_member findFirst
   */
  export type FindFirstrs_memberArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
    /**
     * Filter, which rs_member to fetch.
    **/
    where?: rs_memberWhereInput
    orderBy?: Enumerable<rs_memberOrderByInput>
    cursor?: rs_memberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_memberScalarFieldEnum>
  }


  /**
   * rs_member findMany
   */
  export type FindManyrs_memberArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
    /**
     * Filter, which rs_members to fetch.
    **/
    where?: rs_memberWhereInput
    /**
     * Determine the order of the rs_members to fetch.
    **/
    orderBy?: Enumerable<rs_memberOrderByInput>
    /**
     * Sets the position for listing rs_members.
    **/
    cursor?: rs_memberWhereUniqueInput
    /**
     * The number of rs_members to fetch. If negative number, it will take rs_members before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_members.
    **/
    skip?: number
    distinct?: Enumerable<Rs_memberScalarFieldEnum>
  }


  /**
   * rs_member create
   */
  export type rs_memberCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
    /**
     * The data needed to create a rs_member.
    **/
    data: rs_memberCreateInput
  }


  /**
   * rs_member update
   */
  export type rs_memberUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
    /**
     * The data needed to update a rs_member.
    **/
    data: rs_memberUpdateInput
    /**
     * Choose, which rs_member to update.
    **/
    where: rs_memberWhereUniqueInput
  }


  /**
   * rs_member updateMany
   */
  export type rs_memberUpdateManyArgs = {
    data: rs_memberUpdateManyMutationInput
    where?: rs_memberWhereInput
  }


  /**
   * rs_member upsert
   */
  export type rs_memberUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
    /**
     * The filter to search for the rs_member to update in case it exists.
    **/
    where: rs_memberWhereUniqueInput
    /**
     * In case the rs_member found by the `where` argument doesn't exist, create a new rs_member with this data.
    **/
    create: rs_memberCreateInput
    /**
     * In case the rs_member was found with the provided `where` argument, update it with this data.
    **/
    update: rs_memberUpdateInput
  }


  /**
   * rs_member delete
   */
  export type rs_memberDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
    /**
     * Filter which rs_member to delete.
    **/
    where: rs_memberWhereUniqueInput
  }


  /**
   * rs_member deleteMany
   */
  export type rs_memberDeleteManyArgs = {
    where?: rs_memberWhereInput
  }


  /**
   * rs_member without action
   */
  export type rs_memberArgs = {
    /**
     * Select specific fields to fetch from the rs_member
    **/
    select?: rs_memberSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_memberInclude | null
  }



  /**
   * Model rs_mem_login_log
   */


  export type AggregateRs_mem_login_log = {
    count: number | null
    avg: Rs_mem_login_logAvgAggregateOutputType | null
    sum: Rs_mem_login_logSumAggregateOutputType | null
    min: Rs_mem_login_logMinAggregateOutputType | null
    max: Rs_mem_login_logMaxAggregateOutputType | null
  }

  export type Rs_mem_login_logAvgAggregateOutputType = {
    mll_idx: number
    mll_success: number
    mll_mem_idx: number
    mll_timestamp: number | null
    mll_fail_count: number
  }

  export type Rs_mem_login_logSumAggregateOutputType = {
    mll_idx: number
    mll_success: number
    mll_mem_idx: number
    mll_timestamp: number | null
    mll_fail_count: number
  }

  export type Rs_mem_login_logMinAggregateOutputType = {
    mll_idx: number
    mll_success: number
    mll_mem_idx: number
    mll_email: string | null
    mll_datetime: string | null
    mll_reason: string | null
    mll_timestamp: number | null
    mll_ip: string | null
    mll_fail_count: number
  }

  export type Rs_mem_login_logMaxAggregateOutputType = {
    mll_idx: number
    mll_success: number
    mll_mem_idx: number
    mll_email: string | null
    mll_datetime: string | null
    mll_reason: string | null
    mll_timestamp: number | null
    mll_ip: string | null
    mll_fail_count: number
  }

  export type Rs_mem_login_logCountAggregateOutputType = {
    mll_idx: number
    mll_success: number
    mll_mem_idx: number
    mll_email: number | null
    mll_datetime: number | null
    mll_reason: number | null
    mll_timestamp: number | null
    mll_ip: number | null
    mll_fail_count: number
    _all: number
  }


  export type Rs_mem_login_logAvgAggregateInputType = {
    mll_idx?: true
    mll_success?: true
    mll_mem_idx?: true
    mll_timestamp?: true
    mll_fail_count?: true
  }

  export type Rs_mem_login_logSumAggregateInputType = {
    mll_idx?: true
    mll_success?: true
    mll_mem_idx?: true
    mll_timestamp?: true
    mll_fail_count?: true
  }

  export type Rs_mem_login_logMinAggregateInputType = {
    mll_idx?: true
    mll_success?: true
    mll_mem_idx?: true
    mll_email?: true
    mll_datetime?: true
    mll_reason?: true
    mll_timestamp?: true
    mll_ip?: true
    mll_fail_count?: true
  }

  export type Rs_mem_login_logMaxAggregateInputType = {
    mll_idx?: true
    mll_success?: true
    mll_mem_idx?: true
    mll_email?: true
    mll_datetime?: true
    mll_reason?: true
    mll_timestamp?: true
    mll_ip?: true
    mll_fail_count?: true
  }

  export type Rs_mem_login_logCountAggregateInputType = {
    mll_idx?: true
    mll_success?: true
    mll_mem_idx?: true
    mll_email?: true
    mll_datetime?: true
    mll_reason?: true
    mll_timestamp?: true
    mll_ip?: true
    mll_fail_count?: true
    _all?: true
  }

  export type AggregateRs_mem_login_logArgs = {
    where?: rs_mem_login_logWhereInput
    orderBy?: Enumerable<rs_mem_login_logOrderByInput>
    cursor?: rs_mem_login_logWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_mem_login_logAvgAggregateInputType
    sum?: Rs_mem_login_logSumAggregateInputType
    min?: Rs_mem_login_logMinAggregateInputType
    max?: Rs_mem_login_logMaxAggregateInputType
  }

  export type GetRs_mem_login_logAggregateType<T extends AggregateRs_mem_login_logArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_mem_login_logAggregateScalarType<T[P]>
  }

  export type GetRs_mem_login_logAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_mem_login_logAvgAggregateOutputType ? Rs_mem_login_logAvgAggregateOutputType[P] : never
  }

    



  export type rs_mem_login_logSelect = {
    mll_idx?: boolean
    mll_success?: boolean
    mll_mem_idx?: boolean
    mll_email?: boolean
    mll_datetime?: boolean
    mll_reason?: boolean
    mll_timestamp?: boolean
    mll_ip?: boolean
    mll_fail_count?: boolean
  }

  export type rs_mem_login_logGetPayload<
    S extends boolean | null | undefined | rs_mem_login_logArgs,
    U = keyof S
      > = S extends true
        ? rs_mem_login_log
    : S extends undefined
    ? never
    : S extends rs_mem_login_logArgs | FindManyrs_mem_login_logArgs
    ?'include' extends U
    ? rs_mem_login_log 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_mem_login_log ?rs_mem_login_log [P]
  : 
     never
  } 
    : rs_mem_login_log
  : rs_mem_login_log


  export interface rs_mem_login_logDelegate {
    /**
     * Find zero or one Rs_mem_login_log that matches the filter.
     * @param {FindUniquers_mem_login_logArgs} args - Arguments to find a Rs_mem_login_log
     * @example
     * // Get one Rs_mem_login_log
     * const rs_mem_login_log = await prisma.rs_mem_login_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_mem_login_logArgs>(
      args: Subset<T, FindUniquers_mem_login_logArgs>
    ): CheckSelect<T, Prisma__rs_mem_login_logClient<rs_mem_login_log | null>, Prisma__rs_mem_login_logClient<rs_mem_login_logGetPayload<T> | null>>
    /**
     * Find the first Rs_mem_login_log that matches the filter.
     * @param {FindFirstrs_mem_login_logArgs} args - Arguments to find a Rs_mem_login_log
     * @example
     * // Get one Rs_mem_login_log
     * const rs_mem_login_log = await prisma.rs_mem_login_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_mem_login_logArgs>(
      args?: Subset<T, FindFirstrs_mem_login_logArgs>
    ): CheckSelect<T, Prisma__rs_mem_login_logClient<rs_mem_login_log | null>, Prisma__rs_mem_login_logClient<rs_mem_login_logGetPayload<T> | null>>
    /**
     * Find zero or more Rs_mem_login_logs that matches the filter.
     * @param {FindManyrs_mem_login_logArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_mem_login_logs
     * const rs_mem_login_logs = await prisma.rs_mem_login_log.findMany()
     * 
     * // Get first 10 Rs_mem_login_logs
     * const rs_mem_login_logs = await prisma.rs_mem_login_log.findMany({ take: 10 })
     * 
     * // Only select the `mll_idx`
     * const rs_mem_login_logWithMll_idxOnly = await prisma.rs_mem_login_log.findMany({ select: { mll_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_mem_login_logArgs>(
      args?: Subset<T, FindManyrs_mem_login_logArgs>
    ): CheckSelect<T, Promise<Array<rs_mem_login_log>>, Promise<Array<rs_mem_login_logGetPayload<T>>>>
    /**
     * Create a Rs_mem_login_log.
     * @param {rs_mem_login_logCreateArgs} args - Arguments to create a Rs_mem_login_log.
     * @example
     * // Create one Rs_mem_login_log
     * const Rs_mem_login_log = await prisma.rs_mem_login_log.create({
     *   data: {
     *     // ... data to create a Rs_mem_login_log
     *   }
     * })
     * 
    **/
    create<T extends rs_mem_login_logCreateArgs>(
      args: Subset<T, rs_mem_login_logCreateArgs>
    ): CheckSelect<T, Prisma__rs_mem_login_logClient<rs_mem_login_log>, Prisma__rs_mem_login_logClient<rs_mem_login_logGetPayload<T>>>
    /**
     * Delete a Rs_mem_login_log.
     * @param {rs_mem_login_logDeleteArgs} args - Arguments to delete one Rs_mem_login_log.
     * @example
     * // Delete one Rs_mem_login_log
     * const Rs_mem_login_log = await prisma.rs_mem_login_log.delete({
     *   where: {
     *     // ... filter to delete one Rs_mem_login_log
     *   }
     * })
     * 
    **/
    delete<T extends rs_mem_login_logDeleteArgs>(
      args: Subset<T, rs_mem_login_logDeleteArgs>
    ): CheckSelect<T, Prisma__rs_mem_login_logClient<rs_mem_login_log>, Prisma__rs_mem_login_logClient<rs_mem_login_logGetPayload<T>>>
    /**
     * Update one Rs_mem_login_log.
     * @param {rs_mem_login_logUpdateArgs} args - Arguments to update one Rs_mem_login_log.
     * @example
     * // Update one Rs_mem_login_log
     * const rs_mem_login_log = await prisma.rs_mem_login_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_mem_login_logUpdateArgs>(
      args: Subset<T, rs_mem_login_logUpdateArgs>
    ): CheckSelect<T, Prisma__rs_mem_login_logClient<rs_mem_login_log>, Prisma__rs_mem_login_logClient<rs_mem_login_logGetPayload<T>>>
    /**
     * Delete zero or more Rs_mem_login_logs.
     * @param {rs_mem_login_logDeleteManyArgs} args - Arguments to filter Rs_mem_login_logs to delete.
     * @example
     * // Delete a few Rs_mem_login_logs
     * const { count } = await prisma.rs_mem_login_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_mem_login_logDeleteManyArgs>(
      args?: Subset<T, rs_mem_login_logDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_mem_login_logs.
     * @param {rs_mem_login_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_mem_login_logs
     * const rs_mem_login_log = await prisma.rs_mem_login_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_mem_login_logUpdateManyArgs>(
      args: Subset<T, rs_mem_login_logUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_mem_login_log.
     * @param {rs_mem_login_logUpsertArgs} args - Arguments to update or create a Rs_mem_login_log.
     * @example
     * // Update or create a Rs_mem_login_log
     * const rs_mem_login_log = await prisma.rs_mem_login_log.upsert({
     *   create: {
     *     // ... data to create a Rs_mem_login_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_mem_login_log we want to update
     *   }
     * })
    **/
    upsert<T extends rs_mem_login_logUpsertArgs>(
      args: Subset<T, rs_mem_login_logUpsertArgs>
    ): CheckSelect<T, Prisma__rs_mem_login_logClient<rs_mem_login_log>, Prisma__rs_mem_login_logClient<rs_mem_login_logGetPayload<T>>>
    /**
     * Find zero or one Rs_mem_login_log that matches the filter.
     * @param {FindUniquers_mem_login_logArgs} args - Arguments to find a Rs_mem_login_log
     * @deprecated This will be deprecated please use prisma.rs_mem_login_log.findUnique
     * @example
     * // Get one Rs_mem_login_log
     * const rs_mem_login_log = await prisma.rs_mem_login_log.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_mem_login_logArgs>(
      args: Subset<T, FindUniquers_mem_login_logArgs>
    ): CheckSelect<T, Prisma__rs_mem_login_logClient<rs_mem_login_log | null>, Prisma__rs_mem_login_logClient<rs_mem_login_logGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_mem_login_logArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_mem_login_logArgs>(args: Subset<T, AggregateRs_mem_login_logArgs>): Promise<GetRs_mem_login_logAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_mem_login_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_mem_login_logClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_mem_login_log findUnique
   */
  export type FindUniquers_mem_login_logArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
    /**
     * Filter, which rs_mem_login_log to fetch.
    **/
    where: rs_mem_login_logWhereUniqueInput
  }


  /**
   * rs_mem_login_log findFirst
   */
  export type FindFirstrs_mem_login_logArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
    /**
     * Filter, which rs_mem_login_log to fetch.
    **/
    where?: rs_mem_login_logWhereInput
    orderBy?: Enumerable<rs_mem_login_logOrderByInput>
    cursor?: rs_mem_login_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_mem_login_logScalarFieldEnum>
  }


  /**
   * rs_mem_login_log findMany
   */
  export type FindManyrs_mem_login_logArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
    /**
     * Filter, which rs_mem_login_logs to fetch.
    **/
    where?: rs_mem_login_logWhereInput
    /**
     * Determine the order of the rs_mem_login_logs to fetch.
    **/
    orderBy?: Enumerable<rs_mem_login_logOrderByInput>
    /**
     * Sets the position for listing rs_mem_login_logs.
    **/
    cursor?: rs_mem_login_logWhereUniqueInput
    /**
     * The number of rs_mem_login_logs to fetch. If negative number, it will take rs_mem_login_logs before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_mem_login_logs.
    **/
    skip?: number
    distinct?: Enumerable<Rs_mem_login_logScalarFieldEnum>
  }


  /**
   * rs_mem_login_log create
   */
  export type rs_mem_login_logCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
    /**
     * The data needed to create a rs_mem_login_log.
    **/
    data: rs_mem_login_logCreateInput
  }


  /**
   * rs_mem_login_log update
   */
  export type rs_mem_login_logUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
    /**
     * The data needed to update a rs_mem_login_log.
    **/
    data: rs_mem_login_logUpdateInput
    /**
     * Choose, which rs_mem_login_log to update.
    **/
    where: rs_mem_login_logWhereUniqueInput
  }


  /**
   * rs_mem_login_log updateMany
   */
  export type rs_mem_login_logUpdateManyArgs = {
    data: rs_mem_login_logUpdateManyMutationInput
    where?: rs_mem_login_logWhereInput
  }


  /**
   * rs_mem_login_log upsert
   */
  export type rs_mem_login_logUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
    /**
     * The filter to search for the rs_mem_login_log to update in case it exists.
    **/
    where: rs_mem_login_logWhereUniqueInput
    /**
     * In case the rs_mem_login_log found by the `where` argument doesn't exist, create a new rs_mem_login_log with this data.
    **/
    create: rs_mem_login_logCreateInput
    /**
     * In case the rs_mem_login_log was found with the provided `where` argument, update it with this data.
    **/
    update: rs_mem_login_logUpdateInput
  }


  /**
   * rs_mem_login_log delete
   */
  export type rs_mem_login_logDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
    /**
     * Filter which rs_mem_login_log to delete.
    **/
    where: rs_mem_login_logWhereUniqueInput
  }


  /**
   * rs_mem_login_log deleteMany
   */
  export type rs_mem_login_logDeleteManyArgs = {
    where?: rs_mem_login_logWhereInput
  }


  /**
   * rs_mem_login_log without action
   */
  export type rs_mem_login_logArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_login_log
    **/
    select?: rs_mem_login_logSelect | null
  }



  /**
   * Model rs_mgr
   */


  export type AggregateRs_mgr = {
    count: number | null
    avg: Rs_mgrAvgAggregateOutputType | null
    sum: Rs_mgrSumAggregateOutputType | null
    min: Rs_mgrMinAggregateOutputType | null
    max: Rs_mgrMaxAggregateOutputType | null
  }

  export type Rs_mgrAvgAggregateOutputType = {
    mgr_id: number
    mgr_timestemp: number
  }

  export type Rs_mgrSumAggregateOutputType = {
    mgr_id: number
    mgr_timestemp: number
  }

  export type Rs_mgrMinAggregateOutputType = {
    mgr_id: number
    mgr_title: string | null
    mgr_datetime: string | null
    mgr_timestemp: number
  }

  export type Rs_mgrMaxAggregateOutputType = {
    mgr_id: number
    mgr_title: string | null
    mgr_datetime: string | null
    mgr_timestemp: number
  }

  export type Rs_mgrCountAggregateOutputType = {
    mgr_id: number
    mgr_title: number | null
    mgr_datetime: number | null
    mgr_timestemp: number
    _all: number
  }


  export type Rs_mgrAvgAggregateInputType = {
    mgr_id?: true
    mgr_timestemp?: true
  }

  export type Rs_mgrSumAggregateInputType = {
    mgr_id?: true
    mgr_timestemp?: true
  }

  export type Rs_mgrMinAggregateInputType = {
    mgr_id?: true
    mgr_title?: true
    mgr_datetime?: true
    mgr_timestemp?: true
  }

  export type Rs_mgrMaxAggregateInputType = {
    mgr_id?: true
    mgr_title?: true
    mgr_datetime?: true
    mgr_timestemp?: true
  }

  export type Rs_mgrCountAggregateInputType = {
    mgr_id?: true
    mgr_title?: true
    mgr_datetime?: true
    mgr_timestemp?: true
    _all?: true
  }

  export type AggregateRs_mgrArgs = {
    where?: rs_mgrWhereInput
    orderBy?: Enumerable<rs_mgrOrderByInput>
    cursor?: rs_mgrWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_mgrAvgAggregateInputType
    sum?: Rs_mgrSumAggregateInputType
    min?: Rs_mgrMinAggregateInputType
    max?: Rs_mgrMaxAggregateInputType
  }

  export type GetRs_mgrAggregateType<T extends AggregateRs_mgrArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_mgrAggregateScalarType<T[P]>
  }

  export type GetRs_mgrAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_mgrAvgAggregateOutputType ? Rs_mgrAvgAggregateOutputType[P] : never
  }

    



  export type rs_mgrSelect = {
    mgr_id?: boolean
    mgr_title?: boolean
    mgr_datetime?: boolean
    mgr_timestemp?: boolean
    rs_mgr_mem?: boolean | FindManyrs_mgr_memArgs
  }

  export type rs_mgrInclude = {
    rs_mgr_mem?: boolean | FindManyrs_mgr_memArgs
  }

  export type rs_mgrGetPayload<
    S extends boolean | null | undefined | rs_mgrArgs,
    U = keyof S
      > = S extends true
        ? rs_mgr
    : S extends undefined
    ? never
    : S extends rs_mgrArgs | FindManyrs_mgrArgs
    ?'include' extends U
    ? rs_mgr  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_mgr_mem'
        ? Array < rs_mgr_memGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_mgr ?rs_mgr [P]
  : 
          P extends 'rs_mgr_mem'
        ? Array < rs_mgr_memGetPayload<S['select'][P]>>  : never
  } 
    : rs_mgr
  : rs_mgr


  export interface rs_mgrDelegate {
    /**
     * Find zero or one Rs_mgr that matches the filter.
     * @param {FindUniquers_mgrArgs} args - Arguments to find a Rs_mgr
     * @example
     * // Get one Rs_mgr
     * const rs_mgr = await prisma.rs_mgr.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_mgrArgs>(
      args: Subset<T, FindUniquers_mgrArgs>
    ): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr | null>, Prisma__rs_mgrClient<rs_mgrGetPayload<T> | null>>
    /**
     * Find the first Rs_mgr that matches the filter.
     * @param {FindFirstrs_mgrArgs} args - Arguments to find a Rs_mgr
     * @example
     * // Get one Rs_mgr
     * const rs_mgr = await prisma.rs_mgr.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_mgrArgs>(
      args?: Subset<T, FindFirstrs_mgrArgs>
    ): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr | null>, Prisma__rs_mgrClient<rs_mgrGetPayload<T> | null>>
    /**
     * Find zero or more Rs_mgrs that matches the filter.
     * @param {FindManyrs_mgrArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_mgrs
     * const rs_mgrs = await prisma.rs_mgr.findMany()
     * 
     * // Get first 10 Rs_mgrs
     * const rs_mgrs = await prisma.rs_mgr.findMany({ take: 10 })
     * 
     * // Only select the `mgr_id`
     * const rs_mgrWithMgr_idOnly = await prisma.rs_mgr.findMany({ select: { mgr_id: true } })
     * 
    **/
    findMany<T extends FindManyrs_mgrArgs>(
      args?: Subset<T, FindManyrs_mgrArgs>
    ): CheckSelect<T, Promise<Array<rs_mgr>>, Promise<Array<rs_mgrGetPayload<T>>>>
    /**
     * Create a Rs_mgr.
     * @param {rs_mgrCreateArgs} args - Arguments to create a Rs_mgr.
     * @example
     * // Create one Rs_mgr
     * const Rs_mgr = await prisma.rs_mgr.create({
     *   data: {
     *     // ... data to create a Rs_mgr
     *   }
     * })
     * 
    **/
    create<T extends rs_mgrCreateArgs>(
      args: Subset<T, rs_mgrCreateArgs>
    ): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr>, Prisma__rs_mgrClient<rs_mgrGetPayload<T>>>
    /**
     * Delete a Rs_mgr.
     * @param {rs_mgrDeleteArgs} args - Arguments to delete one Rs_mgr.
     * @example
     * // Delete one Rs_mgr
     * const Rs_mgr = await prisma.rs_mgr.delete({
     *   where: {
     *     // ... filter to delete one Rs_mgr
     *   }
     * })
     * 
    **/
    delete<T extends rs_mgrDeleteArgs>(
      args: Subset<T, rs_mgrDeleteArgs>
    ): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr>, Prisma__rs_mgrClient<rs_mgrGetPayload<T>>>
    /**
     * Update one Rs_mgr.
     * @param {rs_mgrUpdateArgs} args - Arguments to update one Rs_mgr.
     * @example
     * // Update one Rs_mgr
     * const rs_mgr = await prisma.rs_mgr.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_mgrUpdateArgs>(
      args: Subset<T, rs_mgrUpdateArgs>
    ): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr>, Prisma__rs_mgrClient<rs_mgrGetPayload<T>>>
    /**
     * Delete zero or more Rs_mgrs.
     * @param {rs_mgrDeleteManyArgs} args - Arguments to filter Rs_mgrs to delete.
     * @example
     * // Delete a few Rs_mgrs
     * const { count } = await prisma.rs_mgr.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_mgrDeleteManyArgs>(
      args?: Subset<T, rs_mgrDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_mgrs.
     * @param {rs_mgrUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_mgrs
     * const rs_mgr = await prisma.rs_mgr.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_mgrUpdateManyArgs>(
      args: Subset<T, rs_mgrUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_mgr.
     * @param {rs_mgrUpsertArgs} args - Arguments to update or create a Rs_mgr.
     * @example
     * // Update or create a Rs_mgr
     * const rs_mgr = await prisma.rs_mgr.upsert({
     *   create: {
     *     // ... data to create a Rs_mgr
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_mgr we want to update
     *   }
     * })
    **/
    upsert<T extends rs_mgrUpsertArgs>(
      args: Subset<T, rs_mgrUpsertArgs>
    ): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr>, Prisma__rs_mgrClient<rs_mgrGetPayload<T>>>
    /**
     * Find zero or one Rs_mgr that matches the filter.
     * @param {FindUniquers_mgrArgs} args - Arguments to find a Rs_mgr
     * @deprecated This will be deprecated please use prisma.rs_mgr.findUnique
     * @example
     * // Get one Rs_mgr
     * const rs_mgr = await prisma.rs_mgr.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_mgrArgs>(
      args: Subset<T, FindUniquers_mgrArgs>
    ): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr | null>, Prisma__rs_mgrClient<rs_mgrGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_mgrArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_mgrArgs>(args: Subset<T, AggregateRs_mgrArgs>): Promise<GetRs_mgrAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_mgr.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_mgrClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_mgr_mem<T extends FindManyrs_mgr_memArgs = {}>(args?: Subset<T, FindManyrs_mgr_memArgs>): CheckSelect<T, Promise<Array<rs_mgr_mem>>, Promise<Array<rs_mgr_memGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_mgr findUnique
   */
  export type FindUniquers_mgrArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
    /**
     * Filter, which rs_mgr to fetch.
    **/
    where: rs_mgrWhereUniqueInput
  }


  /**
   * rs_mgr findFirst
   */
  export type FindFirstrs_mgrArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
    /**
     * Filter, which rs_mgr to fetch.
    **/
    where?: rs_mgrWhereInput
    orderBy?: Enumerable<rs_mgrOrderByInput>
    cursor?: rs_mgrWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_mgrScalarFieldEnum>
  }


  /**
   * rs_mgr findMany
   */
  export type FindManyrs_mgrArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
    /**
     * Filter, which rs_mgrs to fetch.
    **/
    where?: rs_mgrWhereInput
    /**
     * Determine the order of the rs_mgrs to fetch.
    **/
    orderBy?: Enumerable<rs_mgrOrderByInput>
    /**
     * Sets the position for listing rs_mgrs.
    **/
    cursor?: rs_mgrWhereUniqueInput
    /**
     * The number of rs_mgrs to fetch. If negative number, it will take rs_mgrs before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_mgrs.
    **/
    skip?: number
    distinct?: Enumerable<Rs_mgrScalarFieldEnum>
  }


  /**
   * rs_mgr create
   */
  export type rs_mgrCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
    /**
     * The data needed to create a rs_mgr.
    **/
    data: rs_mgrCreateInput
  }


  /**
   * rs_mgr update
   */
  export type rs_mgrUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
    /**
     * The data needed to update a rs_mgr.
    **/
    data: rs_mgrUpdateInput
    /**
     * Choose, which rs_mgr to update.
    **/
    where: rs_mgrWhereUniqueInput
  }


  /**
   * rs_mgr updateMany
   */
  export type rs_mgrUpdateManyArgs = {
    data: rs_mgrUpdateManyMutationInput
    where?: rs_mgrWhereInput
  }


  /**
   * rs_mgr upsert
   */
  export type rs_mgrUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
    /**
     * The filter to search for the rs_mgr to update in case it exists.
    **/
    where: rs_mgrWhereUniqueInput
    /**
     * In case the rs_mgr found by the `where` argument doesn't exist, create a new rs_mgr with this data.
    **/
    create: rs_mgrCreateInput
    /**
     * In case the rs_mgr was found with the provided `where` argument, update it with this data.
    **/
    update: rs_mgrUpdateInput
  }


  /**
   * rs_mgr delete
   */
  export type rs_mgrDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
    /**
     * Filter which rs_mgr to delete.
    **/
    where: rs_mgrWhereUniqueInput
  }


  /**
   * rs_mgr deleteMany
   */
  export type rs_mgrDeleteManyArgs = {
    where?: rs_mgrWhereInput
  }


  /**
   * rs_mgr without action
   */
  export type rs_mgrArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr
    **/
    select?: rs_mgrSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgrInclude | null
  }



  /**
   * Model rs_mgr_mem
   */


  export type AggregateRs_mgr_mem = {
    count: number | null
    avg: Rs_mgr_memAvgAggregateOutputType | null
    sum: Rs_mgr_memSumAggregateOutputType | null
    min: Rs_mgr_memMinAggregateOutputType | null
    max: Rs_mgr_memMaxAggregateOutputType | null
  }

  export type Rs_mgr_memAvgAggregateOutputType = {
    mgm_mgr_idx: number
    mgm_mem_idx: number
    mgm_timestemp: number
  }

  export type Rs_mgr_memSumAggregateOutputType = {
    mgm_mgr_idx: number
    mgm_mem_idx: number
    mgm_timestemp: number
  }

  export type Rs_mgr_memMinAggregateOutputType = {
    mgm_mgr_idx: number
    mgm_mem_idx: number
    mgm_datetime: string | null
    mgm_timestemp: number
  }

  export type Rs_mgr_memMaxAggregateOutputType = {
    mgm_mgr_idx: number
    mgm_mem_idx: number
    mgm_datetime: string | null
    mgm_timestemp: number
  }

  export type Rs_mgr_memCountAggregateOutputType = {
    mgm_mgr_idx: number
    mgm_mem_idx: number
    mgm_datetime: number | null
    mgm_timestemp: number
    _all: number
  }


  export type Rs_mgr_memAvgAggregateInputType = {
    mgm_mgr_idx?: true
    mgm_mem_idx?: true
    mgm_timestemp?: true
  }

  export type Rs_mgr_memSumAggregateInputType = {
    mgm_mgr_idx?: true
    mgm_mem_idx?: true
    mgm_timestemp?: true
  }

  export type Rs_mgr_memMinAggregateInputType = {
    mgm_mgr_idx?: true
    mgm_mem_idx?: true
    mgm_datetime?: true
    mgm_timestemp?: true
  }

  export type Rs_mgr_memMaxAggregateInputType = {
    mgm_mgr_idx?: true
    mgm_mem_idx?: true
    mgm_datetime?: true
    mgm_timestemp?: true
  }

  export type Rs_mgr_memCountAggregateInputType = {
    mgm_mgr_idx?: true
    mgm_mem_idx?: true
    mgm_datetime?: true
    mgm_timestemp?: true
    _all?: true
  }

  export type AggregateRs_mgr_memArgs = {
    where?: rs_mgr_memWhereInput
    orderBy?: Enumerable<rs_mgr_memOrderByInput>
    cursor?: rs_mgr_memWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_mgr_memAvgAggregateInputType
    sum?: Rs_mgr_memSumAggregateInputType
    min?: Rs_mgr_memMinAggregateInputType
    max?: Rs_mgr_memMaxAggregateInputType
  }

  export type GetRs_mgr_memAggregateType<T extends AggregateRs_mgr_memArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_mgr_memAggregateScalarType<T[P]>
  }

  export type GetRs_mgr_memAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_mgr_memAvgAggregateOutputType ? Rs_mgr_memAvgAggregateOutputType[P] : never
  }

    



  export type rs_mgr_memSelect = {
    mgm_mgr_idx?: boolean
    mgm_mem_idx?: boolean
    mgm_datetime?: boolean
    mgm_timestemp?: boolean
    rs_member?: boolean | rs_memberArgs
    rs_mgr?: boolean | rs_mgrArgs
  }

  export type rs_mgr_memInclude = {
    rs_member?: boolean | rs_memberArgs
    rs_mgr?: boolean | rs_mgrArgs
  }

  export type rs_mgr_memGetPayload<
    S extends boolean | null | undefined | rs_mgr_memArgs,
    U = keyof S
      > = S extends true
        ? rs_mgr_mem
    : S extends undefined
    ? never
    : S extends rs_mgr_memArgs | FindManyrs_mgr_memArgs
    ?'include' extends U
    ? rs_mgr_mem  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_member'
        ? rs_memberGetPayload<S['include'][P]> :
        P extends 'rs_mgr'
        ? rs_mgrGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_mgr_mem ?rs_mgr_mem [P]
  : 
          P extends 'rs_member'
        ? rs_memberGetPayload<S['select'][P]> :
        P extends 'rs_mgr'
        ? rs_mgrGetPayload<S['select'][P]> : never
  } 
    : rs_mgr_mem
  : rs_mgr_mem


  export interface rs_mgr_memDelegate {
    /**
     * Find zero or one Rs_mgr_mem that matches the filter.
     * @param {FindUniquers_mgr_memArgs} args - Arguments to find a Rs_mgr_mem
     * @example
     * // Get one Rs_mgr_mem
     * const rs_mgr_mem = await prisma.rs_mgr_mem.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_mgr_memArgs>(
      args: Subset<T, FindUniquers_mgr_memArgs>
    ): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem | null>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T> | null>>
    /**
     * Find the first Rs_mgr_mem that matches the filter.
     * @param {FindFirstrs_mgr_memArgs} args - Arguments to find a Rs_mgr_mem
     * @example
     * // Get one Rs_mgr_mem
     * const rs_mgr_mem = await prisma.rs_mgr_mem.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_mgr_memArgs>(
      args?: Subset<T, FindFirstrs_mgr_memArgs>
    ): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem | null>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T> | null>>
    /**
     * Find zero or more Rs_mgr_mems that matches the filter.
     * @param {FindManyrs_mgr_memArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_mgr_mems
     * const rs_mgr_mems = await prisma.rs_mgr_mem.findMany()
     * 
     * // Get first 10 Rs_mgr_mems
     * const rs_mgr_mems = await prisma.rs_mgr_mem.findMany({ take: 10 })
     * 
     * // Only select the `mgm_mgr_idx`
     * const rs_mgr_memWithMgm_mgr_idxOnly = await prisma.rs_mgr_mem.findMany({ select: { mgm_mgr_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_mgr_memArgs>(
      args?: Subset<T, FindManyrs_mgr_memArgs>
    ): CheckSelect<T, Promise<Array<rs_mgr_mem>>, Promise<Array<rs_mgr_memGetPayload<T>>>>
    /**
     * Create a Rs_mgr_mem.
     * @param {rs_mgr_memCreateArgs} args - Arguments to create a Rs_mgr_mem.
     * @example
     * // Create one Rs_mgr_mem
     * const Rs_mgr_mem = await prisma.rs_mgr_mem.create({
     *   data: {
     *     // ... data to create a Rs_mgr_mem
     *   }
     * })
     * 
    **/
    create<T extends rs_mgr_memCreateArgs>(
      args: Subset<T, rs_mgr_memCreateArgs>
    ): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T>>>
    /**
     * Delete a Rs_mgr_mem.
     * @param {rs_mgr_memDeleteArgs} args - Arguments to delete one Rs_mgr_mem.
     * @example
     * // Delete one Rs_mgr_mem
     * const Rs_mgr_mem = await prisma.rs_mgr_mem.delete({
     *   where: {
     *     // ... filter to delete one Rs_mgr_mem
     *   }
     * })
     * 
    **/
    delete<T extends rs_mgr_memDeleteArgs>(
      args: Subset<T, rs_mgr_memDeleteArgs>
    ): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T>>>
    /**
     * Update one Rs_mgr_mem.
     * @param {rs_mgr_memUpdateArgs} args - Arguments to update one Rs_mgr_mem.
     * @example
     * // Update one Rs_mgr_mem
     * const rs_mgr_mem = await prisma.rs_mgr_mem.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_mgr_memUpdateArgs>(
      args: Subset<T, rs_mgr_memUpdateArgs>
    ): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T>>>
    /**
     * Delete zero or more Rs_mgr_mems.
     * @param {rs_mgr_memDeleteManyArgs} args - Arguments to filter Rs_mgr_mems to delete.
     * @example
     * // Delete a few Rs_mgr_mems
     * const { count } = await prisma.rs_mgr_mem.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_mgr_memDeleteManyArgs>(
      args?: Subset<T, rs_mgr_memDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_mgr_mems.
     * @param {rs_mgr_memUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_mgr_mems
     * const rs_mgr_mem = await prisma.rs_mgr_mem.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_mgr_memUpdateManyArgs>(
      args: Subset<T, rs_mgr_memUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_mgr_mem.
     * @param {rs_mgr_memUpsertArgs} args - Arguments to update or create a Rs_mgr_mem.
     * @example
     * // Update or create a Rs_mgr_mem
     * const rs_mgr_mem = await prisma.rs_mgr_mem.upsert({
     *   create: {
     *     // ... data to create a Rs_mgr_mem
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_mgr_mem we want to update
     *   }
     * })
    **/
    upsert<T extends rs_mgr_memUpsertArgs>(
      args: Subset<T, rs_mgr_memUpsertArgs>
    ): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T>>>
    /**
     * Find zero or one Rs_mgr_mem that matches the filter.
     * @param {FindUniquers_mgr_memArgs} args - Arguments to find a Rs_mgr_mem
     * @deprecated This will be deprecated please use prisma.rs_mgr_mem.findUnique
     * @example
     * // Get one Rs_mgr_mem
     * const rs_mgr_mem = await prisma.rs_mgr_mem.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_mgr_memArgs>(
      args: Subset<T, FindUniquers_mgr_memArgs>
    ): CheckSelect<T, Prisma__rs_mgr_memClient<rs_mgr_mem | null>, Prisma__rs_mgr_memClient<rs_mgr_memGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_mgr_memArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_mgr_memArgs>(args: Subset<T, AggregateRs_mgr_memArgs>): Promise<GetRs_mgr_memAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_mgr_mem.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_mgr_memClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_member<T extends rs_memberArgs = {}>(args?: Subset<T, rs_memberArgs>): CheckSelect<T, Prisma__rs_memberClient<rs_member | null>, Prisma__rs_memberClient<rs_memberGetPayload<T> | null>>;

    rs_mgr<T extends rs_mgrArgs = {}>(args?: Subset<T, rs_mgrArgs>): CheckSelect<T, Prisma__rs_mgrClient<rs_mgr | null>, Prisma__rs_mgrClient<rs_mgrGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_mgr_mem findUnique
   */
  export type FindUniquers_mgr_memArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
    /**
     * Filter, which rs_mgr_mem to fetch.
    **/
    where: rs_mgr_memWhereUniqueInput
  }


  /**
   * rs_mgr_mem findFirst
   */
  export type FindFirstrs_mgr_memArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
    /**
     * Filter, which rs_mgr_mem to fetch.
    **/
    where?: rs_mgr_memWhereInput
    orderBy?: Enumerable<rs_mgr_memOrderByInput>
    cursor?: rs_mgr_memWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_mgr_memScalarFieldEnum>
  }


  /**
   * rs_mgr_mem findMany
   */
  export type FindManyrs_mgr_memArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
    /**
     * Filter, which rs_mgr_mems to fetch.
    **/
    where?: rs_mgr_memWhereInput
    /**
     * Determine the order of the rs_mgr_mems to fetch.
    **/
    orderBy?: Enumerable<rs_mgr_memOrderByInput>
    /**
     * Sets the position for listing rs_mgr_mems.
    **/
    cursor?: rs_mgr_memWhereUniqueInput
    /**
     * The number of rs_mgr_mems to fetch. If negative number, it will take rs_mgr_mems before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_mgr_mems.
    **/
    skip?: number
    distinct?: Enumerable<Rs_mgr_memScalarFieldEnum>
  }


  /**
   * rs_mgr_mem create
   */
  export type rs_mgr_memCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
    /**
     * The data needed to create a rs_mgr_mem.
    **/
    data: rs_mgr_memCreateInput
  }


  /**
   * rs_mgr_mem update
   */
  export type rs_mgr_memUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
    /**
     * The data needed to update a rs_mgr_mem.
    **/
    data: rs_mgr_memUpdateInput
    /**
     * Choose, which rs_mgr_mem to update.
    **/
    where: rs_mgr_memWhereUniqueInput
  }


  /**
   * rs_mgr_mem updateMany
   */
  export type rs_mgr_memUpdateManyArgs = {
    data: rs_mgr_memUpdateManyMutationInput
    where?: rs_mgr_memWhereInput
  }


  /**
   * rs_mgr_mem upsert
   */
  export type rs_mgr_memUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
    /**
     * The filter to search for the rs_mgr_mem to update in case it exists.
    **/
    where: rs_mgr_memWhereUniqueInput
    /**
     * In case the rs_mgr_mem found by the `where` argument doesn't exist, create a new rs_mgr_mem with this data.
    **/
    create: rs_mgr_memCreateInput
    /**
     * In case the rs_mgr_mem was found with the provided `where` argument, update it with this data.
    **/
    update: rs_mgr_memUpdateInput
  }


  /**
   * rs_mgr_mem delete
   */
  export type rs_mgr_memDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
    /**
     * Filter which rs_mgr_mem to delete.
    **/
    where: rs_mgr_memWhereUniqueInput
  }


  /**
   * rs_mgr_mem deleteMany
   */
  export type rs_mgr_memDeleteManyArgs = {
    where?: rs_mgr_memWhereInput
  }


  /**
   * rs_mgr_mem without action
   */
  export type rs_mgr_memArgs = {
    /**
     * Select specific fields to fetch from the rs_mgr_mem
    **/
    select?: rs_mgr_memSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_mgr_memInclude | null
  }



  /**
   * Model rs_point_log
   */


  export type AggregateRs_point_log = {
    count: number | null
    avg: Rs_point_logAvgAggregateOutputType | null
    sum: Rs_point_logSumAggregateOutputType | null
    min: Rs_point_logMinAggregateOutputType | null
    max: Rs_point_logMaxAggregateOutputType | null
  }

  export type Rs_point_logAvgAggregateOutputType = {
    poi_mem_idx: number
    poi_mem_id: number
    poi_timestemp: number
  }

  export type Rs_point_logSumAggregateOutputType = {
    poi_mem_idx: number
    poi_mem_id: number
    poi_timestemp: number
  }

  export type Rs_point_logMinAggregateOutputType = {
    poi_mem_idx: number
    poi_mem_id: number
    poi_inc_poi: string | null
    poi_type: string | null
    poi_datetime: string | null
    poi_timestemp: number
  }

  export type Rs_point_logMaxAggregateOutputType = {
    poi_mem_idx: number
    poi_mem_id: number
    poi_inc_poi: string | null
    poi_type: string | null
    poi_datetime: string | null
    poi_timestemp: number
  }

  export type Rs_point_logCountAggregateOutputType = {
    poi_mem_idx: number
    poi_mem_id: number
    poi_inc_poi: number | null
    poi_type: number | null
    poi_datetime: number | null
    poi_timestemp: number
    _all: number
  }


  export type Rs_point_logAvgAggregateInputType = {
    poi_mem_idx?: true
    poi_mem_id?: true
    poi_timestemp?: true
  }

  export type Rs_point_logSumAggregateInputType = {
    poi_mem_idx?: true
    poi_mem_id?: true
    poi_timestemp?: true
  }

  export type Rs_point_logMinAggregateInputType = {
    poi_mem_idx?: true
    poi_mem_id?: true
    poi_inc_poi?: true
    poi_type?: true
    poi_datetime?: true
    poi_timestemp?: true
  }

  export type Rs_point_logMaxAggregateInputType = {
    poi_mem_idx?: true
    poi_mem_id?: true
    poi_inc_poi?: true
    poi_type?: true
    poi_datetime?: true
    poi_timestemp?: true
  }

  export type Rs_point_logCountAggregateInputType = {
    poi_mem_idx?: true
    poi_mem_id?: true
    poi_inc_poi?: true
    poi_type?: true
    poi_datetime?: true
    poi_timestemp?: true
    _all?: true
  }

  export type AggregateRs_point_logArgs = {
    where?: rs_point_logWhereInput
    orderBy?: Enumerable<rs_point_logOrderByInput>
    cursor?: rs_point_logWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_point_logAvgAggregateInputType
    sum?: Rs_point_logSumAggregateInputType
    min?: Rs_point_logMinAggregateInputType
    max?: Rs_point_logMaxAggregateInputType
  }

  export type GetRs_point_logAggregateType<T extends AggregateRs_point_logArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_point_logAggregateScalarType<T[P]>
  }

  export type GetRs_point_logAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_point_logAvgAggregateOutputType ? Rs_point_logAvgAggregateOutputType[P] : never
  }

    



  export type rs_point_logSelect = {
    poi_mem_idx?: boolean
    poi_mem_id?: boolean
    poi_inc_poi?: boolean
    poi_type?: boolean
    poi_datetime?: boolean
    poi_timestemp?: boolean
  }

  export type rs_point_logGetPayload<
    S extends boolean | null | undefined | rs_point_logArgs,
    U = keyof S
      > = S extends true
        ? rs_point_log
    : S extends undefined
    ? never
    : S extends rs_point_logArgs | FindManyrs_point_logArgs
    ?'include' extends U
    ? rs_point_log 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_point_log ?rs_point_log [P]
  : 
     never
  } 
    : rs_point_log
  : rs_point_log


  export interface rs_point_logDelegate {
    /**
     * Find zero or one Rs_point_log that matches the filter.
     * @param {FindUniquers_point_logArgs} args - Arguments to find a Rs_point_log
     * @example
     * // Get one Rs_point_log
     * const rs_point_log = await prisma.rs_point_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_point_logArgs>(
      args: Subset<T, FindUniquers_point_logArgs>
    ): CheckSelect<T, Prisma__rs_point_logClient<rs_point_log | null>, Prisma__rs_point_logClient<rs_point_logGetPayload<T> | null>>
    /**
     * Find the first Rs_point_log that matches the filter.
     * @param {FindFirstrs_point_logArgs} args - Arguments to find a Rs_point_log
     * @example
     * // Get one Rs_point_log
     * const rs_point_log = await prisma.rs_point_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_point_logArgs>(
      args?: Subset<T, FindFirstrs_point_logArgs>
    ): CheckSelect<T, Prisma__rs_point_logClient<rs_point_log | null>, Prisma__rs_point_logClient<rs_point_logGetPayload<T> | null>>
    /**
     * Find zero or more Rs_point_logs that matches the filter.
     * @param {FindManyrs_point_logArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_point_logs
     * const rs_point_logs = await prisma.rs_point_log.findMany()
     * 
     * // Get first 10 Rs_point_logs
     * const rs_point_logs = await prisma.rs_point_log.findMany({ take: 10 })
     * 
     * // Only select the `poi_mem_idx`
     * const rs_point_logWithPoi_mem_idxOnly = await prisma.rs_point_log.findMany({ select: { poi_mem_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_point_logArgs>(
      args?: Subset<T, FindManyrs_point_logArgs>
    ): CheckSelect<T, Promise<Array<rs_point_log>>, Promise<Array<rs_point_logGetPayload<T>>>>
    /**
     * Create a Rs_point_log.
     * @param {rs_point_logCreateArgs} args - Arguments to create a Rs_point_log.
     * @example
     * // Create one Rs_point_log
     * const Rs_point_log = await prisma.rs_point_log.create({
     *   data: {
     *     // ... data to create a Rs_point_log
     *   }
     * })
     * 
    **/
    create<T extends rs_point_logCreateArgs>(
      args: Subset<T, rs_point_logCreateArgs>
    ): CheckSelect<T, Prisma__rs_point_logClient<rs_point_log>, Prisma__rs_point_logClient<rs_point_logGetPayload<T>>>
    /**
     * Delete a Rs_point_log.
     * @param {rs_point_logDeleteArgs} args - Arguments to delete one Rs_point_log.
     * @example
     * // Delete one Rs_point_log
     * const Rs_point_log = await prisma.rs_point_log.delete({
     *   where: {
     *     // ... filter to delete one Rs_point_log
     *   }
     * })
     * 
    **/
    delete<T extends rs_point_logDeleteArgs>(
      args: Subset<T, rs_point_logDeleteArgs>
    ): CheckSelect<T, Prisma__rs_point_logClient<rs_point_log>, Prisma__rs_point_logClient<rs_point_logGetPayload<T>>>
    /**
     * Update one Rs_point_log.
     * @param {rs_point_logUpdateArgs} args - Arguments to update one Rs_point_log.
     * @example
     * // Update one Rs_point_log
     * const rs_point_log = await prisma.rs_point_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_point_logUpdateArgs>(
      args: Subset<T, rs_point_logUpdateArgs>
    ): CheckSelect<T, Prisma__rs_point_logClient<rs_point_log>, Prisma__rs_point_logClient<rs_point_logGetPayload<T>>>
    /**
     * Delete zero or more Rs_point_logs.
     * @param {rs_point_logDeleteManyArgs} args - Arguments to filter Rs_point_logs to delete.
     * @example
     * // Delete a few Rs_point_logs
     * const { count } = await prisma.rs_point_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_point_logDeleteManyArgs>(
      args?: Subset<T, rs_point_logDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_point_logs.
     * @param {rs_point_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_point_logs
     * const rs_point_log = await prisma.rs_point_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_point_logUpdateManyArgs>(
      args: Subset<T, rs_point_logUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_point_log.
     * @param {rs_point_logUpsertArgs} args - Arguments to update or create a Rs_point_log.
     * @example
     * // Update or create a Rs_point_log
     * const rs_point_log = await prisma.rs_point_log.upsert({
     *   create: {
     *     // ... data to create a Rs_point_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_point_log we want to update
     *   }
     * })
    **/
    upsert<T extends rs_point_logUpsertArgs>(
      args: Subset<T, rs_point_logUpsertArgs>
    ): CheckSelect<T, Prisma__rs_point_logClient<rs_point_log>, Prisma__rs_point_logClient<rs_point_logGetPayload<T>>>
    /**
     * Find zero or one Rs_point_log that matches the filter.
     * @param {FindUniquers_point_logArgs} args - Arguments to find a Rs_point_log
     * @deprecated This will be deprecated please use prisma.rs_point_log.findUnique
     * @example
     * // Get one Rs_point_log
     * const rs_point_log = await prisma.rs_point_log.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_point_logArgs>(
      args: Subset<T, FindUniquers_point_logArgs>
    ): CheckSelect<T, Prisma__rs_point_logClient<rs_point_log | null>, Prisma__rs_point_logClient<rs_point_logGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_point_logArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_point_logArgs>(args: Subset<T, AggregateRs_point_logArgs>): Promise<GetRs_point_logAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_point_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_point_logClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_point_log findUnique
   */
  export type FindUniquers_point_logArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
    /**
     * Filter, which rs_point_log to fetch.
    **/
    where: rs_point_logWhereUniqueInput
  }


  /**
   * rs_point_log findFirst
   */
  export type FindFirstrs_point_logArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
    /**
     * Filter, which rs_point_log to fetch.
    **/
    where?: rs_point_logWhereInput
    orderBy?: Enumerable<rs_point_logOrderByInput>
    cursor?: rs_point_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_point_logScalarFieldEnum>
  }


  /**
   * rs_point_log findMany
   */
  export type FindManyrs_point_logArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
    /**
     * Filter, which rs_point_logs to fetch.
    **/
    where?: rs_point_logWhereInput
    /**
     * Determine the order of the rs_point_logs to fetch.
    **/
    orderBy?: Enumerable<rs_point_logOrderByInput>
    /**
     * Sets the position for listing rs_point_logs.
    **/
    cursor?: rs_point_logWhereUniqueInput
    /**
     * The number of rs_point_logs to fetch. If negative number, it will take rs_point_logs before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_point_logs.
    **/
    skip?: number
    distinct?: Enumerable<Rs_point_logScalarFieldEnum>
  }


  /**
   * rs_point_log create
   */
  export type rs_point_logCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
    /**
     * The data needed to create a rs_point_log.
    **/
    data: rs_point_logCreateInput
  }


  /**
   * rs_point_log update
   */
  export type rs_point_logUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
    /**
     * The data needed to update a rs_point_log.
    **/
    data: rs_point_logUpdateInput
    /**
     * Choose, which rs_point_log to update.
    **/
    where: rs_point_logWhereUniqueInput
  }


  /**
   * rs_point_log updateMany
   */
  export type rs_point_logUpdateManyArgs = {
    data: rs_point_logUpdateManyMutationInput
    where?: rs_point_logWhereInput
  }


  /**
   * rs_point_log upsert
   */
  export type rs_point_logUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
    /**
     * The filter to search for the rs_point_log to update in case it exists.
    **/
    where: rs_point_logWhereUniqueInput
    /**
     * In case the rs_point_log found by the `where` argument doesn't exist, create a new rs_point_log with this data.
    **/
    create: rs_point_logCreateInput
    /**
     * In case the rs_point_log was found with the provided `where` argument, update it with this data.
    **/
    update: rs_point_logUpdateInput
  }


  /**
   * rs_point_log delete
   */
  export type rs_point_logDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
    /**
     * Filter which rs_point_log to delete.
    **/
    where: rs_point_logWhereUniqueInput
  }


  /**
   * rs_point_log deleteMany
   */
  export type rs_point_logDeleteManyArgs = {
    where?: rs_point_logWhereInput
  }


  /**
   * rs_point_log without action
   */
  export type rs_point_logArgs = {
    /**
     * Select specific fields to fetch from the rs_point_log
    **/
    select?: rs_point_logSelect | null
  }



  /**
   * Model rs_point
   */


  export type AggregateRs_point = {
    count: number | null
    avg: Rs_pointAvgAggregateOutputType | null
    sum: Rs_pointSumAggregateOutputType | null
    min: Rs_pointMinAggregateOutputType | null
    max: Rs_pointMaxAggregateOutputType | null
  }

  export type Rs_pointAvgAggregateOutputType = {
    idx: number
    poi_mem_id: number
    poi_point: number
    poi_timestemp: number
  }

  export type Rs_pointSumAggregateOutputType = {
    idx: number
    poi_mem_id: number
    poi_point: number
    poi_timestemp: number
  }

  export type Rs_pointMinAggregateOutputType = {
    idx: number
    poi_mem_id: number
    poi_point: number
    poi_datetime: string | null
    poi_timestemp: number
  }

  export type Rs_pointMaxAggregateOutputType = {
    idx: number
    poi_mem_id: number
    poi_point: number
    poi_datetime: string | null
    poi_timestemp: number
  }

  export type Rs_pointCountAggregateOutputType = {
    idx: number
    poi_mem_id: number
    poi_point: number
    poi_datetime: number | null
    poi_timestemp: number
    _all: number
  }


  export type Rs_pointAvgAggregateInputType = {
    idx?: true
    poi_mem_id?: true
    poi_point?: true
    poi_timestemp?: true
  }

  export type Rs_pointSumAggregateInputType = {
    idx?: true
    poi_mem_id?: true
    poi_point?: true
    poi_timestemp?: true
  }

  export type Rs_pointMinAggregateInputType = {
    idx?: true
    poi_mem_id?: true
    poi_point?: true
    poi_datetime?: true
    poi_timestemp?: true
  }

  export type Rs_pointMaxAggregateInputType = {
    idx?: true
    poi_mem_id?: true
    poi_point?: true
    poi_datetime?: true
    poi_timestemp?: true
  }

  export type Rs_pointCountAggregateInputType = {
    idx?: true
    poi_mem_id?: true
    poi_point?: true
    poi_datetime?: true
    poi_timestemp?: true
    _all?: true
  }

  export type AggregateRs_pointArgs = {
    where?: rs_pointWhereInput
    orderBy?: Enumerable<rs_pointOrderByInput>
    cursor?: rs_pointWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_pointAvgAggregateInputType
    sum?: Rs_pointSumAggregateInputType
    min?: Rs_pointMinAggregateInputType
    max?: Rs_pointMaxAggregateInputType
  }

  export type GetRs_pointAggregateType<T extends AggregateRs_pointArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_pointAggregateScalarType<T[P]>
  }

  export type GetRs_pointAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_pointAvgAggregateOutputType ? Rs_pointAvgAggregateOutputType[P] : never
  }

    



  export type rs_pointSelect = {
    idx?: boolean
    poi_mem_id?: boolean
    poi_point?: boolean
    poi_datetime?: boolean
    poi_timestemp?: boolean
    rs_member?: boolean | rs_memberArgs
  }

  export type rs_pointInclude = {
    rs_member?: boolean | rs_memberArgs
  }

  export type rs_pointGetPayload<
    S extends boolean | null | undefined | rs_pointArgs,
    U = keyof S
      > = S extends true
        ? rs_point
    : S extends undefined
    ? never
    : S extends rs_pointArgs | FindManyrs_pointArgs
    ?'include' extends U
    ? rs_point  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_member'
        ? rs_memberGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_point ?rs_point [P]
  : 
          P extends 'rs_member'
        ? rs_memberGetPayload<S['select'][P]> : never
  } 
    : rs_point
  : rs_point


  export interface rs_pointDelegate {
    /**
     * Find zero or one Rs_point that matches the filter.
     * @param {FindUniquers_pointArgs} args - Arguments to find a Rs_point
     * @example
     * // Get one Rs_point
     * const rs_point = await prisma.rs_point.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_pointArgs>(
      args: Subset<T, FindUniquers_pointArgs>
    ): CheckSelect<T, Prisma__rs_pointClient<rs_point | null>, Prisma__rs_pointClient<rs_pointGetPayload<T> | null>>
    /**
     * Find the first Rs_point that matches the filter.
     * @param {FindFirstrs_pointArgs} args - Arguments to find a Rs_point
     * @example
     * // Get one Rs_point
     * const rs_point = await prisma.rs_point.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_pointArgs>(
      args?: Subset<T, FindFirstrs_pointArgs>
    ): CheckSelect<T, Prisma__rs_pointClient<rs_point | null>, Prisma__rs_pointClient<rs_pointGetPayload<T> | null>>
    /**
     * Find zero or more Rs_points that matches the filter.
     * @param {FindManyrs_pointArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_points
     * const rs_points = await prisma.rs_point.findMany()
     * 
     * // Get first 10 Rs_points
     * const rs_points = await prisma.rs_point.findMany({ take: 10 })
     * 
     * // Only select the `idx`
     * const rs_pointWithIdxOnly = await prisma.rs_point.findMany({ select: { idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_pointArgs>(
      args?: Subset<T, FindManyrs_pointArgs>
    ): CheckSelect<T, Promise<Array<rs_point>>, Promise<Array<rs_pointGetPayload<T>>>>
    /**
     * Create a Rs_point.
     * @param {rs_pointCreateArgs} args - Arguments to create a Rs_point.
     * @example
     * // Create one Rs_point
     * const Rs_point = await prisma.rs_point.create({
     *   data: {
     *     // ... data to create a Rs_point
     *   }
     * })
     * 
    **/
    create<T extends rs_pointCreateArgs>(
      args: Subset<T, rs_pointCreateArgs>
    ): CheckSelect<T, Prisma__rs_pointClient<rs_point>, Prisma__rs_pointClient<rs_pointGetPayload<T>>>
    /**
     * Delete a Rs_point.
     * @param {rs_pointDeleteArgs} args - Arguments to delete one Rs_point.
     * @example
     * // Delete one Rs_point
     * const Rs_point = await prisma.rs_point.delete({
     *   where: {
     *     // ... filter to delete one Rs_point
     *   }
     * })
     * 
    **/
    delete<T extends rs_pointDeleteArgs>(
      args: Subset<T, rs_pointDeleteArgs>
    ): CheckSelect<T, Prisma__rs_pointClient<rs_point>, Prisma__rs_pointClient<rs_pointGetPayload<T>>>
    /**
     * Update one Rs_point.
     * @param {rs_pointUpdateArgs} args - Arguments to update one Rs_point.
     * @example
     * // Update one Rs_point
     * const rs_point = await prisma.rs_point.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_pointUpdateArgs>(
      args: Subset<T, rs_pointUpdateArgs>
    ): CheckSelect<T, Prisma__rs_pointClient<rs_point>, Prisma__rs_pointClient<rs_pointGetPayload<T>>>
    /**
     * Delete zero or more Rs_points.
     * @param {rs_pointDeleteManyArgs} args - Arguments to filter Rs_points to delete.
     * @example
     * // Delete a few Rs_points
     * const { count } = await prisma.rs_point.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_pointDeleteManyArgs>(
      args?: Subset<T, rs_pointDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_points.
     * @param {rs_pointUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_points
     * const rs_point = await prisma.rs_point.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_pointUpdateManyArgs>(
      args: Subset<T, rs_pointUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_point.
     * @param {rs_pointUpsertArgs} args - Arguments to update or create a Rs_point.
     * @example
     * // Update or create a Rs_point
     * const rs_point = await prisma.rs_point.upsert({
     *   create: {
     *     // ... data to create a Rs_point
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_point we want to update
     *   }
     * })
    **/
    upsert<T extends rs_pointUpsertArgs>(
      args: Subset<T, rs_pointUpsertArgs>
    ): CheckSelect<T, Prisma__rs_pointClient<rs_point>, Prisma__rs_pointClient<rs_pointGetPayload<T>>>
    /**
     * Find zero or one Rs_point that matches the filter.
     * @param {FindUniquers_pointArgs} args - Arguments to find a Rs_point
     * @deprecated This will be deprecated please use prisma.rs_point.findUnique
     * @example
     * // Get one Rs_point
     * const rs_point = await prisma.rs_point.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_pointArgs>(
      args: Subset<T, FindUniquers_pointArgs>
    ): CheckSelect<T, Prisma__rs_pointClient<rs_point | null>, Prisma__rs_pointClient<rs_pointGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_pointArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_pointArgs>(args: Subset<T, AggregateRs_pointArgs>): Promise<GetRs_pointAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_point.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_pointClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_member<T extends rs_memberArgs = {}>(args?: Subset<T, rs_memberArgs>): CheckSelect<T, Prisma__rs_memberClient<rs_member | null>, Prisma__rs_memberClient<rs_memberGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_point findUnique
   */
  export type FindUniquers_pointArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
    /**
     * Filter, which rs_point to fetch.
    **/
    where: rs_pointWhereUniqueInput
  }


  /**
   * rs_point findFirst
   */
  export type FindFirstrs_pointArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
    /**
     * Filter, which rs_point to fetch.
    **/
    where?: rs_pointWhereInput
    orderBy?: Enumerable<rs_pointOrderByInput>
    cursor?: rs_pointWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_pointScalarFieldEnum>
  }


  /**
   * rs_point findMany
   */
  export type FindManyrs_pointArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
    /**
     * Filter, which rs_points to fetch.
    **/
    where?: rs_pointWhereInput
    /**
     * Determine the order of the rs_points to fetch.
    **/
    orderBy?: Enumerable<rs_pointOrderByInput>
    /**
     * Sets the position for listing rs_points.
    **/
    cursor?: rs_pointWhereUniqueInput
    /**
     * The number of rs_points to fetch. If negative number, it will take rs_points before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_points.
    **/
    skip?: number
    distinct?: Enumerable<Rs_pointScalarFieldEnum>
  }


  /**
   * rs_point create
   */
  export type rs_pointCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
    /**
     * The data needed to create a rs_point.
    **/
    data: rs_pointCreateInput
  }


  /**
   * rs_point update
   */
  export type rs_pointUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
    /**
     * The data needed to update a rs_point.
    **/
    data: rs_pointUpdateInput
    /**
     * Choose, which rs_point to update.
    **/
    where: rs_pointWhereUniqueInput
  }


  /**
   * rs_point updateMany
   */
  export type rs_pointUpdateManyArgs = {
    data: rs_pointUpdateManyMutationInput
    where?: rs_pointWhereInput
  }


  /**
   * rs_point upsert
   */
  export type rs_pointUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
    /**
     * The filter to search for the rs_point to update in case it exists.
    **/
    where: rs_pointWhereUniqueInput
    /**
     * In case the rs_point found by the `where` argument doesn't exist, create a new rs_point with this data.
    **/
    create: rs_pointCreateInput
    /**
     * In case the rs_point was found with the provided `where` argument, update it with this data.
    **/
    update: rs_pointUpdateInput
  }


  /**
   * rs_point delete
   */
  export type rs_pointDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
    /**
     * Filter which rs_point to delete.
    **/
    where: rs_pointWhereUniqueInput
  }


  /**
   * rs_point deleteMany
   */
  export type rs_pointDeleteManyArgs = {
    where?: rs_pointWhereInput
  }


  /**
   * rs_point without action
   */
  export type rs_pointArgs = {
    /**
     * Select specific fields to fetch from the rs_point
    **/
    select?: rs_pointSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_pointInclude | null
  }



  /**
   * Model rs_board_category
   */


  export type AggregateRs_board_category = {
    count: number | null
    avg: Rs_board_categoryAvgAggregateOutputType | null
    sum: Rs_board_categorySumAggregateOutputType | null
    min: Rs_board_categoryMinAggregateOutputType | null
    max: Rs_board_categoryMaxAggregateOutputType | null
  }

  export type Rs_board_categoryAvgAggregateOutputType = {
    cat_idx: number
  }

  export type Rs_board_categorySumAggregateOutputType = {
    cat_idx: number
  }

  export type Rs_board_categoryMinAggregateOutputType = {
    cat_idx: number
    cat_title: string | null
  }

  export type Rs_board_categoryMaxAggregateOutputType = {
    cat_idx: number
    cat_title: string | null
  }

  export type Rs_board_categoryCountAggregateOutputType = {
    cat_idx: number
    cat_title: number | null
    _all: number
  }


  export type Rs_board_categoryAvgAggregateInputType = {
    cat_idx?: true
  }

  export type Rs_board_categorySumAggregateInputType = {
    cat_idx?: true
  }

  export type Rs_board_categoryMinAggregateInputType = {
    cat_idx?: true
    cat_title?: true
  }

  export type Rs_board_categoryMaxAggregateInputType = {
    cat_idx?: true
    cat_title?: true
  }

  export type Rs_board_categoryCountAggregateInputType = {
    cat_idx?: true
    cat_title?: true
    _all?: true
  }

  export type AggregateRs_board_categoryArgs = {
    where?: rs_board_categoryWhereInput
    orderBy?: Enumerable<rs_board_categoryOrderByInput>
    cursor?: rs_board_categoryWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_board_categoryAvgAggregateInputType
    sum?: Rs_board_categorySumAggregateInputType
    min?: Rs_board_categoryMinAggregateInputType
    max?: Rs_board_categoryMaxAggregateInputType
  }

  export type GetRs_board_categoryAggregateType<T extends AggregateRs_board_categoryArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_board_categoryAggregateScalarType<T[P]>
  }

  export type GetRs_board_categoryAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_board_categoryAvgAggregateOutputType ? Rs_board_categoryAvgAggregateOutputType[P] : never
  }

    



  export type rs_board_categorySelect = {
    cat_idx?: boolean
    cat_title?: boolean
  }

  export type rs_board_categoryGetPayload<
    S extends boolean | null | undefined | rs_board_categoryArgs,
    U = keyof S
      > = S extends true
        ? rs_board_category
    : S extends undefined
    ? never
    : S extends rs_board_categoryArgs | FindManyrs_board_categoryArgs
    ?'include' extends U
    ? rs_board_category 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_board_category ?rs_board_category [P]
  : 
     never
  } 
    : rs_board_category
  : rs_board_category


  export interface rs_board_categoryDelegate {
    /**
     * Find zero or one Rs_board_category that matches the filter.
     * @param {FindUniquers_board_categoryArgs} args - Arguments to find a Rs_board_category
     * @example
     * // Get one Rs_board_category
     * const rs_board_category = await prisma.rs_board_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_board_categoryArgs>(
      args: Subset<T, FindUniquers_board_categoryArgs>
    ): CheckSelect<T, Prisma__rs_board_categoryClient<rs_board_category | null>, Prisma__rs_board_categoryClient<rs_board_categoryGetPayload<T> | null>>
    /**
     * Find the first Rs_board_category that matches the filter.
     * @param {FindFirstrs_board_categoryArgs} args - Arguments to find a Rs_board_category
     * @example
     * // Get one Rs_board_category
     * const rs_board_category = await prisma.rs_board_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_board_categoryArgs>(
      args?: Subset<T, FindFirstrs_board_categoryArgs>
    ): CheckSelect<T, Prisma__rs_board_categoryClient<rs_board_category | null>, Prisma__rs_board_categoryClient<rs_board_categoryGetPayload<T> | null>>
    /**
     * Find zero or more Rs_board_categories that matches the filter.
     * @param {FindManyrs_board_categoryArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_board_categories
     * const rs_board_categories = await prisma.rs_board_category.findMany()
     * 
     * // Get first 10 Rs_board_categories
     * const rs_board_categories = await prisma.rs_board_category.findMany({ take: 10 })
     * 
     * // Only select the `cat_idx`
     * const rs_board_categoryWithCat_idxOnly = await prisma.rs_board_category.findMany({ select: { cat_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_board_categoryArgs>(
      args?: Subset<T, FindManyrs_board_categoryArgs>
    ): CheckSelect<T, Promise<Array<rs_board_category>>, Promise<Array<rs_board_categoryGetPayload<T>>>>
    /**
     * Create a Rs_board_category.
     * @param {rs_board_categoryCreateArgs} args - Arguments to create a Rs_board_category.
     * @example
     * // Create one Rs_board_category
     * const Rs_board_category = await prisma.rs_board_category.create({
     *   data: {
     *     // ... data to create a Rs_board_category
     *   }
     * })
     * 
    **/
    create<T extends rs_board_categoryCreateArgs>(
      args: Subset<T, rs_board_categoryCreateArgs>
    ): CheckSelect<T, Prisma__rs_board_categoryClient<rs_board_category>, Prisma__rs_board_categoryClient<rs_board_categoryGetPayload<T>>>
    /**
     * Delete a Rs_board_category.
     * @param {rs_board_categoryDeleteArgs} args - Arguments to delete one Rs_board_category.
     * @example
     * // Delete one Rs_board_category
     * const Rs_board_category = await prisma.rs_board_category.delete({
     *   where: {
     *     // ... filter to delete one Rs_board_category
     *   }
     * })
     * 
    **/
    delete<T extends rs_board_categoryDeleteArgs>(
      args: Subset<T, rs_board_categoryDeleteArgs>
    ): CheckSelect<T, Prisma__rs_board_categoryClient<rs_board_category>, Prisma__rs_board_categoryClient<rs_board_categoryGetPayload<T>>>
    /**
     * Update one Rs_board_category.
     * @param {rs_board_categoryUpdateArgs} args - Arguments to update one Rs_board_category.
     * @example
     * // Update one Rs_board_category
     * const rs_board_category = await prisma.rs_board_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_board_categoryUpdateArgs>(
      args: Subset<T, rs_board_categoryUpdateArgs>
    ): CheckSelect<T, Prisma__rs_board_categoryClient<rs_board_category>, Prisma__rs_board_categoryClient<rs_board_categoryGetPayload<T>>>
    /**
     * Delete zero or more Rs_board_categories.
     * @param {rs_board_categoryDeleteManyArgs} args - Arguments to filter Rs_board_categories to delete.
     * @example
     * // Delete a few Rs_board_categories
     * const { count } = await prisma.rs_board_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_board_categoryDeleteManyArgs>(
      args?: Subset<T, rs_board_categoryDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_board_categories.
     * @param {rs_board_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_board_categories
     * const rs_board_category = await prisma.rs_board_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_board_categoryUpdateManyArgs>(
      args: Subset<T, rs_board_categoryUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_board_category.
     * @param {rs_board_categoryUpsertArgs} args - Arguments to update or create a Rs_board_category.
     * @example
     * // Update or create a Rs_board_category
     * const rs_board_category = await prisma.rs_board_category.upsert({
     *   create: {
     *     // ... data to create a Rs_board_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_board_category we want to update
     *   }
     * })
    **/
    upsert<T extends rs_board_categoryUpsertArgs>(
      args: Subset<T, rs_board_categoryUpsertArgs>
    ): CheckSelect<T, Prisma__rs_board_categoryClient<rs_board_category>, Prisma__rs_board_categoryClient<rs_board_categoryGetPayload<T>>>
    /**
     * Find zero or one Rs_board_category that matches the filter.
     * @param {FindUniquers_board_categoryArgs} args - Arguments to find a Rs_board_category
     * @deprecated This will be deprecated please use prisma.rs_board_category.findUnique
     * @example
     * // Get one Rs_board_category
     * const rs_board_category = await prisma.rs_board_category.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_board_categoryArgs>(
      args: Subset<T, FindUniquers_board_categoryArgs>
    ): CheckSelect<T, Prisma__rs_board_categoryClient<rs_board_category | null>, Prisma__rs_board_categoryClient<rs_board_categoryGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_board_categoryArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_board_categoryArgs>(args: Subset<T, AggregateRs_board_categoryArgs>): Promise<GetRs_board_categoryAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_board_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_board_categoryClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_board_category findUnique
   */
  export type FindUniquers_board_categoryArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
    /**
     * Filter, which rs_board_category to fetch.
    **/
    where: rs_board_categoryWhereUniqueInput
  }


  /**
   * rs_board_category findFirst
   */
  export type FindFirstrs_board_categoryArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
    /**
     * Filter, which rs_board_category to fetch.
    **/
    where?: rs_board_categoryWhereInput
    orderBy?: Enumerable<rs_board_categoryOrderByInput>
    cursor?: rs_board_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_board_categoryScalarFieldEnum>
  }


  /**
   * rs_board_category findMany
   */
  export type FindManyrs_board_categoryArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
    /**
     * Filter, which rs_board_categories to fetch.
    **/
    where?: rs_board_categoryWhereInput
    /**
     * Determine the order of the rs_board_categories to fetch.
    **/
    orderBy?: Enumerable<rs_board_categoryOrderByInput>
    /**
     * Sets the position for listing rs_board_categories.
    **/
    cursor?: rs_board_categoryWhereUniqueInput
    /**
     * The number of rs_board_categories to fetch. If negative number, it will take rs_board_categories before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_board_categories.
    **/
    skip?: number
    distinct?: Enumerable<Rs_board_categoryScalarFieldEnum>
  }


  /**
   * rs_board_category create
   */
  export type rs_board_categoryCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
    /**
     * The data needed to create a rs_board_category.
    **/
    data: rs_board_categoryCreateInput
  }


  /**
   * rs_board_category update
   */
  export type rs_board_categoryUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
    /**
     * The data needed to update a rs_board_category.
    **/
    data: rs_board_categoryUpdateInput
    /**
     * Choose, which rs_board_category to update.
    **/
    where: rs_board_categoryWhereUniqueInput
  }


  /**
   * rs_board_category updateMany
   */
  export type rs_board_categoryUpdateManyArgs = {
    data: rs_board_categoryUpdateManyMutationInput
    where?: rs_board_categoryWhereInput
  }


  /**
   * rs_board_category upsert
   */
  export type rs_board_categoryUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
    /**
     * The filter to search for the rs_board_category to update in case it exists.
    **/
    where: rs_board_categoryWhereUniqueInput
    /**
     * In case the rs_board_category found by the `where` argument doesn't exist, create a new rs_board_category with this data.
    **/
    create: rs_board_categoryCreateInput
    /**
     * In case the rs_board_category was found with the provided `where` argument, update it with this data.
    **/
    update: rs_board_categoryUpdateInput
  }


  /**
   * rs_board_category delete
   */
  export type rs_board_categoryDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
    /**
     * Filter which rs_board_category to delete.
    **/
    where: rs_board_categoryWhereUniqueInput
  }


  /**
   * rs_board_category deleteMany
   */
  export type rs_board_categoryDeleteManyArgs = {
    where?: rs_board_categoryWhereInput
  }


  /**
   * rs_board_category without action
   */
  export type rs_board_categoryArgs = {
    /**
     * Select specific fields to fetch from the rs_board_category
    **/
    select?: rs_board_categorySelect | null
  }



  /**
   * Model rs_board_comment
   */


  export type AggregateRs_board_comment = {
    count: number | null
    avg: Rs_board_commentAvgAggregateOutputType | null
    sum: Rs_board_commentSumAggregateOutputType | null
    min: Rs_board_commentMinAggregateOutputType | null
    max: Rs_board_commentMaxAggregateOutputType | null
  }

  export type Rs_board_commentAvgAggregateOutputType = {
    cmt_idx: number
    cmt_mem_idx: number
    cmt_pass: number | null
    cmt_create_timestemp: number
    cmt_update_timestemp: number
  }

  export type Rs_board_commentSumAggregateOutputType = {
    cmt_idx: number
    cmt_mem_idx: number
    cmt_pass: number | null
    cmt_create_timestemp: number
    cmt_update_timestemp: number
  }

  export type Rs_board_commentMinAggregateOutputType = {
    cmt_idx: number
    cmt_content: string | null
    cmt_mem_idx: number
    cmt_mem_id: string | null
    cmt_mem_nick: string | null
    cmt_pass: number | null
    cmt_create_datetime: string | null
    cmt_create_timestemp: number
    cmt_update_datetime: string | null
    cmt_update_timestemp: number
  }

  export type Rs_board_commentMaxAggregateOutputType = {
    cmt_idx: number
    cmt_content: string | null
    cmt_mem_idx: number
    cmt_mem_id: string | null
    cmt_mem_nick: string | null
    cmt_pass: number | null
    cmt_create_datetime: string | null
    cmt_create_timestemp: number
    cmt_update_datetime: string | null
    cmt_update_timestemp: number
  }

  export type Rs_board_commentCountAggregateOutputType = {
    cmt_idx: number
    cmt_content: number | null
    cmt_mem_idx: number
    cmt_mem_id: number | null
    cmt_mem_nick: number | null
    cmt_pass: number | null
    cmt_create_datetime: number | null
    cmt_create_timestemp: number
    cmt_update_datetime: number | null
    cmt_update_timestemp: number
    _all: number
  }


  export type Rs_board_commentAvgAggregateInputType = {
    cmt_idx?: true
    cmt_mem_idx?: true
    cmt_pass?: true
    cmt_create_timestemp?: true
    cmt_update_timestemp?: true
  }

  export type Rs_board_commentSumAggregateInputType = {
    cmt_idx?: true
    cmt_mem_idx?: true
    cmt_pass?: true
    cmt_create_timestemp?: true
    cmt_update_timestemp?: true
  }

  export type Rs_board_commentMinAggregateInputType = {
    cmt_idx?: true
    cmt_content?: true
    cmt_mem_idx?: true
    cmt_mem_id?: true
    cmt_mem_nick?: true
    cmt_pass?: true
    cmt_create_datetime?: true
    cmt_create_timestemp?: true
    cmt_update_datetime?: true
    cmt_update_timestemp?: true
  }

  export type Rs_board_commentMaxAggregateInputType = {
    cmt_idx?: true
    cmt_content?: true
    cmt_mem_idx?: true
    cmt_mem_id?: true
    cmt_mem_nick?: true
    cmt_pass?: true
    cmt_create_datetime?: true
    cmt_create_timestemp?: true
    cmt_update_datetime?: true
    cmt_update_timestemp?: true
  }

  export type Rs_board_commentCountAggregateInputType = {
    cmt_idx?: true
    cmt_content?: true
    cmt_mem_idx?: true
    cmt_mem_id?: true
    cmt_mem_nick?: true
    cmt_pass?: true
    cmt_create_datetime?: true
    cmt_create_timestemp?: true
    cmt_update_datetime?: true
    cmt_update_timestemp?: true
    _all?: true
  }

  export type AggregateRs_board_commentArgs = {
    where?: rs_board_commentWhereInput
    orderBy?: Enumerable<rs_board_commentOrderByInput>
    cursor?: rs_board_commentWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_board_commentAvgAggregateInputType
    sum?: Rs_board_commentSumAggregateInputType
    min?: Rs_board_commentMinAggregateInputType
    max?: Rs_board_commentMaxAggregateInputType
  }

  export type GetRs_board_commentAggregateType<T extends AggregateRs_board_commentArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_board_commentAggregateScalarType<T[P]>
  }

  export type GetRs_board_commentAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_board_commentAvgAggregateOutputType ? Rs_board_commentAvgAggregateOutputType[P] : never
  }

    



  export type rs_board_commentSelect = {
    cmt_idx?: boolean
    cmt_content?: boolean
    cmt_mem_idx?: boolean
    cmt_mem_id?: boolean
    cmt_mem_nick?: boolean
    cmt_pass?: boolean
    cmt_create_datetime?: boolean
    cmt_create_timestemp?: boolean
    cmt_update_datetime?: boolean
    cmt_update_timestemp?: boolean
    rs_board_likebad_map?: boolean | FindManyrs_board_likebad_mapArgs
  }

  export type rs_board_commentInclude = {
    rs_board_likebad_map?: boolean | FindManyrs_board_likebad_mapArgs
  }

  export type rs_board_commentGetPayload<
    S extends boolean | null | undefined | rs_board_commentArgs,
    U = keyof S
      > = S extends true
        ? rs_board_comment
    : S extends undefined
    ? never
    : S extends rs_board_commentArgs | FindManyrs_board_commentArgs
    ?'include' extends U
    ? rs_board_comment  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_board_likebad_map'
        ? Array < rs_board_likebad_mapGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_board_comment ?rs_board_comment [P]
  : 
          P extends 'rs_board_likebad_map'
        ? Array < rs_board_likebad_mapGetPayload<S['select'][P]>>  : never
  } 
    : rs_board_comment
  : rs_board_comment


  export interface rs_board_commentDelegate {
    /**
     * Find zero or one Rs_board_comment that matches the filter.
     * @param {FindUniquers_board_commentArgs} args - Arguments to find a Rs_board_comment
     * @example
     * // Get one Rs_board_comment
     * const rs_board_comment = await prisma.rs_board_comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_board_commentArgs>(
      args: Subset<T, FindUniquers_board_commentArgs>
    ): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment | null>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T> | null>>
    /**
     * Find the first Rs_board_comment that matches the filter.
     * @param {FindFirstrs_board_commentArgs} args - Arguments to find a Rs_board_comment
     * @example
     * // Get one Rs_board_comment
     * const rs_board_comment = await prisma.rs_board_comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_board_commentArgs>(
      args?: Subset<T, FindFirstrs_board_commentArgs>
    ): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment | null>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T> | null>>
    /**
     * Find zero or more Rs_board_comments that matches the filter.
     * @param {FindManyrs_board_commentArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_board_comments
     * const rs_board_comments = await prisma.rs_board_comment.findMany()
     * 
     * // Get first 10 Rs_board_comments
     * const rs_board_comments = await prisma.rs_board_comment.findMany({ take: 10 })
     * 
     * // Only select the `cmt_idx`
     * const rs_board_commentWithCmt_idxOnly = await prisma.rs_board_comment.findMany({ select: { cmt_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_board_commentArgs>(
      args?: Subset<T, FindManyrs_board_commentArgs>
    ): CheckSelect<T, Promise<Array<rs_board_comment>>, Promise<Array<rs_board_commentGetPayload<T>>>>
    /**
     * Create a Rs_board_comment.
     * @param {rs_board_commentCreateArgs} args - Arguments to create a Rs_board_comment.
     * @example
     * // Create one Rs_board_comment
     * const Rs_board_comment = await prisma.rs_board_comment.create({
     *   data: {
     *     // ... data to create a Rs_board_comment
     *   }
     * })
     * 
    **/
    create<T extends rs_board_commentCreateArgs>(
      args: Subset<T, rs_board_commentCreateArgs>
    ): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T>>>
    /**
     * Delete a Rs_board_comment.
     * @param {rs_board_commentDeleteArgs} args - Arguments to delete one Rs_board_comment.
     * @example
     * // Delete one Rs_board_comment
     * const Rs_board_comment = await prisma.rs_board_comment.delete({
     *   where: {
     *     // ... filter to delete one Rs_board_comment
     *   }
     * })
     * 
    **/
    delete<T extends rs_board_commentDeleteArgs>(
      args: Subset<T, rs_board_commentDeleteArgs>
    ): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T>>>
    /**
     * Update one Rs_board_comment.
     * @param {rs_board_commentUpdateArgs} args - Arguments to update one Rs_board_comment.
     * @example
     * // Update one Rs_board_comment
     * const rs_board_comment = await prisma.rs_board_comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_board_commentUpdateArgs>(
      args: Subset<T, rs_board_commentUpdateArgs>
    ): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T>>>
    /**
     * Delete zero or more Rs_board_comments.
     * @param {rs_board_commentDeleteManyArgs} args - Arguments to filter Rs_board_comments to delete.
     * @example
     * // Delete a few Rs_board_comments
     * const { count } = await prisma.rs_board_comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_board_commentDeleteManyArgs>(
      args?: Subset<T, rs_board_commentDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_board_comments.
     * @param {rs_board_commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_board_comments
     * const rs_board_comment = await prisma.rs_board_comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_board_commentUpdateManyArgs>(
      args: Subset<T, rs_board_commentUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_board_comment.
     * @param {rs_board_commentUpsertArgs} args - Arguments to update or create a Rs_board_comment.
     * @example
     * // Update or create a Rs_board_comment
     * const rs_board_comment = await prisma.rs_board_comment.upsert({
     *   create: {
     *     // ... data to create a Rs_board_comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_board_comment we want to update
     *   }
     * })
    **/
    upsert<T extends rs_board_commentUpsertArgs>(
      args: Subset<T, rs_board_commentUpsertArgs>
    ): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T>>>
    /**
     * Find zero or one Rs_board_comment that matches the filter.
     * @param {FindUniquers_board_commentArgs} args - Arguments to find a Rs_board_comment
     * @deprecated This will be deprecated please use prisma.rs_board_comment.findUnique
     * @example
     * // Get one Rs_board_comment
     * const rs_board_comment = await prisma.rs_board_comment.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_board_commentArgs>(
      args: Subset<T, FindUniquers_board_commentArgs>
    ): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment | null>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_board_commentArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_board_commentArgs>(args: Subset<T, AggregateRs_board_commentArgs>): Promise<GetRs_board_commentAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_board_comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_board_commentClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_board_likebad_map<T extends FindManyrs_board_likebad_mapArgs = {}>(args?: Subset<T, FindManyrs_board_likebad_mapArgs>): CheckSelect<T, Promise<Array<rs_board_likebad_map>>, Promise<Array<rs_board_likebad_mapGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_board_comment findUnique
   */
  export type FindUniquers_board_commentArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
    /**
     * Filter, which rs_board_comment to fetch.
    **/
    where: rs_board_commentWhereUniqueInput
  }


  /**
   * rs_board_comment findFirst
   */
  export type FindFirstrs_board_commentArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
    /**
     * Filter, which rs_board_comment to fetch.
    **/
    where?: rs_board_commentWhereInput
    orderBy?: Enumerable<rs_board_commentOrderByInput>
    cursor?: rs_board_commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_board_commentScalarFieldEnum>
  }


  /**
   * rs_board_comment findMany
   */
  export type FindManyrs_board_commentArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
    /**
     * Filter, which rs_board_comments to fetch.
    **/
    where?: rs_board_commentWhereInput
    /**
     * Determine the order of the rs_board_comments to fetch.
    **/
    orderBy?: Enumerable<rs_board_commentOrderByInput>
    /**
     * Sets the position for listing rs_board_comments.
    **/
    cursor?: rs_board_commentWhereUniqueInput
    /**
     * The number of rs_board_comments to fetch. If negative number, it will take rs_board_comments before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_board_comments.
    **/
    skip?: number
    distinct?: Enumerable<Rs_board_commentScalarFieldEnum>
  }


  /**
   * rs_board_comment create
   */
  export type rs_board_commentCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
    /**
     * The data needed to create a rs_board_comment.
    **/
    data: rs_board_commentCreateInput
  }


  /**
   * rs_board_comment update
   */
  export type rs_board_commentUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
    /**
     * The data needed to update a rs_board_comment.
    **/
    data: rs_board_commentUpdateInput
    /**
     * Choose, which rs_board_comment to update.
    **/
    where: rs_board_commentWhereUniqueInput
  }


  /**
   * rs_board_comment updateMany
   */
  export type rs_board_commentUpdateManyArgs = {
    data: rs_board_commentUpdateManyMutationInput
    where?: rs_board_commentWhereInput
  }


  /**
   * rs_board_comment upsert
   */
  export type rs_board_commentUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
    /**
     * The filter to search for the rs_board_comment to update in case it exists.
    **/
    where: rs_board_commentWhereUniqueInput
    /**
     * In case the rs_board_comment found by the `where` argument doesn't exist, create a new rs_board_comment with this data.
    **/
    create: rs_board_commentCreateInput
    /**
     * In case the rs_board_comment was found with the provided `where` argument, update it with this data.
    **/
    update: rs_board_commentUpdateInput
  }


  /**
   * rs_board_comment delete
   */
  export type rs_board_commentDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
    /**
     * Filter which rs_board_comment to delete.
    **/
    where: rs_board_commentWhereUniqueInput
  }


  /**
   * rs_board_comment deleteMany
   */
  export type rs_board_commentDeleteManyArgs = {
    where?: rs_board_commentWhereInput
  }


  /**
   * rs_board_comment without action
   */
  export type rs_board_commentArgs = {
    /**
     * Select specific fields to fetch from the rs_board_comment
    **/
    select?: rs_board_commentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_commentInclude | null
  }



  /**
   * Model rs_board_post
   */


  export type AggregateRs_board_post = {
    count: number | null
    avg: Rs_board_postAvgAggregateOutputType | null
    sum: Rs_board_postSumAggregateOutputType | null
    min: Rs_board_postMinAggregateOutputType | null
    max: Rs_board_postMaxAggregateOutputType | null
  }

  export type Rs_board_postAvgAggregateOutputType = {
    pst_idx: number
    pst_create_timestemp: number
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
  }

  export type Rs_board_postSumAggregateOutputType = {
    pst_idx: number
    pst_create_timestemp: number
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
  }

  export type Rs_board_postMinAggregateOutputType = {
    pst_idx: number
    pst_title: string | null
    pst_content: string | null
    pst_pass: string | null
    pst_create_datetime: string | null
    pst_create_timestemp: number
    pst_update_datetime: string | null
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
    pst_mem_id: string | null
    pst_mem_nick: string | null
  }

  export type Rs_board_postMaxAggregateOutputType = {
    pst_idx: number
    pst_title: string | null
    pst_content: string | null
    pst_pass: string | null
    pst_create_datetime: string | null
    pst_create_timestemp: number
    pst_update_datetime: string | null
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
    pst_mem_id: string | null
    pst_mem_nick: string | null
  }

  export type Rs_board_postCountAggregateOutputType = {
    pst_idx: number
    pst_title: number | null
    pst_content: number | null
    pst_pass: number | null
    pst_create_datetime: number | null
    pst_create_timestemp: number
    pst_update_datetime: number | null
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
    pst_mem_id: number | null
    pst_mem_nick: number | null
    _all: number
  }


  export type Rs_board_postAvgAggregateInputType = {
    pst_idx?: true
    pst_create_timestemp?: true
    pst_update_timestemp?: true
    pst_hit?: true
    pst_cat_idx?: true
    pst_mem_idx?: true
  }

  export type Rs_board_postSumAggregateInputType = {
    pst_idx?: true
    pst_create_timestemp?: true
    pst_update_timestemp?: true
    pst_hit?: true
    pst_cat_idx?: true
    pst_mem_idx?: true
  }

  export type Rs_board_postMinAggregateInputType = {
    pst_idx?: true
    pst_title?: true
    pst_content?: true
    pst_pass?: true
    pst_create_datetime?: true
    pst_create_timestemp?: true
    pst_update_datetime?: true
    pst_update_timestemp?: true
    pst_hit?: true
    pst_cat_idx?: true
    pst_mem_idx?: true
    pst_mem_id?: true
    pst_mem_nick?: true
  }

  export type Rs_board_postMaxAggregateInputType = {
    pst_idx?: true
    pst_title?: true
    pst_content?: true
    pst_pass?: true
    pst_create_datetime?: true
    pst_create_timestemp?: true
    pst_update_datetime?: true
    pst_update_timestemp?: true
    pst_hit?: true
    pst_cat_idx?: true
    pst_mem_idx?: true
    pst_mem_id?: true
    pst_mem_nick?: true
  }

  export type Rs_board_postCountAggregateInputType = {
    pst_idx?: true
    pst_title?: true
    pst_content?: true
    pst_pass?: true
    pst_create_datetime?: true
    pst_create_timestemp?: true
    pst_update_datetime?: true
    pst_update_timestemp?: true
    pst_hit?: true
    pst_cat_idx?: true
    pst_mem_idx?: true
    pst_mem_id?: true
    pst_mem_nick?: true
    _all?: true
  }

  export type AggregateRs_board_postArgs = {
    where?: rs_board_postWhereInput
    orderBy?: Enumerable<rs_board_postOrderByInput>
    cursor?: rs_board_postWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_board_postAvgAggregateInputType
    sum?: Rs_board_postSumAggregateInputType
    min?: Rs_board_postMinAggregateInputType
    max?: Rs_board_postMaxAggregateInputType
  }

  export type GetRs_board_postAggregateType<T extends AggregateRs_board_postArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_board_postAggregateScalarType<T[P]>
  }

  export type GetRs_board_postAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_board_postAvgAggregateOutputType ? Rs_board_postAvgAggregateOutputType[P] : never
  }

    



  export type rs_board_postSelect = {
    pst_idx?: boolean
    pst_title?: boolean
    pst_content?: boolean
    pst_pass?: boolean
    pst_create_datetime?: boolean
    pst_create_timestemp?: boolean
    pst_update_datetime?: boolean
    pst_update_timestemp?: boolean
    pst_hit?: boolean
    pst_cat_idx?: boolean
    pst_mem_idx?: boolean
    pst_mem_id?: boolean
    pst_mem_nick?: boolean
    rs_board_likebad_map?: boolean | FindManyrs_board_likebad_mapArgs
    rs_note?: boolean | FindManyrs_noteArgs
  }

  export type rs_board_postInclude = {
    rs_board_likebad_map?: boolean | FindManyrs_board_likebad_mapArgs
    rs_note?: boolean | FindManyrs_noteArgs
  }

  export type rs_board_postGetPayload<
    S extends boolean | null | undefined | rs_board_postArgs,
    U = keyof S
      > = S extends true
        ? rs_board_post
    : S extends undefined
    ? never
    : S extends rs_board_postArgs | FindManyrs_board_postArgs
    ?'include' extends U
    ? rs_board_post  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_board_likebad_map'
        ? Array < rs_board_likebad_mapGetPayload<S['include'][P]>>  :
        P extends 'rs_note'
        ? Array < rs_noteGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_board_post ?rs_board_post [P]
  : 
          P extends 'rs_board_likebad_map'
        ? Array < rs_board_likebad_mapGetPayload<S['select'][P]>>  :
        P extends 'rs_note'
        ? Array < rs_noteGetPayload<S['select'][P]>>  : never
  } 
    : rs_board_post
  : rs_board_post


  export interface rs_board_postDelegate {
    /**
     * Find zero or one Rs_board_post that matches the filter.
     * @param {FindUniquers_board_postArgs} args - Arguments to find a Rs_board_post
     * @example
     * // Get one Rs_board_post
     * const rs_board_post = await prisma.rs_board_post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_board_postArgs>(
      args: Subset<T, FindUniquers_board_postArgs>
    ): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post | null>, Prisma__rs_board_postClient<rs_board_postGetPayload<T> | null>>
    /**
     * Find the first Rs_board_post that matches the filter.
     * @param {FindFirstrs_board_postArgs} args - Arguments to find a Rs_board_post
     * @example
     * // Get one Rs_board_post
     * const rs_board_post = await prisma.rs_board_post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_board_postArgs>(
      args?: Subset<T, FindFirstrs_board_postArgs>
    ): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post | null>, Prisma__rs_board_postClient<rs_board_postGetPayload<T> | null>>
    /**
     * Find zero or more Rs_board_posts that matches the filter.
     * @param {FindManyrs_board_postArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_board_posts
     * const rs_board_posts = await prisma.rs_board_post.findMany()
     * 
     * // Get first 10 Rs_board_posts
     * const rs_board_posts = await prisma.rs_board_post.findMany({ take: 10 })
     * 
     * // Only select the `pst_idx`
     * const rs_board_postWithPst_idxOnly = await prisma.rs_board_post.findMany({ select: { pst_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_board_postArgs>(
      args?: Subset<T, FindManyrs_board_postArgs>
    ): CheckSelect<T, Promise<Array<rs_board_post>>, Promise<Array<rs_board_postGetPayload<T>>>>
    /**
     * Create a Rs_board_post.
     * @param {rs_board_postCreateArgs} args - Arguments to create a Rs_board_post.
     * @example
     * // Create one Rs_board_post
     * const Rs_board_post = await prisma.rs_board_post.create({
     *   data: {
     *     // ... data to create a Rs_board_post
     *   }
     * })
     * 
    **/
    create<T extends rs_board_postCreateArgs>(
      args: Subset<T, rs_board_postCreateArgs>
    ): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post>, Prisma__rs_board_postClient<rs_board_postGetPayload<T>>>
    /**
     * Delete a Rs_board_post.
     * @param {rs_board_postDeleteArgs} args - Arguments to delete one Rs_board_post.
     * @example
     * // Delete one Rs_board_post
     * const Rs_board_post = await prisma.rs_board_post.delete({
     *   where: {
     *     // ... filter to delete one Rs_board_post
     *   }
     * })
     * 
    **/
    delete<T extends rs_board_postDeleteArgs>(
      args: Subset<T, rs_board_postDeleteArgs>
    ): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post>, Prisma__rs_board_postClient<rs_board_postGetPayload<T>>>
    /**
     * Update one Rs_board_post.
     * @param {rs_board_postUpdateArgs} args - Arguments to update one Rs_board_post.
     * @example
     * // Update one Rs_board_post
     * const rs_board_post = await prisma.rs_board_post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_board_postUpdateArgs>(
      args: Subset<T, rs_board_postUpdateArgs>
    ): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post>, Prisma__rs_board_postClient<rs_board_postGetPayload<T>>>
    /**
     * Delete zero or more Rs_board_posts.
     * @param {rs_board_postDeleteManyArgs} args - Arguments to filter Rs_board_posts to delete.
     * @example
     * // Delete a few Rs_board_posts
     * const { count } = await prisma.rs_board_post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_board_postDeleteManyArgs>(
      args?: Subset<T, rs_board_postDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_board_posts.
     * @param {rs_board_postUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_board_posts
     * const rs_board_post = await prisma.rs_board_post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_board_postUpdateManyArgs>(
      args: Subset<T, rs_board_postUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_board_post.
     * @param {rs_board_postUpsertArgs} args - Arguments to update or create a Rs_board_post.
     * @example
     * // Update or create a Rs_board_post
     * const rs_board_post = await prisma.rs_board_post.upsert({
     *   create: {
     *     // ... data to create a Rs_board_post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_board_post we want to update
     *   }
     * })
    **/
    upsert<T extends rs_board_postUpsertArgs>(
      args: Subset<T, rs_board_postUpsertArgs>
    ): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post>, Prisma__rs_board_postClient<rs_board_postGetPayload<T>>>
    /**
     * Find zero or one Rs_board_post that matches the filter.
     * @param {FindUniquers_board_postArgs} args - Arguments to find a Rs_board_post
     * @deprecated This will be deprecated please use prisma.rs_board_post.findUnique
     * @example
     * // Get one Rs_board_post
     * const rs_board_post = await prisma.rs_board_post.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_board_postArgs>(
      args: Subset<T, FindUniquers_board_postArgs>
    ): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post | null>, Prisma__rs_board_postClient<rs_board_postGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_board_postArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_board_postArgs>(args: Subset<T, AggregateRs_board_postArgs>): Promise<GetRs_board_postAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_board_post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_board_postClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_board_likebad_map<T extends FindManyrs_board_likebad_mapArgs = {}>(args?: Subset<T, FindManyrs_board_likebad_mapArgs>): CheckSelect<T, Promise<Array<rs_board_likebad_map>>, Promise<Array<rs_board_likebad_mapGetPayload<T>>>>;

    rs_note<T extends FindManyrs_noteArgs = {}>(args?: Subset<T, FindManyrs_noteArgs>): CheckSelect<T, Promise<Array<rs_note>>, Promise<Array<rs_noteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_board_post findUnique
   */
  export type FindUniquers_board_postArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
    /**
     * Filter, which rs_board_post to fetch.
    **/
    where: rs_board_postWhereUniqueInput
  }


  /**
   * rs_board_post findFirst
   */
  export type FindFirstrs_board_postArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
    /**
     * Filter, which rs_board_post to fetch.
    **/
    where?: rs_board_postWhereInput
    orderBy?: Enumerable<rs_board_postOrderByInput>
    cursor?: rs_board_postWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_board_postScalarFieldEnum>
  }


  /**
   * rs_board_post findMany
   */
  export type FindManyrs_board_postArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
    /**
     * Filter, which rs_board_posts to fetch.
    **/
    where?: rs_board_postWhereInput
    /**
     * Determine the order of the rs_board_posts to fetch.
    **/
    orderBy?: Enumerable<rs_board_postOrderByInput>
    /**
     * Sets the position for listing rs_board_posts.
    **/
    cursor?: rs_board_postWhereUniqueInput
    /**
     * The number of rs_board_posts to fetch. If negative number, it will take rs_board_posts before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_board_posts.
    **/
    skip?: number
    distinct?: Enumerable<Rs_board_postScalarFieldEnum>
  }


  /**
   * rs_board_post create
   */
  export type rs_board_postCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
    /**
     * The data needed to create a rs_board_post.
    **/
    data: rs_board_postCreateInput
  }


  /**
   * rs_board_post update
   */
  export type rs_board_postUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
    /**
     * The data needed to update a rs_board_post.
    **/
    data: rs_board_postUpdateInput
    /**
     * Choose, which rs_board_post to update.
    **/
    where: rs_board_postWhereUniqueInput
  }


  /**
   * rs_board_post updateMany
   */
  export type rs_board_postUpdateManyArgs = {
    data: rs_board_postUpdateManyMutationInput
    where?: rs_board_postWhereInput
  }


  /**
   * rs_board_post upsert
   */
  export type rs_board_postUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
    /**
     * The filter to search for the rs_board_post to update in case it exists.
    **/
    where: rs_board_postWhereUniqueInput
    /**
     * In case the rs_board_post found by the `where` argument doesn't exist, create a new rs_board_post with this data.
    **/
    create: rs_board_postCreateInput
    /**
     * In case the rs_board_post was found with the provided `where` argument, update it with this data.
    **/
    update: rs_board_postUpdateInput
  }


  /**
   * rs_board_post delete
   */
  export type rs_board_postDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
    /**
     * Filter which rs_board_post to delete.
    **/
    where: rs_board_postWhereUniqueInput
  }


  /**
   * rs_board_post deleteMany
   */
  export type rs_board_postDeleteManyArgs = {
    where?: rs_board_postWhereInput
  }


  /**
   * rs_board_post without action
   */
  export type rs_board_postArgs = {
    /**
     * Select specific fields to fetch from the rs_board_post
    **/
    select?: rs_board_postSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_postInclude | null
  }



  /**
   * Model rs_mem_auth
   */


  export type AggregateRs_mem_auth = {
    count: number | null
    avg: Rs_mem_authAvgAggregateOutputType | null
    sum: Rs_mem_authSumAggregateOutputType | null
    min: Rs_mem_authMinAggregateOutputType | null
    max: Rs_mem_authMaxAggregateOutputType | null
  }

  export type Rs_mem_authAvgAggregateOutputType = {
    auth_idx: number
    authNumber: number
  }

  export type Rs_mem_authSumAggregateOutputType = {
    auth_idx: number
    authNumber: number
  }

  export type Rs_mem_authMinAggregateOutputType = {
    auth_idx: number
    auth_email: string | null
    authNumber: number
    auth_datetime: string | null
  }

  export type Rs_mem_authMaxAggregateOutputType = {
    auth_idx: number
    auth_email: string | null
    authNumber: number
    auth_datetime: string | null
  }

  export type Rs_mem_authCountAggregateOutputType = {
    auth_idx: number
    auth_email: number | null
    authNumber: number
    auth_datetime: number | null
    _all: number
  }


  export type Rs_mem_authAvgAggregateInputType = {
    auth_idx?: true
    authNumber?: true
  }

  export type Rs_mem_authSumAggregateInputType = {
    auth_idx?: true
    authNumber?: true
  }

  export type Rs_mem_authMinAggregateInputType = {
    auth_idx?: true
    auth_email?: true
    authNumber?: true
    auth_datetime?: true
  }

  export type Rs_mem_authMaxAggregateInputType = {
    auth_idx?: true
    auth_email?: true
    authNumber?: true
    auth_datetime?: true
  }

  export type Rs_mem_authCountAggregateInputType = {
    auth_idx?: true
    auth_email?: true
    authNumber?: true
    auth_datetime?: true
    _all?: true
  }

  export type AggregateRs_mem_authArgs = {
    where?: rs_mem_authWhereInput
    orderBy?: Enumerable<rs_mem_authOrderByInput>
    cursor?: rs_mem_authWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_mem_authAvgAggregateInputType
    sum?: Rs_mem_authSumAggregateInputType
    min?: Rs_mem_authMinAggregateInputType
    max?: Rs_mem_authMaxAggregateInputType
  }

  export type GetRs_mem_authAggregateType<T extends AggregateRs_mem_authArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_mem_authAggregateScalarType<T[P]>
  }

  export type GetRs_mem_authAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_mem_authAvgAggregateOutputType ? Rs_mem_authAvgAggregateOutputType[P] : never
  }

    



  export type rs_mem_authSelect = {
    auth_idx?: boolean
    auth_email?: boolean
    authNumber?: boolean
    auth_datetime?: boolean
  }

  export type rs_mem_authGetPayload<
    S extends boolean | null | undefined | rs_mem_authArgs,
    U = keyof S
      > = S extends true
        ? rs_mem_auth
    : S extends undefined
    ? never
    : S extends rs_mem_authArgs | FindManyrs_mem_authArgs
    ?'include' extends U
    ? rs_mem_auth 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_mem_auth ?rs_mem_auth [P]
  : 
     never
  } 
    : rs_mem_auth
  : rs_mem_auth


  export interface rs_mem_authDelegate {
    /**
     * Find zero or one Rs_mem_auth that matches the filter.
     * @param {FindUniquers_mem_authArgs} args - Arguments to find a Rs_mem_auth
     * @example
     * // Get one Rs_mem_auth
     * const rs_mem_auth = await prisma.rs_mem_auth.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_mem_authArgs>(
      args: Subset<T, FindUniquers_mem_authArgs>
    ): CheckSelect<T, Prisma__rs_mem_authClient<rs_mem_auth | null>, Prisma__rs_mem_authClient<rs_mem_authGetPayload<T> | null>>
    /**
     * Find the first Rs_mem_auth that matches the filter.
     * @param {FindFirstrs_mem_authArgs} args - Arguments to find a Rs_mem_auth
     * @example
     * // Get one Rs_mem_auth
     * const rs_mem_auth = await prisma.rs_mem_auth.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_mem_authArgs>(
      args?: Subset<T, FindFirstrs_mem_authArgs>
    ): CheckSelect<T, Prisma__rs_mem_authClient<rs_mem_auth | null>, Prisma__rs_mem_authClient<rs_mem_authGetPayload<T> | null>>
    /**
     * Find zero or more Rs_mem_auths that matches the filter.
     * @param {FindManyrs_mem_authArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_mem_auths
     * const rs_mem_auths = await prisma.rs_mem_auth.findMany()
     * 
     * // Get first 10 Rs_mem_auths
     * const rs_mem_auths = await prisma.rs_mem_auth.findMany({ take: 10 })
     * 
     * // Only select the `auth_idx`
     * const rs_mem_authWithAuth_idxOnly = await prisma.rs_mem_auth.findMany({ select: { auth_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_mem_authArgs>(
      args?: Subset<T, FindManyrs_mem_authArgs>
    ): CheckSelect<T, Promise<Array<rs_mem_auth>>, Promise<Array<rs_mem_authGetPayload<T>>>>
    /**
     * Create a Rs_mem_auth.
     * @param {rs_mem_authCreateArgs} args - Arguments to create a Rs_mem_auth.
     * @example
     * // Create one Rs_mem_auth
     * const Rs_mem_auth = await prisma.rs_mem_auth.create({
     *   data: {
     *     // ... data to create a Rs_mem_auth
     *   }
     * })
     * 
    **/
    create<T extends rs_mem_authCreateArgs>(
      args: Subset<T, rs_mem_authCreateArgs>
    ): CheckSelect<T, Prisma__rs_mem_authClient<rs_mem_auth>, Prisma__rs_mem_authClient<rs_mem_authGetPayload<T>>>
    /**
     * Delete a Rs_mem_auth.
     * @param {rs_mem_authDeleteArgs} args - Arguments to delete one Rs_mem_auth.
     * @example
     * // Delete one Rs_mem_auth
     * const Rs_mem_auth = await prisma.rs_mem_auth.delete({
     *   where: {
     *     // ... filter to delete one Rs_mem_auth
     *   }
     * })
     * 
    **/
    delete<T extends rs_mem_authDeleteArgs>(
      args: Subset<T, rs_mem_authDeleteArgs>
    ): CheckSelect<T, Prisma__rs_mem_authClient<rs_mem_auth>, Prisma__rs_mem_authClient<rs_mem_authGetPayload<T>>>
    /**
     * Update one Rs_mem_auth.
     * @param {rs_mem_authUpdateArgs} args - Arguments to update one Rs_mem_auth.
     * @example
     * // Update one Rs_mem_auth
     * const rs_mem_auth = await prisma.rs_mem_auth.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_mem_authUpdateArgs>(
      args: Subset<T, rs_mem_authUpdateArgs>
    ): CheckSelect<T, Prisma__rs_mem_authClient<rs_mem_auth>, Prisma__rs_mem_authClient<rs_mem_authGetPayload<T>>>
    /**
     * Delete zero or more Rs_mem_auths.
     * @param {rs_mem_authDeleteManyArgs} args - Arguments to filter Rs_mem_auths to delete.
     * @example
     * // Delete a few Rs_mem_auths
     * const { count } = await prisma.rs_mem_auth.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_mem_authDeleteManyArgs>(
      args?: Subset<T, rs_mem_authDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_mem_auths.
     * @param {rs_mem_authUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_mem_auths
     * const rs_mem_auth = await prisma.rs_mem_auth.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_mem_authUpdateManyArgs>(
      args: Subset<T, rs_mem_authUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_mem_auth.
     * @param {rs_mem_authUpsertArgs} args - Arguments to update or create a Rs_mem_auth.
     * @example
     * // Update or create a Rs_mem_auth
     * const rs_mem_auth = await prisma.rs_mem_auth.upsert({
     *   create: {
     *     // ... data to create a Rs_mem_auth
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_mem_auth we want to update
     *   }
     * })
    **/
    upsert<T extends rs_mem_authUpsertArgs>(
      args: Subset<T, rs_mem_authUpsertArgs>
    ): CheckSelect<T, Prisma__rs_mem_authClient<rs_mem_auth>, Prisma__rs_mem_authClient<rs_mem_authGetPayload<T>>>
    /**
     * Find zero or one Rs_mem_auth that matches the filter.
     * @param {FindUniquers_mem_authArgs} args - Arguments to find a Rs_mem_auth
     * @deprecated This will be deprecated please use prisma.rs_mem_auth.findUnique
     * @example
     * // Get one Rs_mem_auth
     * const rs_mem_auth = await prisma.rs_mem_auth.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_mem_authArgs>(
      args: Subset<T, FindUniquers_mem_authArgs>
    ): CheckSelect<T, Prisma__rs_mem_authClient<rs_mem_auth | null>, Prisma__rs_mem_authClient<rs_mem_authGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_mem_authArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_mem_authArgs>(args: Subset<T, AggregateRs_mem_authArgs>): Promise<GetRs_mem_authAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_mem_auth.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_mem_authClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_mem_auth findUnique
   */
  export type FindUniquers_mem_authArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
    /**
     * Filter, which rs_mem_auth to fetch.
    **/
    where: rs_mem_authWhereUniqueInput
  }


  /**
   * rs_mem_auth findFirst
   */
  export type FindFirstrs_mem_authArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
    /**
     * Filter, which rs_mem_auth to fetch.
    **/
    where?: rs_mem_authWhereInput
    orderBy?: Enumerable<rs_mem_authOrderByInput>
    cursor?: rs_mem_authWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_mem_authScalarFieldEnum>
  }


  /**
   * rs_mem_auth findMany
   */
  export type FindManyrs_mem_authArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
    /**
     * Filter, which rs_mem_auths to fetch.
    **/
    where?: rs_mem_authWhereInput
    /**
     * Determine the order of the rs_mem_auths to fetch.
    **/
    orderBy?: Enumerable<rs_mem_authOrderByInput>
    /**
     * Sets the position for listing rs_mem_auths.
    **/
    cursor?: rs_mem_authWhereUniqueInput
    /**
     * The number of rs_mem_auths to fetch. If negative number, it will take rs_mem_auths before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_mem_auths.
    **/
    skip?: number
    distinct?: Enumerable<Rs_mem_authScalarFieldEnum>
  }


  /**
   * rs_mem_auth create
   */
  export type rs_mem_authCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
    /**
     * The data needed to create a rs_mem_auth.
    **/
    data: rs_mem_authCreateInput
  }


  /**
   * rs_mem_auth update
   */
  export type rs_mem_authUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
    /**
     * The data needed to update a rs_mem_auth.
    **/
    data: rs_mem_authUpdateInput
    /**
     * Choose, which rs_mem_auth to update.
    **/
    where: rs_mem_authWhereUniqueInput
  }


  /**
   * rs_mem_auth updateMany
   */
  export type rs_mem_authUpdateManyArgs = {
    data: rs_mem_authUpdateManyMutationInput
    where?: rs_mem_authWhereInput
  }


  /**
   * rs_mem_auth upsert
   */
  export type rs_mem_authUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
    /**
     * The filter to search for the rs_mem_auth to update in case it exists.
    **/
    where: rs_mem_authWhereUniqueInput
    /**
     * In case the rs_mem_auth found by the `where` argument doesn't exist, create a new rs_mem_auth with this data.
    **/
    create: rs_mem_authCreateInput
    /**
     * In case the rs_mem_auth was found with the provided `where` argument, update it with this data.
    **/
    update: rs_mem_authUpdateInput
  }


  /**
   * rs_mem_auth delete
   */
  export type rs_mem_authDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
    /**
     * Filter which rs_mem_auth to delete.
    **/
    where: rs_mem_authWhereUniqueInput
  }


  /**
   * rs_mem_auth deleteMany
   */
  export type rs_mem_authDeleteManyArgs = {
    where?: rs_mem_authWhereInput
  }


  /**
   * rs_mem_auth without action
   */
  export type rs_mem_authArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_auth
    **/
    select?: rs_mem_authSelect | null
  }



  /**
   * Model rs_mem_token
   */


  export type AggregateRs_mem_token = {
    count: number | null
    avg: Rs_mem_tokenAvgAggregateOutputType | null
    sum: Rs_mem_tokenSumAggregateOutputType | null
    min: Rs_mem_tokenMinAggregateOutputType | null
    max: Rs_mem_tokenMaxAggregateOutputType | null
  }

  export type Rs_mem_tokenAvgAggregateOutputType = {
    mtk_idx: number
  }

  export type Rs_mem_tokenSumAggregateOutputType = {
    mtk_idx: number
  }

  export type Rs_mem_tokenMinAggregateOutputType = {
    mtk_idx: number
    mtk_refresh: string | null
    mtk_email: string | null
  }

  export type Rs_mem_tokenMaxAggregateOutputType = {
    mtk_idx: number
    mtk_refresh: string | null
    mtk_email: string | null
  }

  export type Rs_mem_tokenCountAggregateOutputType = {
    mtk_idx: number
    mtk_refresh: number | null
    mtk_email: number | null
    _all: number
  }


  export type Rs_mem_tokenAvgAggregateInputType = {
    mtk_idx?: true
  }

  export type Rs_mem_tokenSumAggregateInputType = {
    mtk_idx?: true
  }

  export type Rs_mem_tokenMinAggregateInputType = {
    mtk_idx?: true
    mtk_refresh?: true
    mtk_email?: true
  }

  export type Rs_mem_tokenMaxAggregateInputType = {
    mtk_idx?: true
    mtk_refresh?: true
    mtk_email?: true
  }

  export type Rs_mem_tokenCountAggregateInputType = {
    mtk_idx?: true
    mtk_refresh?: true
    mtk_email?: true
    _all?: true
  }

  export type AggregateRs_mem_tokenArgs = {
    where?: rs_mem_tokenWhereInput
    orderBy?: Enumerable<rs_mem_tokenOrderByInput>
    cursor?: rs_mem_tokenWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_mem_tokenAvgAggregateInputType
    sum?: Rs_mem_tokenSumAggregateInputType
    min?: Rs_mem_tokenMinAggregateInputType
    max?: Rs_mem_tokenMaxAggregateInputType
  }

  export type GetRs_mem_tokenAggregateType<T extends AggregateRs_mem_tokenArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_mem_tokenAggregateScalarType<T[P]>
  }

  export type GetRs_mem_tokenAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_mem_tokenAvgAggregateOutputType ? Rs_mem_tokenAvgAggregateOutputType[P] : never
  }

    



  export type rs_mem_tokenSelect = {
    mtk_idx?: boolean
    mtk_refresh?: boolean
    mtk_email?: boolean
  }

  export type rs_mem_tokenGetPayload<
    S extends boolean | null | undefined | rs_mem_tokenArgs,
    U = keyof S
      > = S extends true
        ? rs_mem_token
    : S extends undefined
    ? never
    : S extends rs_mem_tokenArgs | FindManyrs_mem_tokenArgs
    ?'include' extends U
    ? rs_mem_token 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_mem_token ?rs_mem_token [P]
  : 
     never
  } 
    : rs_mem_token
  : rs_mem_token


  export interface rs_mem_tokenDelegate {
    /**
     * Find zero or one Rs_mem_token that matches the filter.
     * @param {FindUniquers_mem_tokenArgs} args - Arguments to find a Rs_mem_token
     * @example
     * // Get one Rs_mem_token
     * const rs_mem_token = await prisma.rs_mem_token.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_mem_tokenArgs>(
      args: Subset<T, FindUniquers_mem_tokenArgs>
    ): CheckSelect<T, Prisma__rs_mem_tokenClient<rs_mem_token | null>, Prisma__rs_mem_tokenClient<rs_mem_tokenGetPayload<T> | null>>
    /**
     * Find the first Rs_mem_token that matches the filter.
     * @param {FindFirstrs_mem_tokenArgs} args - Arguments to find a Rs_mem_token
     * @example
     * // Get one Rs_mem_token
     * const rs_mem_token = await prisma.rs_mem_token.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_mem_tokenArgs>(
      args?: Subset<T, FindFirstrs_mem_tokenArgs>
    ): CheckSelect<T, Prisma__rs_mem_tokenClient<rs_mem_token | null>, Prisma__rs_mem_tokenClient<rs_mem_tokenGetPayload<T> | null>>
    /**
     * Find zero or more Rs_mem_tokens that matches the filter.
     * @param {FindManyrs_mem_tokenArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_mem_tokens
     * const rs_mem_tokens = await prisma.rs_mem_token.findMany()
     * 
     * // Get first 10 Rs_mem_tokens
     * const rs_mem_tokens = await prisma.rs_mem_token.findMany({ take: 10 })
     * 
     * // Only select the `mtk_idx`
     * const rs_mem_tokenWithMtk_idxOnly = await prisma.rs_mem_token.findMany({ select: { mtk_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_mem_tokenArgs>(
      args?: Subset<T, FindManyrs_mem_tokenArgs>
    ): CheckSelect<T, Promise<Array<rs_mem_token>>, Promise<Array<rs_mem_tokenGetPayload<T>>>>
    /**
     * Create a Rs_mem_token.
     * @param {rs_mem_tokenCreateArgs} args - Arguments to create a Rs_mem_token.
     * @example
     * // Create one Rs_mem_token
     * const Rs_mem_token = await prisma.rs_mem_token.create({
     *   data: {
     *     // ... data to create a Rs_mem_token
     *   }
     * })
     * 
    **/
    create<T extends rs_mem_tokenCreateArgs>(
      args: Subset<T, rs_mem_tokenCreateArgs>
    ): CheckSelect<T, Prisma__rs_mem_tokenClient<rs_mem_token>, Prisma__rs_mem_tokenClient<rs_mem_tokenGetPayload<T>>>
    /**
     * Delete a Rs_mem_token.
     * @param {rs_mem_tokenDeleteArgs} args - Arguments to delete one Rs_mem_token.
     * @example
     * // Delete one Rs_mem_token
     * const Rs_mem_token = await prisma.rs_mem_token.delete({
     *   where: {
     *     // ... filter to delete one Rs_mem_token
     *   }
     * })
     * 
    **/
    delete<T extends rs_mem_tokenDeleteArgs>(
      args: Subset<T, rs_mem_tokenDeleteArgs>
    ): CheckSelect<T, Prisma__rs_mem_tokenClient<rs_mem_token>, Prisma__rs_mem_tokenClient<rs_mem_tokenGetPayload<T>>>
    /**
     * Update one Rs_mem_token.
     * @param {rs_mem_tokenUpdateArgs} args - Arguments to update one Rs_mem_token.
     * @example
     * // Update one Rs_mem_token
     * const rs_mem_token = await prisma.rs_mem_token.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_mem_tokenUpdateArgs>(
      args: Subset<T, rs_mem_tokenUpdateArgs>
    ): CheckSelect<T, Prisma__rs_mem_tokenClient<rs_mem_token>, Prisma__rs_mem_tokenClient<rs_mem_tokenGetPayload<T>>>
    /**
     * Delete zero or more Rs_mem_tokens.
     * @param {rs_mem_tokenDeleteManyArgs} args - Arguments to filter Rs_mem_tokens to delete.
     * @example
     * // Delete a few Rs_mem_tokens
     * const { count } = await prisma.rs_mem_token.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_mem_tokenDeleteManyArgs>(
      args?: Subset<T, rs_mem_tokenDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_mem_tokens.
     * @param {rs_mem_tokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_mem_tokens
     * const rs_mem_token = await prisma.rs_mem_token.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_mem_tokenUpdateManyArgs>(
      args: Subset<T, rs_mem_tokenUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_mem_token.
     * @param {rs_mem_tokenUpsertArgs} args - Arguments to update or create a Rs_mem_token.
     * @example
     * // Update or create a Rs_mem_token
     * const rs_mem_token = await prisma.rs_mem_token.upsert({
     *   create: {
     *     // ... data to create a Rs_mem_token
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_mem_token we want to update
     *   }
     * })
    **/
    upsert<T extends rs_mem_tokenUpsertArgs>(
      args: Subset<T, rs_mem_tokenUpsertArgs>
    ): CheckSelect<T, Prisma__rs_mem_tokenClient<rs_mem_token>, Prisma__rs_mem_tokenClient<rs_mem_tokenGetPayload<T>>>
    /**
     * Find zero or one Rs_mem_token that matches the filter.
     * @param {FindUniquers_mem_tokenArgs} args - Arguments to find a Rs_mem_token
     * @deprecated This will be deprecated please use prisma.rs_mem_token.findUnique
     * @example
     * // Get one Rs_mem_token
     * const rs_mem_token = await prisma.rs_mem_token.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_mem_tokenArgs>(
      args: Subset<T, FindUniquers_mem_tokenArgs>
    ): CheckSelect<T, Prisma__rs_mem_tokenClient<rs_mem_token | null>, Prisma__rs_mem_tokenClient<rs_mem_tokenGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_mem_tokenArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_mem_tokenArgs>(args: Subset<T, AggregateRs_mem_tokenArgs>): Promise<GetRs_mem_tokenAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_mem_token.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_mem_tokenClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_mem_token findUnique
   */
  export type FindUniquers_mem_tokenArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
    /**
     * Filter, which rs_mem_token to fetch.
    **/
    where: rs_mem_tokenWhereUniqueInput
  }


  /**
   * rs_mem_token findFirst
   */
  export type FindFirstrs_mem_tokenArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
    /**
     * Filter, which rs_mem_token to fetch.
    **/
    where?: rs_mem_tokenWhereInput
    orderBy?: Enumerable<rs_mem_tokenOrderByInput>
    cursor?: rs_mem_tokenWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_mem_tokenScalarFieldEnum>
  }


  /**
   * rs_mem_token findMany
   */
  export type FindManyrs_mem_tokenArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
    /**
     * Filter, which rs_mem_tokens to fetch.
    **/
    where?: rs_mem_tokenWhereInput
    /**
     * Determine the order of the rs_mem_tokens to fetch.
    **/
    orderBy?: Enumerable<rs_mem_tokenOrderByInput>
    /**
     * Sets the position for listing rs_mem_tokens.
    **/
    cursor?: rs_mem_tokenWhereUniqueInput
    /**
     * The number of rs_mem_tokens to fetch. If negative number, it will take rs_mem_tokens before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_mem_tokens.
    **/
    skip?: number
    distinct?: Enumerable<Rs_mem_tokenScalarFieldEnum>
  }


  /**
   * rs_mem_token create
   */
  export type rs_mem_tokenCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
    /**
     * The data needed to create a rs_mem_token.
    **/
    data: rs_mem_tokenCreateInput
  }


  /**
   * rs_mem_token update
   */
  export type rs_mem_tokenUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
    /**
     * The data needed to update a rs_mem_token.
    **/
    data: rs_mem_tokenUpdateInput
    /**
     * Choose, which rs_mem_token to update.
    **/
    where: rs_mem_tokenWhereUniqueInput
  }


  /**
   * rs_mem_token updateMany
   */
  export type rs_mem_tokenUpdateManyArgs = {
    data: rs_mem_tokenUpdateManyMutationInput
    where?: rs_mem_tokenWhereInput
  }


  /**
   * rs_mem_token upsert
   */
  export type rs_mem_tokenUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
    /**
     * The filter to search for the rs_mem_token to update in case it exists.
    **/
    where: rs_mem_tokenWhereUniqueInput
    /**
     * In case the rs_mem_token found by the `where` argument doesn't exist, create a new rs_mem_token with this data.
    **/
    create: rs_mem_tokenCreateInput
    /**
     * In case the rs_mem_token was found with the provided `where` argument, update it with this data.
    **/
    update: rs_mem_tokenUpdateInput
  }


  /**
   * rs_mem_token delete
   */
  export type rs_mem_tokenDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
    /**
     * Filter which rs_mem_token to delete.
    **/
    where: rs_mem_tokenWhereUniqueInput
  }


  /**
   * rs_mem_token deleteMany
   */
  export type rs_mem_tokenDeleteManyArgs = {
    where?: rs_mem_tokenWhereInput
  }


  /**
   * rs_mem_token without action
   */
  export type rs_mem_tokenArgs = {
    /**
     * Select specific fields to fetch from the rs_mem_token
    **/
    select?: rs_mem_tokenSelect | null
  }



  /**
   * Model rs_board_likebad_log
   */


  export type AggregateRs_board_likebad_log = {
    count: number | null
    avg: Rs_board_likebad_logAvgAggregateOutputType | null
    sum: Rs_board_likebad_logSumAggregateOutputType | null
    min: Rs_board_likebad_logMinAggregateOutputType | null
    max: Rs_board_likebad_logMaxAggregateOutputType | null
  }

  export type Rs_board_likebad_logAvgAggregateOutputType = {
    log_idx: number
    log_cnt_like: number | null
    log_cnt_bad: number | null
    log_update_timestemp: number
  }

  export type Rs_board_likebad_logSumAggregateOutputType = {
    log_idx: number
    log_cnt_like: number | null
    log_cnt_bad: number | null
    log_update_timestemp: number
  }

  export type Rs_board_likebad_logMinAggregateOutputType = {
    log_idx: number
    log_cnt_like: number | null
    log_cnt_bad: number | null
    log_update_datetime: string | null
    log_update_timestemp: number
  }

  export type Rs_board_likebad_logMaxAggregateOutputType = {
    log_idx: number
    log_cnt_like: number | null
    log_cnt_bad: number | null
    log_update_datetime: string | null
    log_update_timestemp: number
  }

  export type Rs_board_likebad_logCountAggregateOutputType = {
    log_idx: number
    log_cnt_like: number | null
    log_cnt_bad: number | null
    log_update_datetime: number | null
    log_update_timestemp: number
    _all: number
  }


  export type Rs_board_likebad_logAvgAggregateInputType = {
    log_idx?: true
    log_cnt_like?: true
    log_cnt_bad?: true
    log_update_timestemp?: true
  }

  export type Rs_board_likebad_logSumAggregateInputType = {
    log_idx?: true
    log_cnt_like?: true
    log_cnt_bad?: true
    log_update_timestemp?: true
  }

  export type Rs_board_likebad_logMinAggregateInputType = {
    log_idx?: true
    log_cnt_like?: true
    log_cnt_bad?: true
    log_update_datetime?: true
    log_update_timestemp?: true
  }

  export type Rs_board_likebad_logMaxAggregateInputType = {
    log_idx?: true
    log_cnt_like?: true
    log_cnt_bad?: true
    log_update_datetime?: true
    log_update_timestemp?: true
  }

  export type Rs_board_likebad_logCountAggregateInputType = {
    log_idx?: true
    log_cnt_like?: true
    log_cnt_bad?: true
    log_update_datetime?: true
    log_update_timestemp?: true
    _all?: true
  }

  export type AggregateRs_board_likebad_logArgs = {
    where?: rs_board_likebad_logWhereInput
    orderBy?: Enumerable<rs_board_likebad_logOrderByInput>
    cursor?: rs_board_likebad_logWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_board_likebad_logAvgAggregateInputType
    sum?: Rs_board_likebad_logSumAggregateInputType
    min?: Rs_board_likebad_logMinAggregateInputType
    max?: Rs_board_likebad_logMaxAggregateInputType
  }

  export type GetRs_board_likebad_logAggregateType<T extends AggregateRs_board_likebad_logArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_board_likebad_logAggregateScalarType<T[P]>
  }

  export type GetRs_board_likebad_logAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_board_likebad_logAvgAggregateOutputType ? Rs_board_likebad_logAvgAggregateOutputType[P] : never
  }

    



  export type rs_board_likebad_logSelect = {
    log_idx?: boolean
    log_cnt_like?: boolean
    log_cnt_bad?: boolean
    log_update_datetime?: boolean
    log_update_timestemp?: boolean
  }

  export type rs_board_likebad_logGetPayload<
    S extends boolean | null | undefined | rs_board_likebad_logArgs,
    U = keyof S
      > = S extends true
        ? rs_board_likebad_log
    : S extends undefined
    ? never
    : S extends rs_board_likebad_logArgs | FindManyrs_board_likebad_logArgs
    ?'include' extends U
    ? rs_board_likebad_log 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_board_likebad_log ?rs_board_likebad_log [P]
  : 
     never
  } 
    : rs_board_likebad_log
  : rs_board_likebad_log


  export interface rs_board_likebad_logDelegate {
    /**
     * Find zero or one Rs_board_likebad_log that matches the filter.
     * @param {FindUniquers_board_likebad_logArgs} args - Arguments to find a Rs_board_likebad_log
     * @example
     * // Get one Rs_board_likebad_log
     * const rs_board_likebad_log = await prisma.rs_board_likebad_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_board_likebad_logArgs>(
      args: Subset<T, FindUniquers_board_likebad_logArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_logClient<rs_board_likebad_log | null>, Prisma__rs_board_likebad_logClient<rs_board_likebad_logGetPayload<T> | null>>
    /**
     * Find the first Rs_board_likebad_log that matches the filter.
     * @param {FindFirstrs_board_likebad_logArgs} args - Arguments to find a Rs_board_likebad_log
     * @example
     * // Get one Rs_board_likebad_log
     * const rs_board_likebad_log = await prisma.rs_board_likebad_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_board_likebad_logArgs>(
      args?: Subset<T, FindFirstrs_board_likebad_logArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_logClient<rs_board_likebad_log | null>, Prisma__rs_board_likebad_logClient<rs_board_likebad_logGetPayload<T> | null>>
    /**
     * Find zero or more Rs_board_likebad_logs that matches the filter.
     * @param {FindManyrs_board_likebad_logArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_board_likebad_logs
     * const rs_board_likebad_logs = await prisma.rs_board_likebad_log.findMany()
     * 
     * // Get first 10 Rs_board_likebad_logs
     * const rs_board_likebad_logs = await prisma.rs_board_likebad_log.findMany({ take: 10 })
     * 
     * // Only select the `log_idx`
     * const rs_board_likebad_logWithLog_idxOnly = await prisma.rs_board_likebad_log.findMany({ select: { log_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_board_likebad_logArgs>(
      args?: Subset<T, FindManyrs_board_likebad_logArgs>
    ): CheckSelect<T, Promise<Array<rs_board_likebad_log>>, Promise<Array<rs_board_likebad_logGetPayload<T>>>>
    /**
     * Create a Rs_board_likebad_log.
     * @param {rs_board_likebad_logCreateArgs} args - Arguments to create a Rs_board_likebad_log.
     * @example
     * // Create one Rs_board_likebad_log
     * const Rs_board_likebad_log = await prisma.rs_board_likebad_log.create({
     *   data: {
     *     // ... data to create a Rs_board_likebad_log
     *   }
     * })
     * 
    **/
    create<T extends rs_board_likebad_logCreateArgs>(
      args: Subset<T, rs_board_likebad_logCreateArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_logClient<rs_board_likebad_log>, Prisma__rs_board_likebad_logClient<rs_board_likebad_logGetPayload<T>>>
    /**
     * Delete a Rs_board_likebad_log.
     * @param {rs_board_likebad_logDeleteArgs} args - Arguments to delete one Rs_board_likebad_log.
     * @example
     * // Delete one Rs_board_likebad_log
     * const Rs_board_likebad_log = await prisma.rs_board_likebad_log.delete({
     *   where: {
     *     // ... filter to delete one Rs_board_likebad_log
     *   }
     * })
     * 
    **/
    delete<T extends rs_board_likebad_logDeleteArgs>(
      args: Subset<T, rs_board_likebad_logDeleteArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_logClient<rs_board_likebad_log>, Prisma__rs_board_likebad_logClient<rs_board_likebad_logGetPayload<T>>>
    /**
     * Update one Rs_board_likebad_log.
     * @param {rs_board_likebad_logUpdateArgs} args - Arguments to update one Rs_board_likebad_log.
     * @example
     * // Update one Rs_board_likebad_log
     * const rs_board_likebad_log = await prisma.rs_board_likebad_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_board_likebad_logUpdateArgs>(
      args: Subset<T, rs_board_likebad_logUpdateArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_logClient<rs_board_likebad_log>, Prisma__rs_board_likebad_logClient<rs_board_likebad_logGetPayload<T>>>
    /**
     * Delete zero or more Rs_board_likebad_logs.
     * @param {rs_board_likebad_logDeleteManyArgs} args - Arguments to filter Rs_board_likebad_logs to delete.
     * @example
     * // Delete a few Rs_board_likebad_logs
     * const { count } = await prisma.rs_board_likebad_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_board_likebad_logDeleteManyArgs>(
      args?: Subset<T, rs_board_likebad_logDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_board_likebad_logs.
     * @param {rs_board_likebad_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_board_likebad_logs
     * const rs_board_likebad_log = await prisma.rs_board_likebad_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_board_likebad_logUpdateManyArgs>(
      args: Subset<T, rs_board_likebad_logUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_board_likebad_log.
     * @param {rs_board_likebad_logUpsertArgs} args - Arguments to update or create a Rs_board_likebad_log.
     * @example
     * // Update or create a Rs_board_likebad_log
     * const rs_board_likebad_log = await prisma.rs_board_likebad_log.upsert({
     *   create: {
     *     // ... data to create a Rs_board_likebad_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_board_likebad_log we want to update
     *   }
     * })
    **/
    upsert<T extends rs_board_likebad_logUpsertArgs>(
      args: Subset<T, rs_board_likebad_logUpsertArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_logClient<rs_board_likebad_log>, Prisma__rs_board_likebad_logClient<rs_board_likebad_logGetPayload<T>>>
    /**
     * Find zero or one Rs_board_likebad_log that matches the filter.
     * @param {FindUniquers_board_likebad_logArgs} args - Arguments to find a Rs_board_likebad_log
     * @deprecated This will be deprecated please use prisma.rs_board_likebad_log.findUnique
     * @example
     * // Get one Rs_board_likebad_log
     * const rs_board_likebad_log = await prisma.rs_board_likebad_log.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_board_likebad_logArgs>(
      args: Subset<T, FindUniquers_board_likebad_logArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_logClient<rs_board_likebad_log | null>, Prisma__rs_board_likebad_logClient<rs_board_likebad_logGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_board_likebad_logArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_board_likebad_logArgs>(args: Subset<T, AggregateRs_board_likebad_logArgs>): Promise<GetRs_board_likebad_logAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_board_likebad_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_board_likebad_logClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_board_likebad_log findUnique
   */
  export type FindUniquers_board_likebad_logArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
    /**
     * Filter, which rs_board_likebad_log to fetch.
    **/
    where: rs_board_likebad_logWhereUniqueInput
  }


  /**
   * rs_board_likebad_log findFirst
   */
  export type FindFirstrs_board_likebad_logArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
    /**
     * Filter, which rs_board_likebad_log to fetch.
    **/
    where?: rs_board_likebad_logWhereInput
    orderBy?: Enumerable<rs_board_likebad_logOrderByInput>
    cursor?: rs_board_likebad_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_board_likebad_logScalarFieldEnum>
  }


  /**
   * rs_board_likebad_log findMany
   */
  export type FindManyrs_board_likebad_logArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
    /**
     * Filter, which rs_board_likebad_logs to fetch.
    **/
    where?: rs_board_likebad_logWhereInput
    /**
     * Determine the order of the rs_board_likebad_logs to fetch.
    **/
    orderBy?: Enumerable<rs_board_likebad_logOrderByInput>
    /**
     * Sets the position for listing rs_board_likebad_logs.
    **/
    cursor?: rs_board_likebad_logWhereUniqueInput
    /**
     * The number of rs_board_likebad_logs to fetch. If negative number, it will take rs_board_likebad_logs before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_board_likebad_logs.
    **/
    skip?: number
    distinct?: Enumerable<Rs_board_likebad_logScalarFieldEnum>
  }


  /**
   * rs_board_likebad_log create
   */
  export type rs_board_likebad_logCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
    /**
     * The data needed to create a rs_board_likebad_log.
    **/
    data: rs_board_likebad_logCreateInput
  }


  /**
   * rs_board_likebad_log update
   */
  export type rs_board_likebad_logUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
    /**
     * The data needed to update a rs_board_likebad_log.
    **/
    data: rs_board_likebad_logUpdateInput
    /**
     * Choose, which rs_board_likebad_log to update.
    **/
    where: rs_board_likebad_logWhereUniqueInput
  }


  /**
   * rs_board_likebad_log updateMany
   */
  export type rs_board_likebad_logUpdateManyArgs = {
    data: rs_board_likebad_logUpdateManyMutationInput
    where?: rs_board_likebad_logWhereInput
  }


  /**
   * rs_board_likebad_log upsert
   */
  export type rs_board_likebad_logUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
    /**
     * The filter to search for the rs_board_likebad_log to update in case it exists.
    **/
    where: rs_board_likebad_logWhereUniqueInput
    /**
     * In case the rs_board_likebad_log found by the `where` argument doesn't exist, create a new rs_board_likebad_log with this data.
    **/
    create: rs_board_likebad_logCreateInput
    /**
     * In case the rs_board_likebad_log was found with the provided `where` argument, update it with this data.
    **/
    update: rs_board_likebad_logUpdateInput
  }


  /**
   * rs_board_likebad_log delete
   */
  export type rs_board_likebad_logDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
    /**
     * Filter which rs_board_likebad_log to delete.
    **/
    where: rs_board_likebad_logWhereUniqueInput
  }


  /**
   * rs_board_likebad_log deleteMany
   */
  export type rs_board_likebad_logDeleteManyArgs = {
    where?: rs_board_likebad_logWhereInput
  }


  /**
   * rs_board_likebad_log without action
   */
  export type rs_board_likebad_logArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_log
    **/
    select?: rs_board_likebad_logSelect | null
  }



  /**
   * Model rs_board_likebad_map
   */


  export type AggregateRs_board_likebad_map = {
    count: number | null
    avg: Rs_board_likebad_mapAvgAggregateOutputType | null
    sum: Rs_board_likebad_mapSumAggregateOutputType | null
    min: Rs_board_likebad_mapMinAggregateOutputType | null
    max: Rs_board_likebad_mapMaxAggregateOutputType | null
  }

  export type Rs_board_likebad_mapAvgAggregateOutputType = {
    blm_idx: number
    blm_user_idx: number
    blm_post_idx: number | null
    blm_cmt_idx: number | null
    blm_update_timestemp: number
    blm_cnt_like: number | null
    blm_cnt_bad: number | null
  }

  export type Rs_board_likebad_mapSumAggregateOutputType = {
    blm_idx: number
    blm_user_idx: number
    blm_post_idx: number | null
    blm_cmt_idx: number | null
    blm_update_timestemp: number
    blm_cnt_like: number | null
    blm_cnt_bad: number | null
  }

  export type Rs_board_likebad_mapMinAggregateOutputType = {
    blm_idx: number
    blm_user_idx: number
    blm_post_idx: number | null
    blm_cmt_idx: number | null
    blm_update_timestemp: number
    blm_update_datetime: string | null
    blm_cnt_like: number | null
    blm_cnt_bad: number | null
  }

  export type Rs_board_likebad_mapMaxAggregateOutputType = {
    blm_idx: number
    blm_user_idx: number
    blm_post_idx: number | null
    blm_cmt_idx: number | null
    blm_update_timestemp: number
    blm_update_datetime: string | null
    blm_cnt_like: number | null
    blm_cnt_bad: number | null
  }

  export type Rs_board_likebad_mapCountAggregateOutputType = {
    blm_idx: number
    blm_user_idx: number
    blm_post_idx: number | null
    blm_cmt_idx: number | null
    blm_update_timestemp: number
    blm_update_datetime: number | null
    blm_cnt_like: number | null
    blm_cnt_bad: number | null
    _all: number
  }


  export type Rs_board_likebad_mapAvgAggregateInputType = {
    blm_idx?: true
    blm_user_idx?: true
    blm_post_idx?: true
    blm_cmt_idx?: true
    blm_update_timestemp?: true
    blm_cnt_like?: true
    blm_cnt_bad?: true
  }

  export type Rs_board_likebad_mapSumAggregateInputType = {
    blm_idx?: true
    blm_user_idx?: true
    blm_post_idx?: true
    blm_cmt_idx?: true
    blm_update_timestemp?: true
    blm_cnt_like?: true
    blm_cnt_bad?: true
  }

  export type Rs_board_likebad_mapMinAggregateInputType = {
    blm_idx?: true
    blm_user_idx?: true
    blm_post_idx?: true
    blm_cmt_idx?: true
    blm_update_timestemp?: true
    blm_update_datetime?: true
    blm_cnt_like?: true
    blm_cnt_bad?: true
  }

  export type Rs_board_likebad_mapMaxAggregateInputType = {
    blm_idx?: true
    blm_user_idx?: true
    blm_post_idx?: true
    blm_cmt_idx?: true
    blm_update_timestemp?: true
    blm_update_datetime?: true
    blm_cnt_like?: true
    blm_cnt_bad?: true
  }

  export type Rs_board_likebad_mapCountAggregateInputType = {
    blm_idx?: true
    blm_user_idx?: true
    blm_post_idx?: true
    blm_cmt_idx?: true
    blm_update_timestemp?: true
    blm_update_datetime?: true
    blm_cnt_like?: true
    blm_cnt_bad?: true
    _all?: true
  }

  export type AggregateRs_board_likebad_mapArgs = {
    where?: rs_board_likebad_mapWhereInput
    orderBy?: Enumerable<rs_board_likebad_mapOrderByInput>
    cursor?: rs_board_likebad_mapWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_board_likebad_mapAvgAggregateInputType
    sum?: Rs_board_likebad_mapSumAggregateInputType
    min?: Rs_board_likebad_mapMinAggregateInputType
    max?: Rs_board_likebad_mapMaxAggregateInputType
  }

  export type GetRs_board_likebad_mapAggregateType<T extends AggregateRs_board_likebad_mapArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_board_likebad_mapAggregateScalarType<T[P]>
  }

  export type GetRs_board_likebad_mapAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_board_likebad_mapAvgAggregateOutputType ? Rs_board_likebad_mapAvgAggregateOutputType[P] : never
  }

    



  export type rs_board_likebad_mapSelect = {
    blm_idx?: boolean
    blm_user_idx?: boolean
    blm_post_idx?: boolean
    blm_cmt_idx?: boolean
    blm_update_timestemp?: boolean
    blm_update_datetime?: boolean
    blm_cnt_like?: boolean
    blm_cnt_bad?: boolean
    rs_board_comment?: boolean | rs_board_commentArgs
    rs_board_post?: boolean | rs_board_postArgs
  }

  export type rs_board_likebad_mapInclude = {
    rs_board_comment?: boolean | rs_board_commentArgs
    rs_board_post?: boolean | rs_board_postArgs
  }

  export type rs_board_likebad_mapGetPayload<
    S extends boolean | null | undefined | rs_board_likebad_mapArgs,
    U = keyof S
      > = S extends true
        ? rs_board_likebad_map
    : S extends undefined
    ? never
    : S extends rs_board_likebad_mapArgs | FindManyrs_board_likebad_mapArgs
    ?'include' extends U
    ? rs_board_likebad_map  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_board_comment'
        ? rs_board_commentGetPayload<S['include'][P]> | null :
        P extends 'rs_board_post'
        ? rs_board_postGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_board_likebad_map ?rs_board_likebad_map [P]
  : 
          P extends 'rs_board_comment'
        ? rs_board_commentGetPayload<S['select'][P]> | null :
        P extends 'rs_board_post'
        ? rs_board_postGetPayload<S['select'][P]> | null : never
  } 
    : rs_board_likebad_map
  : rs_board_likebad_map


  export interface rs_board_likebad_mapDelegate {
    /**
     * Find zero or one Rs_board_likebad_map that matches the filter.
     * @param {FindUniquers_board_likebad_mapArgs} args - Arguments to find a Rs_board_likebad_map
     * @example
     * // Get one Rs_board_likebad_map
     * const rs_board_likebad_map = await prisma.rs_board_likebad_map.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_board_likebad_mapArgs>(
      args: Subset<T, FindUniquers_board_likebad_mapArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_mapClient<rs_board_likebad_map | null>, Prisma__rs_board_likebad_mapClient<rs_board_likebad_mapGetPayload<T> | null>>
    /**
     * Find the first Rs_board_likebad_map that matches the filter.
     * @param {FindFirstrs_board_likebad_mapArgs} args - Arguments to find a Rs_board_likebad_map
     * @example
     * // Get one Rs_board_likebad_map
     * const rs_board_likebad_map = await prisma.rs_board_likebad_map.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_board_likebad_mapArgs>(
      args?: Subset<T, FindFirstrs_board_likebad_mapArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_mapClient<rs_board_likebad_map | null>, Prisma__rs_board_likebad_mapClient<rs_board_likebad_mapGetPayload<T> | null>>
    /**
     * Find zero or more Rs_board_likebad_maps that matches the filter.
     * @param {FindManyrs_board_likebad_mapArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_board_likebad_maps
     * const rs_board_likebad_maps = await prisma.rs_board_likebad_map.findMany()
     * 
     * // Get first 10 Rs_board_likebad_maps
     * const rs_board_likebad_maps = await prisma.rs_board_likebad_map.findMany({ take: 10 })
     * 
     * // Only select the `blm_idx`
     * const rs_board_likebad_mapWithBlm_idxOnly = await prisma.rs_board_likebad_map.findMany({ select: { blm_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_board_likebad_mapArgs>(
      args?: Subset<T, FindManyrs_board_likebad_mapArgs>
    ): CheckSelect<T, Promise<Array<rs_board_likebad_map>>, Promise<Array<rs_board_likebad_mapGetPayload<T>>>>
    /**
     * Create a Rs_board_likebad_map.
     * @param {rs_board_likebad_mapCreateArgs} args - Arguments to create a Rs_board_likebad_map.
     * @example
     * // Create one Rs_board_likebad_map
     * const Rs_board_likebad_map = await prisma.rs_board_likebad_map.create({
     *   data: {
     *     // ... data to create a Rs_board_likebad_map
     *   }
     * })
     * 
    **/
    create<T extends rs_board_likebad_mapCreateArgs>(
      args: Subset<T, rs_board_likebad_mapCreateArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_mapClient<rs_board_likebad_map>, Prisma__rs_board_likebad_mapClient<rs_board_likebad_mapGetPayload<T>>>
    /**
     * Delete a Rs_board_likebad_map.
     * @param {rs_board_likebad_mapDeleteArgs} args - Arguments to delete one Rs_board_likebad_map.
     * @example
     * // Delete one Rs_board_likebad_map
     * const Rs_board_likebad_map = await prisma.rs_board_likebad_map.delete({
     *   where: {
     *     // ... filter to delete one Rs_board_likebad_map
     *   }
     * })
     * 
    **/
    delete<T extends rs_board_likebad_mapDeleteArgs>(
      args: Subset<T, rs_board_likebad_mapDeleteArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_mapClient<rs_board_likebad_map>, Prisma__rs_board_likebad_mapClient<rs_board_likebad_mapGetPayload<T>>>
    /**
     * Update one Rs_board_likebad_map.
     * @param {rs_board_likebad_mapUpdateArgs} args - Arguments to update one Rs_board_likebad_map.
     * @example
     * // Update one Rs_board_likebad_map
     * const rs_board_likebad_map = await prisma.rs_board_likebad_map.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_board_likebad_mapUpdateArgs>(
      args: Subset<T, rs_board_likebad_mapUpdateArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_mapClient<rs_board_likebad_map>, Prisma__rs_board_likebad_mapClient<rs_board_likebad_mapGetPayload<T>>>
    /**
     * Delete zero or more Rs_board_likebad_maps.
     * @param {rs_board_likebad_mapDeleteManyArgs} args - Arguments to filter Rs_board_likebad_maps to delete.
     * @example
     * // Delete a few Rs_board_likebad_maps
     * const { count } = await prisma.rs_board_likebad_map.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_board_likebad_mapDeleteManyArgs>(
      args?: Subset<T, rs_board_likebad_mapDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_board_likebad_maps.
     * @param {rs_board_likebad_mapUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_board_likebad_maps
     * const rs_board_likebad_map = await prisma.rs_board_likebad_map.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_board_likebad_mapUpdateManyArgs>(
      args: Subset<T, rs_board_likebad_mapUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_board_likebad_map.
     * @param {rs_board_likebad_mapUpsertArgs} args - Arguments to update or create a Rs_board_likebad_map.
     * @example
     * // Update or create a Rs_board_likebad_map
     * const rs_board_likebad_map = await prisma.rs_board_likebad_map.upsert({
     *   create: {
     *     // ... data to create a Rs_board_likebad_map
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_board_likebad_map we want to update
     *   }
     * })
    **/
    upsert<T extends rs_board_likebad_mapUpsertArgs>(
      args: Subset<T, rs_board_likebad_mapUpsertArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_mapClient<rs_board_likebad_map>, Prisma__rs_board_likebad_mapClient<rs_board_likebad_mapGetPayload<T>>>
    /**
     * Find zero or one Rs_board_likebad_map that matches the filter.
     * @param {FindUniquers_board_likebad_mapArgs} args - Arguments to find a Rs_board_likebad_map
     * @deprecated This will be deprecated please use prisma.rs_board_likebad_map.findUnique
     * @example
     * // Get one Rs_board_likebad_map
     * const rs_board_likebad_map = await prisma.rs_board_likebad_map.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_board_likebad_mapArgs>(
      args: Subset<T, FindUniquers_board_likebad_mapArgs>
    ): CheckSelect<T, Prisma__rs_board_likebad_mapClient<rs_board_likebad_map | null>, Prisma__rs_board_likebad_mapClient<rs_board_likebad_mapGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_board_likebad_mapArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_board_likebad_mapArgs>(args: Subset<T, AggregateRs_board_likebad_mapArgs>): Promise<GetRs_board_likebad_mapAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_board_likebad_map.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_board_likebad_mapClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_board_comment<T extends rs_board_commentArgs = {}>(args?: Subset<T, rs_board_commentArgs>): CheckSelect<T, Prisma__rs_board_commentClient<rs_board_comment | null>, Prisma__rs_board_commentClient<rs_board_commentGetPayload<T> | null>>;

    rs_board_post<T extends rs_board_postArgs = {}>(args?: Subset<T, rs_board_postArgs>): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post | null>, Prisma__rs_board_postClient<rs_board_postGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_board_likebad_map findUnique
   */
  export type FindUniquers_board_likebad_mapArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
    /**
     * Filter, which rs_board_likebad_map to fetch.
    **/
    where: rs_board_likebad_mapWhereUniqueInput
  }


  /**
   * rs_board_likebad_map findFirst
   */
  export type FindFirstrs_board_likebad_mapArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
    /**
     * Filter, which rs_board_likebad_map to fetch.
    **/
    where?: rs_board_likebad_mapWhereInput
    orderBy?: Enumerable<rs_board_likebad_mapOrderByInput>
    cursor?: rs_board_likebad_mapWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_board_likebad_mapScalarFieldEnum>
  }


  /**
   * rs_board_likebad_map findMany
   */
  export type FindManyrs_board_likebad_mapArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
    /**
     * Filter, which rs_board_likebad_maps to fetch.
    **/
    where?: rs_board_likebad_mapWhereInput
    /**
     * Determine the order of the rs_board_likebad_maps to fetch.
    **/
    orderBy?: Enumerable<rs_board_likebad_mapOrderByInput>
    /**
     * Sets the position for listing rs_board_likebad_maps.
    **/
    cursor?: rs_board_likebad_mapWhereUniqueInput
    /**
     * The number of rs_board_likebad_maps to fetch. If negative number, it will take rs_board_likebad_maps before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_board_likebad_maps.
    **/
    skip?: number
    distinct?: Enumerable<Rs_board_likebad_mapScalarFieldEnum>
  }


  /**
   * rs_board_likebad_map create
   */
  export type rs_board_likebad_mapCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
    /**
     * The data needed to create a rs_board_likebad_map.
    **/
    data: rs_board_likebad_mapCreateInput
  }


  /**
   * rs_board_likebad_map update
   */
  export type rs_board_likebad_mapUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
    /**
     * The data needed to update a rs_board_likebad_map.
    **/
    data: rs_board_likebad_mapUpdateInput
    /**
     * Choose, which rs_board_likebad_map to update.
    **/
    where: rs_board_likebad_mapWhereUniqueInput
  }


  /**
   * rs_board_likebad_map updateMany
   */
  export type rs_board_likebad_mapUpdateManyArgs = {
    data: rs_board_likebad_mapUpdateManyMutationInput
    where?: rs_board_likebad_mapWhereInput
  }


  /**
   * rs_board_likebad_map upsert
   */
  export type rs_board_likebad_mapUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
    /**
     * The filter to search for the rs_board_likebad_map to update in case it exists.
    **/
    where: rs_board_likebad_mapWhereUniqueInput
    /**
     * In case the rs_board_likebad_map found by the `where` argument doesn't exist, create a new rs_board_likebad_map with this data.
    **/
    create: rs_board_likebad_mapCreateInput
    /**
     * In case the rs_board_likebad_map was found with the provided `where` argument, update it with this data.
    **/
    update: rs_board_likebad_mapUpdateInput
  }


  /**
   * rs_board_likebad_map delete
   */
  export type rs_board_likebad_mapDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
    /**
     * Filter which rs_board_likebad_map to delete.
    **/
    where: rs_board_likebad_mapWhereUniqueInput
  }


  /**
   * rs_board_likebad_map deleteMany
   */
  export type rs_board_likebad_mapDeleteManyArgs = {
    where?: rs_board_likebad_mapWhereInput
  }


  /**
   * rs_board_likebad_map without action
   */
  export type rs_board_likebad_mapArgs = {
    /**
     * Select specific fields to fetch from the rs_board_likebad_map
    **/
    select?: rs_board_likebad_mapSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_board_likebad_mapInclude | null
  }



  /**
   * Model rs_note
   */


  export type AggregateRs_note = {
    count: number | null
    avg: Rs_noteAvgAggregateOutputType | null
    sum: Rs_noteSumAggregateOutputType | null
    min: Rs_noteMinAggregateOutputType | null
    max: Rs_noteMaxAggregateOutputType | null
  }

  export type Rs_noteAvgAggregateOutputType = {
    not_idx: number
    not_recv_id: number | null
    not_send_id: number | null
    not_type: number
    not_relate_post_idx: number | null
    not_timestemp: number
  }

  export type Rs_noteSumAggregateOutputType = {
    not_idx: number
    not_recv_id: number | null
    not_send_id: number | null
    not_type: number
    not_relate_post_idx: number | null
    not_timestemp: number
  }

  export type Rs_noteMinAggregateOutputType = {
    not_idx: number
    not_recv_id: number | null
    not_send_id: number | null
    not_type: number
    not_title: string | null
    not_relate_post_idx: number | null
    not_content: string | null
    not_datetime: string | null
    not_timestemp: number
  }

  export type Rs_noteMaxAggregateOutputType = {
    not_idx: number
    not_recv_id: number | null
    not_send_id: number | null
    not_type: number
    not_title: string | null
    not_relate_post_idx: number | null
    not_content: string | null
    not_datetime: string | null
    not_timestemp: number
  }

  export type Rs_noteCountAggregateOutputType = {
    not_idx: number
    not_recv_id: number | null
    not_send_id: number | null
    not_type: number
    not_title: number | null
    not_relate_post_idx: number | null
    not_content: number | null
    not_datetime: number | null
    not_timestemp: number
    _all: number
  }


  export type Rs_noteAvgAggregateInputType = {
    not_idx?: true
    not_recv_id?: true
    not_send_id?: true
    not_type?: true
    not_relate_post_idx?: true
    not_timestemp?: true
  }

  export type Rs_noteSumAggregateInputType = {
    not_idx?: true
    not_recv_id?: true
    not_send_id?: true
    not_type?: true
    not_relate_post_idx?: true
    not_timestemp?: true
  }

  export type Rs_noteMinAggregateInputType = {
    not_idx?: true
    not_recv_id?: true
    not_send_id?: true
    not_type?: true
    not_title?: true
    not_relate_post_idx?: true
    not_content?: true
    not_datetime?: true
    not_timestemp?: true
  }

  export type Rs_noteMaxAggregateInputType = {
    not_idx?: true
    not_recv_id?: true
    not_send_id?: true
    not_type?: true
    not_title?: true
    not_relate_post_idx?: true
    not_content?: true
    not_datetime?: true
    not_timestemp?: true
  }

  export type Rs_noteCountAggregateInputType = {
    not_idx?: true
    not_recv_id?: true
    not_send_id?: true
    not_type?: true
    not_title?: true
    not_relate_post_idx?: true
    not_content?: true
    not_datetime?: true
    not_timestemp?: true
    _all?: true
  }

  export type AggregateRs_noteArgs = {
    where?: rs_noteWhereInput
    orderBy?: Enumerable<rs_noteOrderByInput>
    cursor?: rs_noteWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_noteAvgAggregateInputType
    sum?: Rs_noteSumAggregateInputType
    min?: Rs_noteMinAggregateInputType
    max?: Rs_noteMaxAggregateInputType
  }

  export type GetRs_noteAggregateType<T extends AggregateRs_noteArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_noteAggregateScalarType<T[P]>
  }

  export type GetRs_noteAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_noteAvgAggregateOutputType ? Rs_noteAvgAggregateOutputType[P] : never
  }

    



  export type rs_noteSelect = {
    not_idx?: boolean
    not_recv_id?: boolean
    not_send_id?: boolean
    not_type?: boolean
    not_title?: boolean
    not_relate_post_idx?: boolean
    not_content?: boolean
    not_datetime?: boolean
    not_timestemp?: boolean
    rs_member_rs_memberTors_note_not_recv_id?: boolean | rs_memberArgs
    rs_board_post?: boolean | rs_board_postArgs
    rs_member_rs_memberTors_note_not_send_id?: boolean | rs_memberArgs
  }

  export type rs_noteInclude = {
    rs_member_rs_memberTors_note_not_recv_id?: boolean | rs_memberArgs
    rs_board_post?: boolean | rs_board_postArgs
    rs_member_rs_memberTors_note_not_send_id?: boolean | rs_memberArgs
  }

  export type rs_noteGetPayload<
    S extends boolean | null | undefined | rs_noteArgs,
    U = keyof S
      > = S extends true
        ? rs_note
    : S extends undefined
    ? never
    : S extends rs_noteArgs | FindManyrs_noteArgs
    ?'include' extends U
    ? rs_note  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'rs_member_rs_memberTors_note_not_recv_id'
        ? rs_memberGetPayload<S['include'][P]> | null :
        P extends 'rs_board_post'
        ? rs_board_postGetPayload<S['include'][P]> | null :
        P extends 'rs_member_rs_memberTors_note_not_send_id'
        ? rs_memberGetPayload<S['include'][P]> | null : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_note ?rs_note [P]
  : 
          P extends 'rs_member_rs_memberTors_note_not_recv_id'
        ? rs_memberGetPayload<S['select'][P]> | null :
        P extends 'rs_board_post'
        ? rs_board_postGetPayload<S['select'][P]> | null :
        P extends 'rs_member_rs_memberTors_note_not_send_id'
        ? rs_memberGetPayload<S['select'][P]> | null : never
  } 
    : rs_note
  : rs_note


  export interface rs_noteDelegate {
    /**
     * Find zero or one Rs_note that matches the filter.
     * @param {FindUniquers_noteArgs} args - Arguments to find a Rs_note
     * @example
     * // Get one Rs_note
     * const rs_note = await prisma.rs_note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_noteArgs>(
      args: Subset<T, FindUniquers_noteArgs>
    ): CheckSelect<T, Prisma__rs_noteClient<rs_note | null>, Prisma__rs_noteClient<rs_noteGetPayload<T> | null>>
    /**
     * Find the first Rs_note that matches the filter.
     * @param {FindFirstrs_noteArgs} args - Arguments to find a Rs_note
     * @example
     * // Get one Rs_note
     * const rs_note = await prisma.rs_note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_noteArgs>(
      args?: Subset<T, FindFirstrs_noteArgs>
    ): CheckSelect<T, Prisma__rs_noteClient<rs_note | null>, Prisma__rs_noteClient<rs_noteGetPayload<T> | null>>
    /**
     * Find zero or more Rs_notes that matches the filter.
     * @param {FindManyrs_noteArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_notes
     * const rs_notes = await prisma.rs_note.findMany()
     * 
     * // Get first 10 Rs_notes
     * const rs_notes = await prisma.rs_note.findMany({ take: 10 })
     * 
     * // Only select the `not_idx`
     * const rs_noteWithNot_idxOnly = await prisma.rs_note.findMany({ select: { not_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_noteArgs>(
      args?: Subset<T, FindManyrs_noteArgs>
    ): CheckSelect<T, Promise<Array<rs_note>>, Promise<Array<rs_noteGetPayload<T>>>>
    /**
     * Create a Rs_note.
     * @param {rs_noteCreateArgs} args - Arguments to create a Rs_note.
     * @example
     * // Create one Rs_note
     * const Rs_note = await prisma.rs_note.create({
     *   data: {
     *     // ... data to create a Rs_note
     *   }
     * })
     * 
    **/
    create<T extends rs_noteCreateArgs>(
      args: Subset<T, rs_noteCreateArgs>
    ): CheckSelect<T, Prisma__rs_noteClient<rs_note>, Prisma__rs_noteClient<rs_noteGetPayload<T>>>
    /**
     * Delete a Rs_note.
     * @param {rs_noteDeleteArgs} args - Arguments to delete one Rs_note.
     * @example
     * // Delete one Rs_note
     * const Rs_note = await prisma.rs_note.delete({
     *   where: {
     *     // ... filter to delete one Rs_note
     *   }
     * })
     * 
    **/
    delete<T extends rs_noteDeleteArgs>(
      args: Subset<T, rs_noteDeleteArgs>
    ): CheckSelect<T, Prisma__rs_noteClient<rs_note>, Prisma__rs_noteClient<rs_noteGetPayload<T>>>
    /**
     * Update one Rs_note.
     * @param {rs_noteUpdateArgs} args - Arguments to update one Rs_note.
     * @example
     * // Update one Rs_note
     * const rs_note = await prisma.rs_note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_noteUpdateArgs>(
      args: Subset<T, rs_noteUpdateArgs>
    ): CheckSelect<T, Prisma__rs_noteClient<rs_note>, Prisma__rs_noteClient<rs_noteGetPayload<T>>>
    /**
     * Delete zero or more Rs_notes.
     * @param {rs_noteDeleteManyArgs} args - Arguments to filter Rs_notes to delete.
     * @example
     * // Delete a few Rs_notes
     * const { count } = await prisma.rs_note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_noteDeleteManyArgs>(
      args?: Subset<T, rs_noteDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_notes.
     * @param {rs_noteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_notes
     * const rs_note = await prisma.rs_note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_noteUpdateManyArgs>(
      args: Subset<T, rs_noteUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_note.
     * @param {rs_noteUpsertArgs} args - Arguments to update or create a Rs_note.
     * @example
     * // Update or create a Rs_note
     * const rs_note = await prisma.rs_note.upsert({
     *   create: {
     *     // ... data to create a Rs_note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_note we want to update
     *   }
     * })
    **/
    upsert<T extends rs_noteUpsertArgs>(
      args: Subset<T, rs_noteUpsertArgs>
    ): CheckSelect<T, Prisma__rs_noteClient<rs_note>, Prisma__rs_noteClient<rs_noteGetPayload<T>>>
    /**
     * Find zero or one Rs_note that matches the filter.
     * @param {FindUniquers_noteArgs} args - Arguments to find a Rs_note
     * @deprecated This will be deprecated please use prisma.rs_note.findUnique
     * @example
     * // Get one Rs_note
     * const rs_note = await prisma.rs_note.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_noteArgs>(
      args: Subset<T, FindUniquers_noteArgs>
    ): CheckSelect<T, Prisma__rs_noteClient<rs_note | null>, Prisma__rs_noteClient<rs_noteGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_noteArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_noteArgs>(args: Subset<T, AggregateRs_noteArgs>): Promise<GetRs_noteAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_noteClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    rs_member_rs_memberTors_note_not_recv_id<T extends rs_memberArgs = {}>(args?: Subset<T, rs_memberArgs>): CheckSelect<T, Prisma__rs_memberClient<rs_member | null>, Prisma__rs_memberClient<rs_memberGetPayload<T> | null>>;

    rs_board_post<T extends rs_board_postArgs = {}>(args?: Subset<T, rs_board_postArgs>): CheckSelect<T, Prisma__rs_board_postClient<rs_board_post | null>, Prisma__rs_board_postClient<rs_board_postGetPayload<T> | null>>;

    rs_member_rs_memberTors_note_not_send_id<T extends rs_memberArgs = {}>(args?: Subset<T, rs_memberArgs>): CheckSelect<T, Prisma__rs_memberClient<rs_member | null>, Prisma__rs_memberClient<rs_memberGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_note findUnique
   */
  export type FindUniquers_noteArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
    /**
     * Filter, which rs_note to fetch.
    **/
    where: rs_noteWhereUniqueInput
  }


  /**
   * rs_note findFirst
   */
  export type FindFirstrs_noteArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
    /**
     * Filter, which rs_note to fetch.
    **/
    where?: rs_noteWhereInput
    orderBy?: Enumerable<rs_noteOrderByInput>
    cursor?: rs_noteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_noteScalarFieldEnum>
  }


  /**
   * rs_note findMany
   */
  export type FindManyrs_noteArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
    /**
     * Filter, which rs_notes to fetch.
    **/
    where?: rs_noteWhereInput
    /**
     * Determine the order of the rs_notes to fetch.
    **/
    orderBy?: Enumerable<rs_noteOrderByInput>
    /**
     * Sets the position for listing rs_notes.
    **/
    cursor?: rs_noteWhereUniqueInput
    /**
     * The number of rs_notes to fetch. If negative number, it will take rs_notes before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_notes.
    **/
    skip?: number
    distinct?: Enumerable<Rs_noteScalarFieldEnum>
  }


  /**
   * rs_note create
   */
  export type rs_noteCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
    /**
     * The data needed to create a rs_note.
    **/
    data: rs_noteCreateInput
  }


  /**
   * rs_note update
   */
  export type rs_noteUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
    /**
     * The data needed to update a rs_note.
    **/
    data: rs_noteUpdateInput
    /**
     * Choose, which rs_note to update.
    **/
    where: rs_noteWhereUniqueInput
  }


  /**
   * rs_note updateMany
   */
  export type rs_noteUpdateManyArgs = {
    data: rs_noteUpdateManyMutationInput
    where?: rs_noteWhereInput
  }


  /**
   * rs_note upsert
   */
  export type rs_noteUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
    /**
     * The filter to search for the rs_note to update in case it exists.
    **/
    where: rs_noteWhereUniqueInput
    /**
     * In case the rs_note found by the `where` argument doesn't exist, create a new rs_note with this data.
    **/
    create: rs_noteCreateInput
    /**
     * In case the rs_note was found with the provided `where` argument, update it with this data.
    **/
    update: rs_noteUpdateInput
  }


  /**
   * rs_note delete
   */
  export type rs_noteDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
    /**
     * Filter which rs_note to delete.
    **/
    where: rs_noteWhereUniqueInput
  }


  /**
   * rs_note deleteMany
   */
  export type rs_noteDeleteManyArgs = {
    where?: rs_noteWhereInput
  }


  /**
   * rs_note without action
   */
  export type rs_noteArgs = {
    /**
     * Select specific fields to fetch from the rs_note
    **/
    select?: rs_noteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: rs_noteInclude | null
  }



  /**
   * Model rs_board_admin
   */


  export type AggregateRs_board_admin = {
    count: number | null
    avg: Rs_board_adminAvgAggregateOutputType | null
    sum: Rs_board_adminSumAggregateOutputType | null
    min: Rs_board_adminMinAggregateOutputType | null
    max: Rs_board_adminMaxAggregateOutputType | null
  }

  export type Rs_board_adminAvgAggregateOutputType = {
    adm_idx: number
    adm_mem_idx: number
  }

  export type Rs_board_adminSumAggregateOutputType = {
    adm_idx: number
    adm_mem_idx: number
  }

  export type Rs_board_adminMinAggregateOutputType = {
    adm_idx: number
    adm_mem_idx: number
    adm_mem_id: string | null
  }

  export type Rs_board_adminMaxAggregateOutputType = {
    adm_idx: number
    adm_mem_idx: number
    adm_mem_id: string | null
  }

  export type Rs_board_adminCountAggregateOutputType = {
    adm_idx: number
    adm_mem_idx: number
    adm_mem_id: number | null
    _all: number
  }


  export type Rs_board_adminAvgAggregateInputType = {
    adm_idx?: true
    adm_mem_idx?: true
  }

  export type Rs_board_adminSumAggregateInputType = {
    adm_idx?: true
    adm_mem_idx?: true
  }

  export type Rs_board_adminMinAggregateInputType = {
    adm_idx?: true
    adm_mem_idx?: true
    adm_mem_id?: true
  }

  export type Rs_board_adminMaxAggregateInputType = {
    adm_idx?: true
    adm_mem_idx?: true
    adm_mem_id?: true
  }

  export type Rs_board_adminCountAggregateInputType = {
    adm_idx?: true
    adm_mem_idx?: true
    adm_mem_id?: true
    _all?: true
  }

  export type AggregateRs_board_adminArgs = {
    where?: rs_board_adminWhereInput
    orderBy?: Enumerable<rs_board_adminOrderByInput>
    cursor?: rs_board_adminWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_board_adminAvgAggregateInputType
    sum?: Rs_board_adminSumAggregateInputType
    min?: Rs_board_adminMinAggregateInputType
    max?: Rs_board_adminMaxAggregateInputType
  }

  export type GetRs_board_adminAggregateType<T extends AggregateRs_board_adminArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_board_adminAggregateScalarType<T[P]>
  }

  export type GetRs_board_adminAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_board_adminAvgAggregateOutputType ? Rs_board_adminAvgAggregateOutputType[P] : never
  }

    



  export type rs_board_adminSelect = {
    adm_idx?: boolean
    adm_mem_idx?: boolean
    adm_mem_id?: boolean
  }

  export type rs_board_adminGetPayload<
    S extends boolean | null | undefined | rs_board_adminArgs,
    U = keyof S
      > = S extends true
        ? rs_board_admin
    : S extends undefined
    ? never
    : S extends rs_board_adminArgs | FindManyrs_board_adminArgs
    ?'include' extends U
    ? rs_board_admin 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_board_admin ?rs_board_admin [P]
  : 
     never
  } 
    : rs_board_admin
  : rs_board_admin


  export interface rs_board_adminDelegate {
    /**
     * Find zero or one Rs_board_admin that matches the filter.
     * @param {FindUniquers_board_adminArgs} args - Arguments to find a Rs_board_admin
     * @example
     * // Get one Rs_board_admin
     * const rs_board_admin = await prisma.rs_board_admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_board_adminArgs>(
      args: Subset<T, FindUniquers_board_adminArgs>
    ): CheckSelect<T, Prisma__rs_board_adminClient<rs_board_admin | null>, Prisma__rs_board_adminClient<rs_board_adminGetPayload<T> | null>>
    /**
     * Find the first Rs_board_admin that matches the filter.
     * @param {FindFirstrs_board_adminArgs} args - Arguments to find a Rs_board_admin
     * @example
     * // Get one Rs_board_admin
     * const rs_board_admin = await prisma.rs_board_admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_board_adminArgs>(
      args?: Subset<T, FindFirstrs_board_adminArgs>
    ): CheckSelect<T, Prisma__rs_board_adminClient<rs_board_admin | null>, Prisma__rs_board_adminClient<rs_board_adminGetPayload<T> | null>>
    /**
     * Find zero or more Rs_board_admins that matches the filter.
     * @param {FindManyrs_board_adminArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_board_admins
     * const rs_board_admins = await prisma.rs_board_admin.findMany()
     * 
     * // Get first 10 Rs_board_admins
     * const rs_board_admins = await prisma.rs_board_admin.findMany({ take: 10 })
     * 
     * // Only select the `adm_idx`
     * const rs_board_adminWithAdm_idxOnly = await prisma.rs_board_admin.findMany({ select: { adm_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_board_adminArgs>(
      args?: Subset<T, FindManyrs_board_adminArgs>
    ): CheckSelect<T, Promise<Array<rs_board_admin>>, Promise<Array<rs_board_adminGetPayload<T>>>>
    /**
     * Create a Rs_board_admin.
     * @param {rs_board_adminCreateArgs} args - Arguments to create a Rs_board_admin.
     * @example
     * // Create one Rs_board_admin
     * const Rs_board_admin = await prisma.rs_board_admin.create({
     *   data: {
     *     // ... data to create a Rs_board_admin
     *   }
     * })
     * 
    **/
    create<T extends rs_board_adminCreateArgs>(
      args: Subset<T, rs_board_adminCreateArgs>
    ): CheckSelect<T, Prisma__rs_board_adminClient<rs_board_admin>, Prisma__rs_board_adminClient<rs_board_adminGetPayload<T>>>
    /**
     * Delete a Rs_board_admin.
     * @param {rs_board_adminDeleteArgs} args - Arguments to delete one Rs_board_admin.
     * @example
     * // Delete one Rs_board_admin
     * const Rs_board_admin = await prisma.rs_board_admin.delete({
     *   where: {
     *     // ... filter to delete one Rs_board_admin
     *   }
     * })
     * 
    **/
    delete<T extends rs_board_adminDeleteArgs>(
      args: Subset<T, rs_board_adminDeleteArgs>
    ): CheckSelect<T, Prisma__rs_board_adminClient<rs_board_admin>, Prisma__rs_board_adminClient<rs_board_adminGetPayload<T>>>
    /**
     * Update one Rs_board_admin.
     * @param {rs_board_adminUpdateArgs} args - Arguments to update one Rs_board_admin.
     * @example
     * // Update one Rs_board_admin
     * const rs_board_admin = await prisma.rs_board_admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_board_adminUpdateArgs>(
      args: Subset<T, rs_board_adminUpdateArgs>
    ): CheckSelect<T, Prisma__rs_board_adminClient<rs_board_admin>, Prisma__rs_board_adminClient<rs_board_adminGetPayload<T>>>
    /**
     * Delete zero or more Rs_board_admins.
     * @param {rs_board_adminDeleteManyArgs} args - Arguments to filter Rs_board_admins to delete.
     * @example
     * // Delete a few Rs_board_admins
     * const { count } = await prisma.rs_board_admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_board_adminDeleteManyArgs>(
      args?: Subset<T, rs_board_adminDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_board_admins.
     * @param {rs_board_adminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_board_admins
     * const rs_board_admin = await prisma.rs_board_admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_board_adminUpdateManyArgs>(
      args: Subset<T, rs_board_adminUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_board_admin.
     * @param {rs_board_adminUpsertArgs} args - Arguments to update or create a Rs_board_admin.
     * @example
     * // Update or create a Rs_board_admin
     * const rs_board_admin = await prisma.rs_board_admin.upsert({
     *   create: {
     *     // ... data to create a Rs_board_admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_board_admin we want to update
     *   }
     * })
    **/
    upsert<T extends rs_board_adminUpsertArgs>(
      args: Subset<T, rs_board_adminUpsertArgs>
    ): CheckSelect<T, Prisma__rs_board_adminClient<rs_board_admin>, Prisma__rs_board_adminClient<rs_board_adminGetPayload<T>>>
    /**
     * Find zero or one Rs_board_admin that matches the filter.
     * @param {FindUniquers_board_adminArgs} args - Arguments to find a Rs_board_admin
     * @deprecated This will be deprecated please use prisma.rs_board_admin.findUnique
     * @example
     * // Get one Rs_board_admin
     * const rs_board_admin = await prisma.rs_board_admin.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_board_adminArgs>(
      args: Subset<T, FindUniquers_board_adminArgs>
    ): CheckSelect<T, Prisma__rs_board_adminClient<rs_board_admin | null>, Prisma__rs_board_adminClient<rs_board_adminGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_board_adminArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_board_adminArgs>(args: Subset<T, AggregateRs_board_adminArgs>): Promise<GetRs_board_adminAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_board_admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_board_adminClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_board_admin findUnique
   */
  export type FindUniquers_board_adminArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
    /**
     * Filter, which rs_board_admin to fetch.
    **/
    where: rs_board_adminWhereUniqueInput
  }


  /**
   * rs_board_admin findFirst
   */
  export type FindFirstrs_board_adminArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
    /**
     * Filter, which rs_board_admin to fetch.
    **/
    where?: rs_board_adminWhereInput
    orderBy?: Enumerable<rs_board_adminOrderByInput>
    cursor?: rs_board_adminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_board_adminScalarFieldEnum>
  }


  /**
   * rs_board_admin findMany
   */
  export type FindManyrs_board_adminArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
    /**
     * Filter, which rs_board_admins to fetch.
    **/
    where?: rs_board_adminWhereInput
    /**
     * Determine the order of the rs_board_admins to fetch.
    **/
    orderBy?: Enumerable<rs_board_adminOrderByInput>
    /**
     * Sets the position for listing rs_board_admins.
    **/
    cursor?: rs_board_adminWhereUniqueInput
    /**
     * The number of rs_board_admins to fetch. If negative number, it will take rs_board_admins before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_board_admins.
    **/
    skip?: number
    distinct?: Enumerable<Rs_board_adminScalarFieldEnum>
  }


  /**
   * rs_board_admin create
   */
  export type rs_board_adminCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
    /**
     * The data needed to create a rs_board_admin.
    **/
    data: rs_board_adminCreateInput
  }


  /**
   * rs_board_admin update
   */
  export type rs_board_adminUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
    /**
     * The data needed to update a rs_board_admin.
    **/
    data: rs_board_adminUpdateInput
    /**
     * Choose, which rs_board_admin to update.
    **/
    where: rs_board_adminWhereUniqueInput
  }


  /**
   * rs_board_admin updateMany
   */
  export type rs_board_adminUpdateManyArgs = {
    data: rs_board_adminUpdateManyMutationInput
    where?: rs_board_adminWhereInput
  }


  /**
   * rs_board_admin upsert
   */
  export type rs_board_adminUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
    /**
     * The filter to search for the rs_board_admin to update in case it exists.
    **/
    where: rs_board_adminWhereUniqueInput
    /**
     * In case the rs_board_admin found by the `where` argument doesn't exist, create a new rs_board_admin with this data.
    **/
    create: rs_board_adminCreateInput
    /**
     * In case the rs_board_admin was found with the provided `where` argument, update it with this data.
    **/
    update: rs_board_adminUpdateInput
  }


  /**
   * rs_board_admin delete
   */
  export type rs_board_adminDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
    /**
     * Filter which rs_board_admin to delete.
    **/
    where: rs_board_adminWhereUniqueInput
  }


  /**
   * rs_board_admin deleteMany
   */
  export type rs_board_adminDeleteManyArgs = {
    where?: rs_board_adminWhereInput
  }


  /**
   * rs_board_admin without action
   */
  export type rs_board_adminArgs = {
    /**
     * Select specific fields to fetch from the rs_board_admin
    **/
    select?: rs_board_adminSelect | null
  }



  /**
   * Model pris_member
   */


  export type AggregatePris_member = {
    count: number | null
    avg: Pris_memberAvgAggregateOutputType | null
    sum: Pris_memberSumAggregateOutputType | null
    min: Pris_memberMinAggregateOutputType | null
    max: Pris_memberMaxAggregateOutputType | null
  }

  export type Pris_memberAvgAggregateOutputType = {
    mem_idx: number
  }

  export type Pris_memberSumAggregateOutputType = {
    mem_idx: number
  }

  export type Pris_memberMinAggregateOutputType = {
    mem_idx: number
    mem_email: string | null
    mem_password: string | null
  }

  export type Pris_memberMaxAggregateOutputType = {
    mem_idx: number
    mem_email: string | null
    mem_password: string | null
  }

  export type Pris_memberCountAggregateOutputType = {
    mem_idx: number
    mem_email: number | null
    mem_password: number | null
    _all: number
  }


  export type Pris_memberAvgAggregateInputType = {
    mem_idx?: true
  }

  export type Pris_memberSumAggregateInputType = {
    mem_idx?: true
  }

  export type Pris_memberMinAggregateInputType = {
    mem_idx?: true
    mem_email?: true
    mem_password?: true
  }

  export type Pris_memberMaxAggregateInputType = {
    mem_idx?: true
    mem_email?: true
    mem_password?: true
  }

  export type Pris_memberCountAggregateInputType = {
    mem_idx?: true
    mem_email?: true
    mem_password?: true
    _all?: true
  }

  export type AggregatePris_memberArgs = {
    where?: pris_memberWhereInput
    orderBy?: Enumerable<pris_memberOrderByInput>
    cursor?: pris_memberWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Pris_memberAvgAggregateInputType
    sum?: Pris_memberSumAggregateInputType
    min?: Pris_memberMinAggregateInputType
    max?: Pris_memberMaxAggregateInputType
  }

  export type GetPris_memberAggregateType<T extends AggregatePris_memberArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPris_memberAggregateScalarType<T[P]>
  }

  export type GetPris_memberAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Pris_memberAvgAggregateOutputType ? Pris_memberAvgAggregateOutputType[P] : never
  }

    



  export type pris_memberSelect = {
    mem_idx?: boolean
    mem_email?: boolean
    mem_password?: boolean
  }

  export type pris_memberGetPayload<
    S extends boolean | null | undefined | pris_memberArgs,
    U = keyof S
      > = S extends true
        ? pris_member
    : S extends undefined
    ? never
    : S extends pris_memberArgs | FindManypris_memberArgs
    ?'include' extends U
    ? pris_member 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof pris_member ?pris_member [P]
  : 
     never
  } 
    : pris_member
  : pris_member


  export interface pris_memberDelegate {
    /**
     * Find zero or one Pris_member that matches the filter.
     * @param {FindUniquepris_memberArgs} args - Arguments to find a Pris_member
     * @example
     * // Get one Pris_member
     * const pris_member = await prisma.pris_member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquepris_memberArgs>(
      args: Subset<T, FindUniquepris_memberArgs>
    ): CheckSelect<T, Prisma__pris_memberClient<pris_member | null>, Prisma__pris_memberClient<pris_memberGetPayload<T> | null>>
    /**
     * Find the first Pris_member that matches the filter.
     * @param {FindFirstpris_memberArgs} args - Arguments to find a Pris_member
     * @example
     * // Get one Pris_member
     * const pris_member = await prisma.pris_member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstpris_memberArgs>(
      args?: Subset<T, FindFirstpris_memberArgs>
    ): CheckSelect<T, Prisma__pris_memberClient<pris_member | null>, Prisma__pris_memberClient<pris_memberGetPayload<T> | null>>
    /**
     * Find zero or more Pris_members that matches the filter.
     * @param {FindManypris_memberArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pris_members
     * const pris_members = await prisma.pris_member.findMany()
     * 
     * // Get first 10 Pris_members
     * const pris_members = await prisma.pris_member.findMany({ take: 10 })
     * 
     * // Only select the `mem_idx`
     * const pris_memberWithMem_idxOnly = await prisma.pris_member.findMany({ select: { mem_idx: true } })
     * 
    **/
    findMany<T extends FindManypris_memberArgs>(
      args?: Subset<T, FindManypris_memberArgs>
    ): CheckSelect<T, Promise<Array<pris_member>>, Promise<Array<pris_memberGetPayload<T>>>>
    /**
     * Create a Pris_member.
     * @param {pris_memberCreateArgs} args - Arguments to create a Pris_member.
     * @example
     * // Create one Pris_member
     * const Pris_member = await prisma.pris_member.create({
     *   data: {
     *     // ... data to create a Pris_member
     *   }
     * })
     * 
    **/
    create<T extends pris_memberCreateArgs>(
      args: Subset<T, pris_memberCreateArgs>
    ): CheckSelect<T, Prisma__pris_memberClient<pris_member>, Prisma__pris_memberClient<pris_memberGetPayload<T>>>
    /**
     * Delete a Pris_member.
     * @param {pris_memberDeleteArgs} args - Arguments to delete one Pris_member.
     * @example
     * // Delete one Pris_member
     * const Pris_member = await prisma.pris_member.delete({
     *   where: {
     *     // ... filter to delete one Pris_member
     *   }
     * })
     * 
    **/
    delete<T extends pris_memberDeleteArgs>(
      args: Subset<T, pris_memberDeleteArgs>
    ): CheckSelect<T, Prisma__pris_memberClient<pris_member>, Prisma__pris_memberClient<pris_memberGetPayload<T>>>
    /**
     * Update one Pris_member.
     * @param {pris_memberUpdateArgs} args - Arguments to update one Pris_member.
     * @example
     * // Update one Pris_member
     * const pris_member = await prisma.pris_member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pris_memberUpdateArgs>(
      args: Subset<T, pris_memberUpdateArgs>
    ): CheckSelect<T, Prisma__pris_memberClient<pris_member>, Prisma__pris_memberClient<pris_memberGetPayload<T>>>
    /**
     * Delete zero or more Pris_members.
     * @param {pris_memberDeleteManyArgs} args - Arguments to filter Pris_members to delete.
     * @example
     * // Delete a few Pris_members
     * const { count } = await prisma.pris_member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pris_memberDeleteManyArgs>(
      args?: Subset<T, pris_memberDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Pris_members.
     * @param {pris_memberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pris_members
     * const pris_member = await prisma.pris_member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pris_memberUpdateManyArgs>(
      args: Subset<T, pris_memberUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Pris_member.
     * @param {pris_memberUpsertArgs} args - Arguments to update or create a Pris_member.
     * @example
     * // Update or create a Pris_member
     * const pris_member = await prisma.pris_member.upsert({
     *   create: {
     *     // ... data to create a Pris_member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pris_member we want to update
     *   }
     * })
    **/
    upsert<T extends pris_memberUpsertArgs>(
      args: Subset<T, pris_memberUpsertArgs>
    ): CheckSelect<T, Prisma__pris_memberClient<pris_member>, Prisma__pris_memberClient<pris_memberGetPayload<T>>>
    /**
     * Find zero or one Pris_member that matches the filter.
     * @param {FindUniquepris_memberArgs} args - Arguments to find a Pris_member
     * @deprecated This will be deprecated please use prisma.pris_member.findUnique
     * @example
     * // Get one Pris_member
     * const pris_member = await prisma.pris_member.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquepris_memberArgs>(
      args: Subset<T, FindUniquepris_memberArgs>
    ): CheckSelect<T, Prisma__pris_memberClient<pris_member | null>, Prisma__pris_memberClient<pris_memberGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManypris_memberArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregatePris_memberArgs>(args: Subset<T, AggregatePris_memberArgs>): Promise<GetPris_memberAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for pris_member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pris_memberClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * pris_member findUnique
   */
  export type FindUniquepris_memberArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
    /**
     * Filter, which pris_member to fetch.
    **/
    where: pris_memberWhereUniqueInput
  }


  /**
   * pris_member findFirst
   */
  export type FindFirstpris_memberArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
    /**
     * Filter, which pris_member to fetch.
    **/
    where?: pris_memberWhereInput
    orderBy?: Enumerable<pris_memberOrderByInput>
    cursor?: pris_memberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Pris_memberScalarFieldEnum>
  }


  /**
   * pris_member findMany
   */
  export type FindManypris_memberArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
    /**
     * Filter, which pris_members to fetch.
    **/
    where?: pris_memberWhereInput
    /**
     * Determine the order of the pris_members to fetch.
    **/
    orderBy?: Enumerable<pris_memberOrderByInput>
    /**
     * Sets the position for listing pris_members.
    **/
    cursor?: pris_memberWhereUniqueInput
    /**
     * The number of pris_members to fetch. If negative number, it will take pris_members before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` pris_members.
    **/
    skip?: number
    distinct?: Enumerable<Pris_memberScalarFieldEnum>
  }


  /**
   * pris_member create
   */
  export type pris_memberCreateArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
    /**
     * The data needed to create a pris_member.
    **/
    data: pris_memberCreateInput
  }


  /**
   * pris_member update
   */
  export type pris_memberUpdateArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
    /**
     * The data needed to update a pris_member.
    **/
    data: pris_memberUpdateInput
    /**
     * Choose, which pris_member to update.
    **/
    where: pris_memberWhereUniqueInput
  }


  /**
   * pris_member updateMany
   */
  export type pris_memberUpdateManyArgs = {
    data: pris_memberUpdateManyMutationInput
    where?: pris_memberWhereInput
  }


  /**
   * pris_member upsert
   */
  export type pris_memberUpsertArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
    /**
     * The filter to search for the pris_member to update in case it exists.
    **/
    where: pris_memberWhereUniqueInput
    /**
     * In case the pris_member found by the `where` argument doesn't exist, create a new pris_member with this data.
    **/
    create: pris_memberCreateInput
    /**
     * In case the pris_member was found with the provided `where` argument, update it with this data.
    **/
    update: pris_memberUpdateInput
  }


  /**
   * pris_member delete
   */
  export type pris_memberDeleteArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
    /**
     * Filter which pris_member to delete.
    **/
    where: pris_memberWhereUniqueInput
  }


  /**
   * pris_member deleteMany
   */
  export type pris_memberDeleteManyArgs = {
    where?: pris_memberWhereInput
  }


  /**
   * pris_member without action
   */
  export type pris_memberArgs = {
    /**
     * Select specific fields to fetch from the pris_member
    **/
    select?: pris_memberSelect | null
  }



  /**
   * Model rs_menu
   */


  export type AggregateRs_menu = {
    count: number | null
    avg: Rs_menuAvgAggregateOutputType | null
    sum: Rs_menuSumAggregateOutputType | null
    min: Rs_menuMinAggregateOutputType | null
    max: Rs_menuMaxAggregateOutputType | null
  }

  export type Rs_menuAvgAggregateOutputType = {
    menu_idx: number
  }

  export type Rs_menuSumAggregateOutputType = {
    menu_idx: number
  }

  export type Rs_menuMinAggregateOutputType = {
    menu_idx: number
    menu_code: string | null
    ins_date: string | null
    upd_date: string | null
    menu_name: string | null
  }

  export type Rs_menuMaxAggregateOutputType = {
    menu_idx: number
    menu_code: string | null
    ins_date: string | null
    upd_date: string | null
    menu_name: string | null
  }

  export type Rs_menuCountAggregateOutputType = {
    menu_idx: number
    menu_code: number | null
    ins_date: number | null
    upd_date: number | null
    menu_name: number | null
    _all: number
  }


  export type Rs_menuAvgAggregateInputType = {
    menu_idx?: true
  }

  export type Rs_menuSumAggregateInputType = {
    menu_idx?: true
  }

  export type Rs_menuMinAggregateInputType = {
    menu_idx?: true
    menu_code?: true
    ins_date?: true
    upd_date?: true
    menu_name?: true
  }

  export type Rs_menuMaxAggregateInputType = {
    menu_idx?: true
    menu_code?: true
    ins_date?: true
    upd_date?: true
    menu_name?: true
  }

  export type Rs_menuCountAggregateInputType = {
    menu_idx?: true
    menu_code?: true
    ins_date?: true
    upd_date?: true
    menu_name?: true
    _all?: true
  }

  export type AggregateRs_menuArgs = {
    where?: rs_menuWhereInput
    orderBy?: Enumerable<rs_menuOrderByInput>
    cursor?: rs_menuWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Rs_menuAvgAggregateInputType
    sum?: Rs_menuSumAggregateInputType
    min?: Rs_menuMinAggregateInputType
    max?: Rs_menuMaxAggregateInputType
  }

  export type GetRs_menuAggregateType<T extends AggregateRs_menuArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetRs_menuAggregateScalarType<T[P]>
  }

  export type GetRs_menuAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Rs_menuAvgAggregateOutputType ? Rs_menuAvgAggregateOutputType[P] : never
  }

    



  export type rs_menuSelect = {
    menu_idx?: boolean
    menu_code?: boolean
    ins_date?: boolean
    upd_date?: boolean
    menu_name?: boolean
  }

  export type rs_menuGetPayload<
    S extends boolean | null | undefined | rs_menuArgs,
    U = keyof S
      > = S extends true
        ? rs_menu
    : S extends undefined
    ? never
    : S extends rs_menuArgs | FindManyrs_menuArgs
    ?'include' extends U
    ? rs_menu 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof rs_menu ?rs_menu [P]
  : 
     never
  } 
    : rs_menu
  : rs_menu


  export interface rs_menuDelegate {
    /**
     * Find zero or one Rs_menu that matches the filter.
     * @param {FindUniquers_menuArgs} args - Arguments to find a Rs_menu
     * @example
     * // Get one Rs_menu
     * const rs_menu = await prisma.rs_menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquers_menuArgs>(
      args: Subset<T, FindUniquers_menuArgs>
    ): CheckSelect<T, Prisma__rs_menuClient<rs_menu | null>, Prisma__rs_menuClient<rs_menuGetPayload<T> | null>>
    /**
     * Find the first Rs_menu that matches the filter.
     * @param {FindFirstrs_menuArgs} args - Arguments to find a Rs_menu
     * @example
     * // Get one Rs_menu
     * const rs_menu = await prisma.rs_menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstrs_menuArgs>(
      args?: Subset<T, FindFirstrs_menuArgs>
    ): CheckSelect<T, Prisma__rs_menuClient<rs_menu | null>, Prisma__rs_menuClient<rs_menuGetPayload<T> | null>>
    /**
     * Find zero or more Rs_menus that matches the filter.
     * @param {FindManyrs_menuArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rs_menus
     * const rs_menus = await prisma.rs_menu.findMany()
     * 
     * // Get first 10 Rs_menus
     * const rs_menus = await prisma.rs_menu.findMany({ take: 10 })
     * 
     * // Only select the `menu_idx`
     * const rs_menuWithMenu_idxOnly = await prisma.rs_menu.findMany({ select: { menu_idx: true } })
     * 
    **/
    findMany<T extends FindManyrs_menuArgs>(
      args?: Subset<T, FindManyrs_menuArgs>
    ): CheckSelect<T, Promise<Array<rs_menu>>, Promise<Array<rs_menuGetPayload<T>>>>
    /**
     * Create a Rs_menu.
     * @param {rs_menuCreateArgs} args - Arguments to create a Rs_menu.
     * @example
     * // Create one Rs_menu
     * const Rs_menu = await prisma.rs_menu.create({
     *   data: {
     *     // ... data to create a Rs_menu
     *   }
     * })
     * 
    **/
    create<T extends rs_menuCreateArgs>(
      args: Subset<T, rs_menuCreateArgs>
    ): CheckSelect<T, Prisma__rs_menuClient<rs_menu>, Prisma__rs_menuClient<rs_menuGetPayload<T>>>
    /**
     * Delete a Rs_menu.
     * @param {rs_menuDeleteArgs} args - Arguments to delete one Rs_menu.
     * @example
     * // Delete one Rs_menu
     * const Rs_menu = await prisma.rs_menu.delete({
     *   where: {
     *     // ... filter to delete one Rs_menu
     *   }
     * })
     * 
    **/
    delete<T extends rs_menuDeleteArgs>(
      args: Subset<T, rs_menuDeleteArgs>
    ): CheckSelect<T, Prisma__rs_menuClient<rs_menu>, Prisma__rs_menuClient<rs_menuGetPayload<T>>>
    /**
     * Update one Rs_menu.
     * @param {rs_menuUpdateArgs} args - Arguments to update one Rs_menu.
     * @example
     * // Update one Rs_menu
     * const rs_menu = await prisma.rs_menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends rs_menuUpdateArgs>(
      args: Subset<T, rs_menuUpdateArgs>
    ): CheckSelect<T, Prisma__rs_menuClient<rs_menu>, Prisma__rs_menuClient<rs_menuGetPayload<T>>>
    /**
     * Delete zero or more Rs_menus.
     * @param {rs_menuDeleteManyArgs} args - Arguments to filter Rs_menus to delete.
     * @example
     * // Delete a few Rs_menus
     * const { count } = await prisma.rs_menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends rs_menuDeleteManyArgs>(
      args?: Subset<T, rs_menuDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Rs_menus.
     * @param {rs_menuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rs_menus
     * const rs_menu = await prisma.rs_menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends rs_menuUpdateManyArgs>(
      args: Subset<T, rs_menuUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Rs_menu.
     * @param {rs_menuUpsertArgs} args - Arguments to update or create a Rs_menu.
     * @example
     * // Update or create a Rs_menu
     * const rs_menu = await prisma.rs_menu.upsert({
     *   create: {
     *     // ... data to create a Rs_menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rs_menu we want to update
     *   }
     * })
    **/
    upsert<T extends rs_menuUpsertArgs>(
      args: Subset<T, rs_menuUpsertArgs>
    ): CheckSelect<T, Prisma__rs_menuClient<rs_menu>, Prisma__rs_menuClient<rs_menuGetPayload<T>>>
    /**
     * Find zero or one Rs_menu that matches the filter.
     * @param {FindUniquers_menuArgs} args - Arguments to find a Rs_menu
     * @deprecated This will be deprecated please use prisma.rs_menu.findUnique
     * @example
     * // Get one Rs_menu
     * const rs_menu = await prisma.rs_menu.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquers_menuArgs>(
      args: Subset<T, FindUniquers_menuArgs>
    ): CheckSelect<T, Prisma__rs_menuClient<rs_menu | null>, Prisma__rs_menuClient<rs_menuGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManyrs_menuArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateRs_menuArgs>(args: Subset<T, AggregateRs_menuArgs>): Promise<GetRs_menuAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for rs_menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__rs_menuClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * rs_menu findUnique
   */
  export type FindUniquers_menuArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
    /**
     * Filter, which rs_menu to fetch.
    **/
    where: rs_menuWhereUniqueInput
  }


  /**
   * rs_menu findFirst
   */
  export type FindFirstrs_menuArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
    /**
     * Filter, which rs_menu to fetch.
    **/
    where?: rs_menuWhereInput
    orderBy?: Enumerable<rs_menuOrderByInput>
    cursor?: rs_menuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Rs_menuScalarFieldEnum>
  }


  /**
   * rs_menu findMany
   */
  export type FindManyrs_menuArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
    /**
     * Filter, which rs_menus to fetch.
    **/
    where?: rs_menuWhereInput
    /**
     * Determine the order of the rs_menus to fetch.
    **/
    orderBy?: Enumerable<rs_menuOrderByInput>
    /**
     * Sets the position for listing rs_menus.
    **/
    cursor?: rs_menuWhereUniqueInput
    /**
     * The number of rs_menus to fetch. If negative number, it will take rs_menus before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` rs_menus.
    **/
    skip?: number
    distinct?: Enumerable<Rs_menuScalarFieldEnum>
  }


  /**
   * rs_menu create
   */
  export type rs_menuCreateArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
    /**
     * The data needed to create a rs_menu.
    **/
    data: rs_menuCreateInput
  }


  /**
   * rs_menu update
   */
  export type rs_menuUpdateArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
    /**
     * The data needed to update a rs_menu.
    **/
    data: rs_menuUpdateInput
    /**
     * Choose, which rs_menu to update.
    **/
    where: rs_menuWhereUniqueInput
  }


  /**
   * rs_menu updateMany
   */
  export type rs_menuUpdateManyArgs = {
    data: rs_menuUpdateManyMutationInput
    where?: rs_menuWhereInput
  }


  /**
   * rs_menu upsert
   */
  export type rs_menuUpsertArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
    /**
     * The filter to search for the rs_menu to update in case it exists.
    **/
    where: rs_menuWhereUniqueInput
    /**
     * In case the rs_menu found by the `where` argument doesn't exist, create a new rs_menu with this data.
    **/
    create: rs_menuCreateInput
    /**
     * In case the rs_menu was found with the provided `where` argument, update it with this data.
    **/
    update: rs_menuUpdateInput
  }


  /**
   * rs_menu delete
   */
  export type rs_menuDeleteArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
    /**
     * Filter which rs_menu to delete.
    **/
    where: rs_menuWhereUniqueInput
  }


  /**
   * rs_menu deleteMany
   */
  export type rs_menuDeleteManyArgs = {
    where?: rs_menuWhereInput
  }


  /**
   * rs_menu without action
   */
  export type rs_menuArgs = {
    /**
     * Select specific fields to fetch from the rs_menu
    **/
    select?: rs_menuSelect | null
  }



  /**
   * Model test2
   */


  export type AggregateTest2 = {
    count: number | null
    avg: Test2AvgAggregateOutputType | null
    sum: Test2SumAggregateOutputType | null
    min: Test2MinAggregateOutputType | null
    max: Test2MaxAggregateOutputType | null
  }

  export type Test2AvgAggregateOutputType = {
    test_idx: number
    test_deletion: number
  }

  export type Test2SumAggregateOutputType = {
    test_idx: number
    test_deletion: number
  }

  export type Test2MinAggregateOutputType = {
    test_idx: number
    test_unique: string | null
    test_deletion: number
  }

  export type Test2MaxAggregateOutputType = {
    test_idx: number
    test_unique: string | null
    test_deletion: number
  }

  export type Test2CountAggregateOutputType = {
    test_idx: number
    test_unique: number | null
    test_deletion: number
    _all: number
  }


  export type Test2AvgAggregateInputType = {
    test_idx?: true
    test_deletion?: true
  }

  export type Test2SumAggregateInputType = {
    test_idx?: true
    test_deletion?: true
  }

  export type Test2MinAggregateInputType = {
    test_idx?: true
    test_unique?: true
    test_deletion?: true
  }

  export type Test2MaxAggregateInputType = {
    test_idx?: true
    test_unique?: true
    test_deletion?: true
  }

  export type Test2CountAggregateInputType = {
    test_idx?: true
    test_unique?: true
    test_deletion?: true
    _all?: true
  }

  export type AggregateTest2Args = {
    where?: test2WhereInput
    orderBy?: Enumerable<test2OrderByInput>
    cursor?: test2WhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Test2AvgAggregateInputType
    sum?: Test2SumAggregateInputType
    min?: Test2MinAggregateInputType
    max?: Test2MaxAggregateInputType
  }

  export type GetTest2AggregateType<T extends AggregateTest2Args> = {
    [P in keyof T]: P extends 'count' ? number : GetTest2AggregateScalarType<T[P]>
  }

  export type GetTest2AggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Test2AvgAggregateOutputType ? Test2AvgAggregateOutputType[P] : never
  }

    



  export type test2Select = {
    test_idx?: boolean
    test_unique?: boolean
    test_deletion?: boolean
  }

  export type test2GetPayload<
    S extends boolean | null | undefined | test2Args,
    U = keyof S
      > = S extends true
        ? test2
    : S extends undefined
    ? never
    : S extends test2Args | FindManytest2Args
    ?'include' extends U
    ? test2 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof test2 ?test2 [P]
  : 
     never
  } 
    : test2
  : test2


  export interface test2Delegate {
    /**
     * Find zero or one Test2 that matches the filter.
     * @param {FindUniquetest2Args} args - Arguments to find a Test2
     * @example
     * // Get one Test2
     * const test2 = await prisma.test2.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquetest2Args>(
      args: Subset<T, FindUniquetest2Args>
    ): CheckSelect<T, Prisma__test2Client<test2 | null>, Prisma__test2Client<test2GetPayload<T> | null>>
    /**
     * Find the first Test2 that matches the filter.
     * @param {FindFirsttest2Args} args - Arguments to find a Test2
     * @example
     * // Get one Test2
     * const test2 = await prisma.test2.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirsttest2Args>(
      args?: Subset<T, FindFirsttest2Args>
    ): CheckSelect<T, Prisma__test2Client<test2 | null>, Prisma__test2Client<test2GetPayload<T> | null>>
    /**
     * Find zero or more Test2s that matches the filter.
     * @param {FindManytest2Args=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Test2s
     * const test2s = await prisma.test2.findMany()
     * 
     * // Get first 10 Test2s
     * const test2s = await prisma.test2.findMany({ take: 10 })
     * 
     * // Only select the `test_idx`
     * const test2WithTest_idxOnly = await prisma.test2.findMany({ select: { test_idx: true } })
     * 
    **/
    findMany<T extends FindManytest2Args>(
      args?: Subset<T, FindManytest2Args>
    ): CheckSelect<T, Promise<Array<test2>>, Promise<Array<test2GetPayload<T>>>>
    /**
     * Create a Test2.
     * @param {test2CreateArgs} args - Arguments to create a Test2.
     * @example
     * // Create one Test2
     * const Test2 = await prisma.test2.create({
     *   data: {
     *     // ... data to create a Test2
     *   }
     * })
     * 
    **/
    create<T extends test2CreateArgs>(
      args: Subset<T, test2CreateArgs>
    ): CheckSelect<T, Prisma__test2Client<test2>, Prisma__test2Client<test2GetPayload<T>>>
    /**
     * Delete a Test2.
     * @param {test2DeleteArgs} args - Arguments to delete one Test2.
     * @example
     * // Delete one Test2
     * const Test2 = await prisma.test2.delete({
     *   where: {
     *     // ... filter to delete one Test2
     *   }
     * })
     * 
    **/
    delete<T extends test2DeleteArgs>(
      args: Subset<T, test2DeleteArgs>
    ): CheckSelect<T, Prisma__test2Client<test2>, Prisma__test2Client<test2GetPayload<T>>>
    /**
     * Update one Test2.
     * @param {test2UpdateArgs} args - Arguments to update one Test2.
     * @example
     * // Update one Test2
     * const test2 = await prisma.test2.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends test2UpdateArgs>(
      args: Subset<T, test2UpdateArgs>
    ): CheckSelect<T, Prisma__test2Client<test2>, Prisma__test2Client<test2GetPayload<T>>>
    /**
     * Delete zero or more Test2s.
     * @param {test2DeleteManyArgs} args - Arguments to filter Test2s to delete.
     * @example
     * // Delete a few Test2s
     * const { count } = await prisma.test2.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends test2DeleteManyArgs>(
      args?: Subset<T, test2DeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Test2s.
     * @param {test2UpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Test2s
     * const test2 = await prisma.test2.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends test2UpdateManyArgs>(
      args: Subset<T, test2UpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Test2.
     * @param {test2UpsertArgs} args - Arguments to update or create a Test2.
     * @example
     * // Update or create a Test2
     * const test2 = await prisma.test2.upsert({
     *   create: {
     *     // ... data to create a Test2
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Test2 we want to update
     *   }
     * })
    **/
    upsert<T extends test2UpsertArgs>(
      args: Subset<T, test2UpsertArgs>
    ): CheckSelect<T, Prisma__test2Client<test2>, Prisma__test2Client<test2GetPayload<T>>>
    /**
     * Find zero or one Test2 that matches the filter.
     * @param {FindUniquetest2Args} args - Arguments to find a Test2
     * @deprecated This will be deprecated please use prisma.test2.findUnique
     * @example
     * // Get one Test2
     * const test2 = await prisma.test2.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquetest2Args>(
      args: Subset<T, FindUniquetest2Args>
    ): CheckSelect<T, Prisma__test2Client<test2 | null>, Prisma__test2Client<test2GetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManytest2Args, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregateTest2Args>(args: Subset<T, AggregateTest2Args>): Promise<GetTest2AggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for test2.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__test2Client<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * test2 findUnique
   */
  export type FindUniquetest2Args = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
    /**
     * Filter, which test2 to fetch.
    **/
    where: test2WhereUniqueInput
  }


  /**
   * test2 findFirst
   */
  export type FindFirsttest2Args = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
    /**
     * Filter, which test2 to fetch.
    **/
    where?: test2WhereInput
    orderBy?: Enumerable<test2OrderByInput>
    cursor?: test2WhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Test2ScalarFieldEnum>
  }


  /**
   * test2 findMany
   */
  export type FindManytest2Args = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
    /**
     * Filter, which test2s to fetch.
    **/
    where?: test2WhereInput
    /**
     * Determine the order of the test2s to fetch.
    **/
    orderBy?: Enumerable<test2OrderByInput>
    /**
     * Sets the position for listing test2s.
    **/
    cursor?: test2WhereUniqueInput
    /**
     * The number of test2s to fetch. If negative number, it will take test2s before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` test2s.
    **/
    skip?: number
    distinct?: Enumerable<Test2ScalarFieldEnum>
  }


  /**
   * test2 create
   */
  export type test2CreateArgs = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
    /**
     * The data needed to create a test2.
    **/
    data: test2CreateInput
  }


  /**
   * test2 update
   */
  export type test2UpdateArgs = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
    /**
     * The data needed to update a test2.
    **/
    data: test2UpdateInput
    /**
     * Choose, which test2 to update.
    **/
    where: test2WhereUniqueInput
  }


  /**
   * test2 updateMany
   */
  export type test2UpdateManyArgs = {
    data: test2UpdateManyMutationInput
    where?: test2WhereInput
  }


  /**
   * test2 upsert
   */
  export type test2UpsertArgs = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
    /**
     * The filter to search for the test2 to update in case it exists.
    **/
    where: test2WhereUniqueInput
    /**
     * In case the test2 found by the `where` argument doesn't exist, create a new test2 with this data.
    **/
    create: test2CreateInput
    /**
     * In case the test2 was found with the provided `where` argument, update it with this data.
    **/
    update: test2UpdateInput
  }


  /**
   * test2 delete
   */
  export type test2DeleteArgs = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
    /**
     * Filter which test2 to delete.
    **/
    where: test2WhereUniqueInput
  }


  /**
   * test2 deleteMany
   */
  export type test2DeleteManyArgs = {
    where?: test2WhereInput
  }


  /**
   * test2 without action
   */
  export type test2Args = {
    /**
     * Select specific fields to fetch from the test2
    **/
    select?: test2Select | null
  }



  /**
   * Model pris_log
   */


  export type AggregatePris_log = {
    count: number | null
    avg: Pris_logAvgAggregateOutputType | null
    sum: Pris_logSumAggregateOutputType | null
    min: Pris_logMinAggregateOutputType | null
    max: Pris_logMaxAggregateOutputType | null
  }

  export type Pris_logAvgAggregateOutputType = {
    id: number
  }

  export type Pris_logSumAggregateOutputType = {
    id: number
  }

  export type Pris_logMinAggregateOutputType = {
    id: number
    email: string | null
  }

  export type Pris_logMaxAggregateOutputType = {
    id: number
    email: string | null
  }

  export type Pris_logCountAggregateOutputType = {
    id: number
    email: number | null
    _all: number
  }


  export type Pris_logAvgAggregateInputType = {
    id?: true
  }

  export type Pris_logSumAggregateInputType = {
    id?: true
  }

  export type Pris_logMinAggregateInputType = {
    id?: true
    email?: true
  }

  export type Pris_logMaxAggregateInputType = {
    id?: true
    email?: true
  }

  export type Pris_logCountAggregateInputType = {
    id?: true
    email?: true
    _all?: true
  }

  export type AggregatePris_logArgs = {
    where?: pris_logWhereInput
    orderBy?: Enumerable<pris_logOrderByInput>
    cursor?: pris_logWhereUniqueInput
    take?: number
    skip?: number
    count?: true
    avg?: Pris_logAvgAggregateInputType
    sum?: Pris_logSumAggregateInputType
    min?: Pris_logMinAggregateInputType
    max?: Pris_logMaxAggregateInputType
  }

  export type GetPris_logAggregateType<T extends AggregatePris_logArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPris_logAggregateScalarType<T[P]>
  }

  export type GetPris_logAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof Pris_logAvgAggregateOutputType ? Pris_logAvgAggregateOutputType[P] : never
  }

    



  export type pris_logSelect = {
    id?: boolean
    email?: boolean
  }

  export type pris_logGetPayload<
    S extends boolean | null | undefined | pris_logArgs,
    U = keyof S
      > = S extends true
        ? pris_log
    : S extends undefined
    ? never
    : S extends pris_logArgs | FindManypris_logArgs
    ?'include' extends U
    ? pris_log 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof pris_log ?pris_log [P]
  : 
     never
  } 
    : pris_log
  : pris_log


  export interface pris_logDelegate {
    /**
     * Find zero or one Pris_log that matches the filter.
     * @param {FindUniquepris_logArgs} args - Arguments to find a Pris_log
     * @example
     * // Get one Pris_log
     * const pris_log = await prisma.pris_log.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquepris_logArgs>(
      args: Subset<T, FindUniquepris_logArgs>
    ): CheckSelect<T, Prisma__pris_logClient<pris_log | null>, Prisma__pris_logClient<pris_logGetPayload<T> | null>>
    /**
     * Find the first Pris_log that matches the filter.
     * @param {FindFirstpris_logArgs} args - Arguments to find a Pris_log
     * @example
     * // Get one Pris_log
     * const pris_log = await prisma.pris_log.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstpris_logArgs>(
      args?: Subset<T, FindFirstpris_logArgs>
    ): CheckSelect<T, Prisma__pris_logClient<pris_log | null>, Prisma__pris_logClient<pris_logGetPayload<T> | null>>
    /**
     * Find zero or more Pris_logs that matches the filter.
     * @param {FindManypris_logArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pris_logs
     * const pris_logs = await prisma.pris_log.findMany()
     * 
     * // Get first 10 Pris_logs
     * const pris_logs = await prisma.pris_log.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pris_logWithIdOnly = await prisma.pris_log.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManypris_logArgs>(
      args?: Subset<T, FindManypris_logArgs>
    ): CheckSelect<T, Promise<Array<pris_log>>, Promise<Array<pris_logGetPayload<T>>>>
    /**
     * Create a Pris_log.
     * @param {pris_logCreateArgs} args - Arguments to create a Pris_log.
     * @example
     * // Create one Pris_log
     * const Pris_log = await prisma.pris_log.create({
     *   data: {
     *     // ... data to create a Pris_log
     *   }
     * })
     * 
    **/
    create<T extends pris_logCreateArgs>(
      args: Subset<T, pris_logCreateArgs>
    ): CheckSelect<T, Prisma__pris_logClient<pris_log>, Prisma__pris_logClient<pris_logGetPayload<T>>>
    /**
     * Delete a Pris_log.
     * @param {pris_logDeleteArgs} args - Arguments to delete one Pris_log.
     * @example
     * // Delete one Pris_log
     * const Pris_log = await prisma.pris_log.delete({
     *   where: {
     *     // ... filter to delete one Pris_log
     *   }
     * })
     * 
    **/
    delete<T extends pris_logDeleteArgs>(
      args: Subset<T, pris_logDeleteArgs>
    ): CheckSelect<T, Prisma__pris_logClient<pris_log>, Prisma__pris_logClient<pris_logGetPayload<T>>>
    /**
     * Update one Pris_log.
     * @param {pris_logUpdateArgs} args - Arguments to update one Pris_log.
     * @example
     * // Update one Pris_log
     * const pris_log = await prisma.pris_log.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends pris_logUpdateArgs>(
      args: Subset<T, pris_logUpdateArgs>
    ): CheckSelect<T, Prisma__pris_logClient<pris_log>, Prisma__pris_logClient<pris_logGetPayload<T>>>
    /**
     * Delete zero or more Pris_logs.
     * @param {pris_logDeleteManyArgs} args - Arguments to filter Pris_logs to delete.
     * @example
     * // Delete a few Pris_logs
     * const { count } = await prisma.pris_log.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends pris_logDeleteManyArgs>(
      args?: Subset<T, pris_logDeleteManyArgs>
    ): Promise<BatchPayload>
    /**
     * Update zero or more Pris_logs.
     * @param {pris_logUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pris_logs
     * const pris_log = await prisma.pris_log.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends pris_logUpdateManyArgs>(
      args: Subset<T, pris_logUpdateManyArgs>
    ): Promise<BatchPayload>
    /**
     * Create or update one Pris_log.
     * @param {pris_logUpsertArgs} args - Arguments to update or create a Pris_log.
     * @example
     * // Update or create a Pris_log
     * const pris_log = await prisma.pris_log.upsert({
     *   create: {
     *     // ... data to create a Pris_log
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pris_log we want to update
     *   }
     * })
    **/
    upsert<T extends pris_logUpsertArgs>(
      args: Subset<T, pris_logUpsertArgs>
    ): CheckSelect<T, Prisma__pris_logClient<pris_log>, Prisma__pris_logClient<pris_logGetPayload<T>>>
    /**
     * Find zero or one Pris_log that matches the filter.
     * @param {FindUniquepris_logArgs} args - Arguments to find a Pris_log
     * @deprecated This will be deprecated please use prisma.pris_log.findUnique
     * @example
     * // Get one Pris_log
     * const pris_log = await prisma.pris_log.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquepris_logArgs>(
      args: Subset<T, FindUniquepris_logArgs>
    ): CheckSelect<T, Prisma__pris_logClient<pris_log | null>, Prisma__pris_logClient<pris_logGetPayload<T> | null>>
    /**
     * Count
     */
    count(args?: Omit<FindManypris_logArgs, 'select' | 'include'>): Promise<number>

  

    /**
     * Aggregate
     */
    aggregate<T extends AggregatePris_logArgs>(args: Subset<T, AggregatePris_logArgs>): Promise<GetPris_logAggregateType<T>>
  }

  /**
   * The delegate class that acts as a "Promise-like" for pris_log.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__pris_logClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * pris_log findUnique
   */
  export type FindUniquepris_logArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
    /**
     * Filter, which pris_log to fetch.
    **/
    where: pris_logWhereUniqueInput
  }


  /**
   * pris_log findFirst
   */
  export type FindFirstpris_logArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
    /**
     * Filter, which pris_log to fetch.
    **/
    where?: pris_logWhereInput
    orderBy?: Enumerable<pris_logOrderByInput>
    cursor?: pris_logWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<Pris_logScalarFieldEnum>
  }


  /**
   * pris_log findMany
   */
  export type FindManypris_logArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
    /**
     * Filter, which pris_logs to fetch.
    **/
    where?: pris_logWhereInput
    /**
     * Determine the order of the pris_logs to fetch.
    **/
    orderBy?: Enumerable<pris_logOrderByInput>
    /**
     * Sets the position for listing pris_logs.
    **/
    cursor?: pris_logWhereUniqueInput
    /**
     * The number of pris_logs to fetch. If negative number, it will take pris_logs before the `cursor`.
    **/
    take?: number
    /**
     * Skip the first `n` pris_logs.
    **/
    skip?: number
    distinct?: Enumerable<Pris_logScalarFieldEnum>
  }


  /**
   * pris_log create
   */
  export type pris_logCreateArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
    /**
     * The data needed to create a pris_log.
    **/
    data: pris_logCreateInput
  }


  /**
   * pris_log update
   */
  export type pris_logUpdateArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
    /**
     * The data needed to update a pris_log.
    **/
    data: pris_logUpdateInput
    /**
     * Choose, which pris_log to update.
    **/
    where: pris_logWhereUniqueInput
  }


  /**
   * pris_log updateMany
   */
  export type pris_logUpdateManyArgs = {
    data: pris_logUpdateManyMutationInput
    where?: pris_logWhereInput
  }


  /**
   * pris_log upsert
   */
  export type pris_logUpsertArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
    /**
     * The filter to search for the pris_log to update in case it exists.
    **/
    where: pris_logWhereUniqueInput
    /**
     * In case the pris_log found by the `where` argument doesn't exist, create a new pris_log with this data.
    **/
    create: pris_logCreateInput
    /**
     * In case the pris_log was found with the provided `where` argument, update it with this data.
    **/
    update: pris_logUpdateInput
  }


  /**
   * pris_log delete
   */
  export type pris_logDeleteArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
    /**
     * Filter which pris_log to delete.
    **/
    where: pris_logWhereUniqueInput
  }


  /**
   * pris_log deleteMany
   */
  export type pris_logDeleteManyArgs = {
    where?: pris_logWhereInput
  }


  /**
   * pris_log without action
   */
  export type pris_logArgs = {
    /**
     * Select specific fields to fetch from the pris_log
    **/
    select?: pris_logSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const TestScalarFieldEnum: {
    test_idx: 'test_idx',
    test_value: 'test_value',
    test_deletion: 'test_deletion'
  };

  export type TestScalarFieldEnum = (typeof TestScalarFieldEnum)[keyof typeof TestScalarFieldEnum]


  export const Board_cateScalarFieldEnum: {
    tca_idx: 'tca_idx',
    tca_title: 'tca_title'
  };

  export type Board_cateScalarFieldEnum = (typeof Board_cateScalarFieldEnum)[keyof typeof Board_cateScalarFieldEnum]


  export const Board_postScalarFieldEnum: {
    bpo_idx: 'bpo_idx',
    bpo_bca_idx: 'bpo_bca_idx',
    bpo_title: 'bpo_title',
    bpo_desc: 'bpo_desc'
  };

  export type Board_postScalarFieldEnum = (typeof Board_postScalarFieldEnum)[keyof typeof Board_postScalarFieldEnum]


  export const Rs_memberScalarFieldEnum: {
    mem_idx: 'mem_idx',
    mem_userpw: 'mem_userpw',
    mem_userid: 'mem_userid',
    mem_email: 'mem_email',
    mem_lastlogin_datetime: 'mem_lastlogin_datetime',
    mem_lastlogin_timestamp: 'mem_lastlogin_timestamp',
    mem_inactive_check: 'mem_inactive_check',
    mem_is_admin: 'mem_is_admin',
    mem_point: 'mem_point'
  };

  export type Rs_memberScalarFieldEnum = (typeof Rs_memberScalarFieldEnum)[keyof typeof Rs_memberScalarFieldEnum]


  export const Rs_mem_login_logScalarFieldEnum: {
    mll_idx: 'mll_idx',
    mll_success: 'mll_success',
    mll_mem_idx: 'mll_mem_idx',
    mll_email: 'mll_email',
    mll_datetime: 'mll_datetime',
    mll_reason: 'mll_reason',
    mll_timestamp: 'mll_timestamp',
    mll_ip: 'mll_ip',
    mll_fail_count: 'mll_fail_count'
  };

  export type Rs_mem_login_logScalarFieldEnum = (typeof Rs_mem_login_logScalarFieldEnum)[keyof typeof Rs_mem_login_logScalarFieldEnum]


  export const Rs_mgrScalarFieldEnum: {
    mgr_id: 'mgr_id',
    mgr_title: 'mgr_title',
    mgr_datetime: 'mgr_datetime',
    mgr_timestemp: 'mgr_timestemp'
  };

  export type Rs_mgrScalarFieldEnum = (typeof Rs_mgrScalarFieldEnum)[keyof typeof Rs_mgrScalarFieldEnum]


  export const Rs_mgr_memScalarFieldEnum: {
    mgm_mgr_idx: 'mgm_mgr_idx',
    mgm_mem_idx: 'mgm_mem_idx',
    mgm_datetime: 'mgm_datetime',
    mgm_timestemp: 'mgm_timestemp'
  };

  export type Rs_mgr_memScalarFieldEnum = (typeof Rs_mgr_memScalarFieldEnum)[keyof typeof Rs_mgr_memScalarFieldEnum]


  export const Rs_point_logScalarFieldEnum: {
    poi_mem_idx: 'poi_mem_idx',
    poi_mem_id: 'poi_mem_id',
    poi_inc_poi: 'poi_inc_poi',
    poi_type: 'poi_type',
    poi_datetime: 'poi_datetime',
    poi_timestemp: 'poi_timestemp'
  };

  export type Rs_point_logScalarFieldEnum = (typeof Rs_point_logScalarFieldEnum)[keyof typeof Rs_point_logScalarFieldEnum]


  export const Rs_pointScalarFieldEnum: {
    idx: 'idx',
    poi_mem_id: 'poi_mem_id',
    poi_point: 'poi_point',
    poi_datetime: 'poi_datetime',
    poi_timestemp: 'poi_timestemp'
  };

  export type Rs_pointScalarFieldEnum = (typeof Rs_pointScalarFieldEnum)[keyof typeof Rs_pointScalarFieldEnum]


  export const Rs_board_categoryScalarFieldEnum: {
    cat_idx: 'cat_idx',
    cat_title: 'cat_title'
  };

  export type Rs_board_categoryScalarFieldEnum = (typeof Rs_board_categoryScalarFieldEnum)[keyof typeof Rs_board_categoryScalarFieldEnum]


  export const Rs_board_commentScalarFieldEnum: {
    cmt_idx: 'cmt_idx',
    cmt_content: 'cmt_content',
    cmt_mem_idx: 'cmt_mem_idx',
    cmt_mem_id: 'cmt_mem_id',
    cmt_mem_nick: 'cmt_mem_nick',
    cmt_pass: 'cmt_pass',
    cmt_create_datetime: 'cmt_create_datetime',
    cmt_create_timestemp: 'cmt_create_timestemp',
    cmt_update_datetime: 'cmt_update_datetime',
    cmt_update_timestemp: 'cmt_update_timestemp'
  };

  export type Rs_board_commentScalarFieldEnum = (typeof Rs_board_commentScalarFieldEnum)[keyof typeof Rs_board_commentScalarFieldEnum]


  export const Rs_board_postScalarFieldEnum: {
    pst_idx: 'pst_idx',
    pst_title: 'pst_title',
    pst_content: 'pst_content',
    pst_pass: 'pst_pass',
    pst_create_datetime: 'pst_create_datetime',
    pst_create_timestemp: 'pst_create_timestemp',
    pst_update_datetime: 'pst_update_datetime',
    pst_update_timestemp: 'pst_update_timestemp',
    pst_hit: 'pst_hit',
    pst_cat_idx: 'pst_cat_idx',
    pst_mem_idx: 'pst_mem_idx',
    pst_mem_id: 'pst_mem_id',
    pst_mem_nick: 'pst_mem_nick'
  };

  export type Rs_board_postScalarFieldEnum = (typeof Rs_board_postScalarFieldEnum)[keyof typeof Rs_board_postScalarFieldEnum]


  export const Rs_mem_authScalarFieldEnum: {
    auth_idx: 'auth_idx',
    auth_email: 'auth_email',
    authNumber: 'authNumber',
    auth_datetime: 'auth_datetime'
  };

  export type Rs_mem_authScalarFieldEnum = (typeof Rs_mem_authScalarFieldEnum)[keyof typeof Rs_mem_authScalarFieldEnum]


  export const Rs_mem_tokenScalarFieldEnum: {
    mtk_idx: 'mtk_idx',
    mtk_refresh: 'mtk_refresh',
    mtk_email: 'mtk_email'
  };

  export type Rs_mem_tokenScalarFieldEnum = (typeof Rs_mem_tokenScalarFieldEnum)[keyof typeof Rs_mem_tokenScalarFieldEnum]


  export const Rs_board_likebad_logScalarFieldEnum: {
    log_idx: 'log_idx',
    log_cnt_like: 'log_cnt_like',
    log_cnt_bad: 'log_cnt_bad',
    log_update_datetime: 'log_update_datetime',
    log_update_timestemp: 'log_update_timestemp'
  };

  export type Rs_board_likebad_logScalarFieldEnum = (typeof Rs_board_likebad_logScalarFieldEnum)[keyof typeof Rs_board_likebad_logScalarFieldEnum]


  export const Rs_board_likebad_mapScalarFieldEnum: {
    blm_idx: 'blm_idx',
    blm_user_idx: 'blm_user_idx',
    blm_post_idx: 'blm_post_idx',
    blm_cmt_idx: 'blm_cmt_idx',
    blm_update_timestemp: 'blm_update_timestemp',
    blm_update_datetime: 'blm_update_datetime',
    blm_cnt_like: 'blm_cnt_like',
    blm_cnt_bad: 'blm_cnt_bad'
  };

  export type Rs_board_likebad_mapScalarFieldEnum = (typeof Rs_board_likebad_mapScalarFieldEnum)[keyof typeof Rs_board_likebad_mapScalarFieldEnum]


  export const Rs_noteScalarFieldEnum: {
    not_idx: 'not_idx',
    not_recv_id: 'not_recv_id',
    not_send_id: 'not_send_id',
    not_type: 'not_type',
    not_title: 'not_title',
    not_relate_post_idx: 'not_relate_post_idx',
    not_content: 'not_content',
    not_datetime: 'not_datetime',
    not_timestemp: 'not_timestemp'
  };

  export type Rs_noteScalarFieldEnum = (typeof Rs_noteScalarFieldEnum)[keyof typeof Rs_noteScalarFieldEnum]


  export const Rs_board_adminScalarFieldEnum: {
    adm_idx: 'adm_idx',
    adm_mem_idx: 'adm_mem_idx',
    adm_mem_id: 'adm_mem_id'
  };

  export type Rs_board_adminScalarFieldEnum = (typeof Rs_board_adminScalarFieldEnum)[keyof typeof Rs_board_adminScalarFieldEnum]


  export const Pris_memberScalarFieldEnum: {
    mem_idx: 'mem_idx',
    mem_email: 'mem_email',
    mem_password: 'mem_password'
  };

  export type Pris_memberScalarFieldEnum = (typeof Pris_memberScalarFieldEnum)[keyof typeof Pris_memberScalarFieldEnum]


  export const Rs_menuScalarFieldEnum: {
    menu_idx: 'menu_idx',
    menu_code: 'menu_code',
    ins_date: 'ins_date',
    upd_date: 'upd_date',
    menu_name: 'menu_name'
  };

  export type Rs_menuScalarFieldEnum = (typeof Rs_menuScalarFieldEnum)[keyof typeof Rs_menuScalarFieldEnum]


  export const Test2ScalarFieldEnum: {
    test_idx: 'test_idx',
    test_unique: 'test_unique',
    test_deletion: 'test_deletion'
  };

  export type Test2ScalarFieldEnum = (typeof Test2ScalarFieldEnum)[keyof typeof Test2ScalarFieldEnum]


  export const Pris_logScalarFieldEnum: {
    id: 'id',
    email: 'email'
  };

  export type Pris_logScalarFieldEnum = (typeof Pris_logScalarFieldEnum)[keyof typeof Pris_logScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type testWhereInput = {
    AND?: Enumerable<testWhereInput>
    OR?: Enumerable<testWhereInput>
    NOT?: Enumerable<testWhereInput>
    test_idx?: IntFilter | number
    test_value?: StringFilter | string
    test_deletion?: IntFilter | number
  }

  export type testOrderByInput = {
    test_idx?: SortOrder
    test_value?: SortOrder
    test_deletion?: SortOrder
  }

  export type testWhereUniqueInput = {
    test_idx?: number
  }

  export type board_cateWhereInput = {
    AND?: Enumerable<board_cateWhereInput>
    OR?: Enumerable<board_cateWhereInput>
    NOT?: Enumerable<board_cateWhereInput>
    tca_idx?: IntFilter | number
    tca_title?: StringFilter | string
    board_post?: Board_postListRelationFilter
  }

  export type board_cateOrderByInput = {
    tca_idx?: SortOrder
    tca_title?: SortOrder
  }

  export type board_cateWhereUniqueInput = {
    tca_idx?: number
  }

  export type board_postWhereInput = {
    AND?: Enumerable<board_postWhereInput>
    OR?: Enumerable<board_postWhereInput>
    NOT?: Enumerable<board_postWhereInput>
    bpo_idx?: IntFilter | number
    bpo_bca_idx?: IntFilter | number
    bpo_title?: StringFilter | string
    bpo_desc?: StringFilter | string
    board_cate?: XOR<board_cateWhereInput, Board_cateRelationFilter>
  }

  export type board_postOrderByInput = {
    bpo_idx?: SortOrder
    bpo_bca_idx?: SortOrder
    bpo_title?: SortOrder
    bpo_desc?: SortOrder
  }

  export type board_postWhereUniqueInput = {
    bpo_idx?: number
  }

  export type rs_memberWhereInput = {
    AND?: Enumerable<rs_memberWhereInput>
    OR?: Enumerable<rs_memberWhereInput>
    NOT?: Enumerable<rs_memberWhereInput>
    mem_idx?: IntFilter | number
    mem_userpw?: StringFilter | string
    mem_userid?: StringFilter | string
    mem_email?: StringFilter | string
    mem_lastlogin_datetime?: StringFilter | string
    mem_lastlogin_timestamp?: IntFilter | number
    mem_inactive_check?: StringNullableFilter | string | null
    mem_is_admin?: IntFilter | number
    mem_point?: IntFilter | number
    rs_mgr_mem?: XOR<rs_mgr_memWhereInput, Rs_mgr_memRelationFilter> | null
    rs_note_rs_memberTors_note_not_recv_id?: Rs_noteListRelationFilter
    rs_note_rs_memberTors_note_not_send_id?: Rs_noteListRelationFilter
    rs_point?: XOR<rs_pointWhereInput, Rs_pointRelationFilter> | null
  }

  export type rs_memberOrderByInput = {
    mem_idx?: SortOrder
    mem_userpw?: SortOrder
    mem_userid?: SortOrder
    mem_email?: SortOrder
    mem_lastlogin_datetime?: SortOrder
    mem_lastlogin_timestamp?: SortOrder
    mem_inactive_check?: SortOrder
    mem_is_admin?: SortOrder
    mem_point?: SortOrder
  }

  export type rs_memberWhereUniqueInput = {
    mem_idx?: number
    mem_userid?: string
    mem_email?: string
  }

  export type rs_mem_login_logWhereInput = {
    AND?: Enumerable<rs_mem_login_logWhereInput>
    OR?: Enumerable<rs_mem_login_logWhereInput>
    NOT?: Enumerable<rs_mem_login_logWhereInput>
    mll_idx?: IntFilter | number
    mll_success?: IntFilter | number
    mll_mem_idx?: IntFilter | number
    mll_email?: StringFilter | string
    mll_datetime?: StringFilter | string
    mll_reason?: StringFilter | string
    mll_timestamp?: IntNullableFilter | number | null
    mll_ip?: StringFilter | string
    mll_fail_count?: IntFilter | number
  }

  export type rs_mem_login_logOrderByInput = {
    mll_idx?: SortOrder
    mll_success?: SortOrder
    mll_mem_idx?: SortOrder
    mll_email?: SortOrder
    mll_datetime?: SortOrder
    mll_reason?: SortOrder
    mll_timestamp?: SortOrder
    mll_ip?: SortOrder
    mll_fail_count?: SortOrder
  }

  export type rs_mem_login_logWhereUniqueInput = {
    mll_idx?: number
  }

  export type rs_mgrWhereInput = {
    AND?: Enumerable<rs_mgrWhereInput>
    OR?: Enumerable<rs_mgrWhereInput>
    NOT?: Enumerable<rs_mgrWhereInput>
    mgr_id?: IntFilter | number
    mgr_title?: StringFilter | string
    mgr_datetime?: StringFilter | string
    mgr_timestemp?: IntFilter | number
    rs_mgr_mem?: Rs_mgr_memListRelationFilter
  }

  export type rs_mgrOrderByInput = {
    mgr_id?: SortOrder
    mgr_title?: SortOrder
    mgr_datetime?: SortOrder
    mgr_timestemp?: SortOrder
  }

  export type rs_mgrWhereUniqueInput = {
    mgr_id?: number
  }

  export type rs_mgr_memWhereInput = {
    AND?: Enumerable<rs_mgr_memWhereInput>
    OR?: Enumerable<rs_mgr_memWhereInput>
    NOT?: Enumerable<rs_mgr_memWhereInput>
    mgm_mgr_idx?: IntFilter | number
    mgm_mem_idx?: IntFilter | number
    mgm_datetime?: StringFilter | string
    mgm_timestemp?: IntFilter | number
    rs_member?: XOR<rs_memberWhereInput, Rs_memberRelationFilter>
    rs_mgr?: XOR<rs_mgrWhereInput, Rs_mgrRelationFilter>
  }

  export type rs_mgr_memOrderByInput = {
    mgm_mgr_idx?: SortOrder
    mgm_mem_idx?: SortOrder
    mgm_datetime?: SortOrder
    mgm_timestemp?: SortOrder
  }

  export type rs_mgr_memWhereUniqueInput = {
    mgm_mem_idx?: number
    mgm_mgr_idx_mgm_mem_idx?: Mgm_mgr_idxMgm_mem_idxCompoundUniqueInput
  }

  export type rs_point_logWhereInput = {
    AND?: Enumerable<rs_point_logWhereInput>
    OR?: Enumerable<rs_point_logWhereInput>
    NOT?: Enumerable<rs_point_logWhereInput>
    poi_mem_idx?: IntFilter | number
    poi_mem_id?: IntFilter | number
    poi_inc_poi?: StringFilter | string
    poi_type?: StringNullableFilter | string | null
    poi_datetime?: StringFilter | string
    poi_timestemp?: IntFilter | number
  }

  export type rs_point_logOrderByInput = {
    poi_mem_idx?: SortOrder
    poi_mem_id?: SortOrder
    poi_inc_poi?: SortOrder
    poi_type?: SortOrder
    poi_datetime?: SortOrder
    poi_timestemp?: SortOrder
  }

  export type rs_point_logWhereUniqueInput = {
    poi_mem_idx_poi_mem_id?: Poi_mem_idxPoi_mem_idCompoundUniqueInput
  }

  export type rs_pointWhereInput = {
    AND?: Enumerable<rs_pointWhereInput>
    OR?: Enumerable<rs_pointWhereInput>
    NOT?: Enumerable<rs_pointWhereInput>
    idx?: IntFilter | number
    poi_mem_id?: IntFilter | number
    poi_point?: IntFilter | number
    poi_datetime?: StringFilter | string
    poi_timestemp?: IntFilter | number
    rs_member?: XOR<rs_memberWhereInput, Rs_memberRelationFilter>
  }

  export type rs_pointOrderByInput = {
    idx?: SortOrder
    poi_mem_id?: SortOrder
    poi_point?: SortOrder
    poi_datetime?: SortOrder
    poi_timestemp?: SortOrder
  }

  export type rs_pointWhereUniqueInput = {
    idx?: number
    poi_mem_id?: number
  }

  export type rs_board_categoryWhereInput = {
    AND?: Enumerable<rs_board_categoryWhereInput>
    OR?: Enumerable<rs_board_categoryWhereInput>
    NOT?: Enumerable<rs_board_categoryWhereInput>
    cat_idx?: IntFilter | number
    cat_title?: StringFilter | string
  }

  export type rs_board_categoryOrderByInput = {
    cat_idx?: SortOrder
    cat_title?: SortOrder
  }

  export type rs_board_categoryWhereUniqueInput = {
    cat_idx?: number
  }

  export type rs_board_commentWhereInput = {
    AND?: Enumerable<rs_board_commentWhereInput>
    OR?: Enumerable<rs_board_commentWhereInput>
    NOT?: Enumerable<rs_board_commentWhereInput>
    cmt_idx?: IntFilter | number
    cmt_content?: StringFilter | string
    cmt_mem_idx?: IntFilter | number
    cmt_mem_id?: StringFilter | string
    cmt_mem_nick?: StringFilter | string
    cmt_pass?: IntNullableFilter | number | null
    cmt_create_datetime?: StringFilter | string
    cmt_create_timestemp?: IntFilter | number
    cmt_update_datetime?: StringFilter | string
    cmt_update_timestemp?: IntFilter | number
    rs_board_likebad_map?: Rs_board_likebad_mapListRelationFilter
  }

  export type rs_board_commentOrderByInput = {
    cmt_idx?: SortOrder
    cmt_content?: SortOrder
    cmt_mem_idx?: SortOrder
    cmt_mem_id?: SortOrder
    cmt_mem_nick?: SortOrder
    cmt_pass?: SortOrder
    cmt_create_datetime?: SortOrder
    cmt_create_timestemp?: SortOrder
    cmt_update_datetime?: SortOrder
    cmt_update_timestemp?: SortOrder
  }

  export type rs_board_commentWhereUniqueInput = {
    cmt_idx_cmt_mem_idx?: Cmt_idxCmt_mem_idxCompoundUniqueInput
  }

  export type rs_board_postWhereInput = {
    AND?: Enumerable<rs_board_postWhereInput>
    OR?: Enumerable<rs_board_postWhereInput>
    NOT?: Enumerable<rs_board_postWhereInput>
    pst_idx?: IntFilter | number
    pst_title?: StringFilter | string
    pst_content?: StringFilter | string
    pst_pass?: StringNullableFilter | string | null
    pst_create_datetime?: StringFilter | string
    pst_create_timestemp?: IntFilter | number
    pst_update_datetime?: StringFilter | string
    pst_update_timestemp?: IntFilter | number
    pst_hit?: IntFilter | number
    pst_cat_idx?: IntFilter | number
    pst_mem_idx?: IntFilter | number
    pst_mem_id?: StringFilter | string
    pst_mem_nick?: StringFilter | string
    rs_board_likebad_map?: Rs_board_likebad_mapListRelationFilter
    rs_note?: Rs_noteListRelationFilter
  }

  export type rs_board_postOrderByInput = {
    pst_idx?: SortOrder
    pst_title?: SortOrder
    pst_content?: SortOrder
    pst_pass?: SortOrder
    pst_create_datetime?: SortOrder
    pst_create_timestemp?: SortOrder
    pst_update_datetime?: SortOrder
    pst_update_timestemp?: SortOrder
    pst_hit?: SortOrder
    pst_cat_idx?: SortOrder
    pst_mem_idx?: SortOrder
    pst_mem_id?: SortOrder
    pst_mem_nick?: SortOrder
  }

  export type rs_board_postWhereUniqueInput = {
    pst_idx?: number
    pst_idx_pst_mem_idx?: Pst_idxPst_mem_idxCompoundUniqueInput
  }

  export type rs_mem_authWhereInput = {
    AND?: Enumerable<rs_mem_authWhereInput>
    OR?: Enumerable<rs_mem_authWhereInput>
    NOT?: Enumerable<rs_mem_authWhereInput>
    auth_idx?: IntFilter | number
    auth_email?: StringFilter | string
    authNumber?: IntFilter | number
    auth_datetime?: StringFilter | string
  }

  export type rs_mem_authOrderByInput = {
    auth_idx?: SortOrder
    auth_email?: SortOrder
    authNumber?: SortOrder
    auth_datetime?: SortOrder
  }

  export type rs_mem_authWhereUniqueInput = {
    auth_idx?: number
  }

  export type rs_mem_tokenWhereInput = {
    AND?: Enumerable<rs_mem_tokenWhereInput>
    OR?: Enumerable<rs_mem_tokenWhereInput>
    NOT?: Enumerable<rs_mem_tokenWhereInput>
    mtk_idx?: IntFilter | number
    mtk_refresh?: StringFilter | string
    mtk_email?: StringFilter | string
  }

  export type rs_mem_tokenOrderByInput = {
    mtk_idx?: SortOrder
    mtk_refresh?: SortOrder
    mtk_email?: SortOrder
  }

  export type rs_mem_tokenWhereUniqueInput = {
    mtk_idx?: number
  }

  export type rs_board_likebad_logWhereInput = {
    AND?: Enumerable<rs_board_likebad_logWhereInput>
    OR?: Enumerable<rs_board_likebad_logWhereInput>
    NOT?: Enumerable<rs_board_likebad_logWhereInput>
    log_idx?: IntFilter | number
    log_cnt_like?: IntNullableFilter | number | null
    log_cnt_bad?: IntNullableFilter | number | null
    log_update_datetime?: StringFilter | string
    log_update_timestemp?: IntFilter | number
  }

  export type rs_board_likebad_logOrderByInput = {
    log_idx?: SortOrder
    log_cnt_like?: SortOrder
    log_cnt_bad?: SortOrder
    log_update_datetime?: SortOrder
    log_update_timestemp?: SortOrder
  }

  export type rs_board_likebad_logWhereUniqueInput = {
    log_idx?: number
  }

  export type rs_board_likebad_mapWhereInput = {
    AND?: Enumerable<rs_board_likebad_mapWhereInput>
    OR?: Enumerable<rs_board_likebad_mapWhereInput>
    NOT?: Enumerable<rs_board_likebad_mapWhereInput>
    blm_idx?: IntFilter | number
    blm_user_idx?: IntFilter | number
    blm_post_idx?: IntNullableFilter | number | null
    blm_cmt_idx?: IntNullableFilter | number | null
    blm_update_timestemp?: IntFilter | number
    blm_update_datetime?: StringFilter | string
    blm_cnt_like?: IntNullableFilter | number | null
    blm_cnt_bad?: IntNullableFilter | number | null
    rs_board_comment?: XOR<rs_board_commentWhereInput, Rs_board_commentRelationFilter> | null
    rs_board_post?: XOR<rs_board_postWhereInput, Rs_board_postRelationFilter> | null
  }

  export type rs_board_likebad_mapOrderByInput = {
    blm_idx?: SortOrder
    blm_user_idx?: SortOrder
    blm_post_idx?: SortOrder
    blm_cmt_idx?: SortOrder
    blm_update_timestemp?: SortOrder
    blm_update_datetime?: SortOrder
    blm_cnt_like?: SortOrder
    blm_cnt_bad?: SortOrder
  }

  export type rs_board_likebad_mapWhereUniqueInput = {
    blm_idx?: number
  }

  export type rs_noteWhereInput = {
    AND?: Enumerable<rs_noteWhereInput>
    OR?: Enumerable<rs_noteWhereInput>
    NOT?: Enumerable<rs_noteWhereInput>
    not_idx?: IntFilter | number
    not_recv_id?: IntNullableFilter | number | null
    not_send_id?: IntNullableFilter | number | null
    not_type?: IntFilter | number
    not_title?: StringFilter | string
    not_relate_post_idx?: IntNullableFilter | number | null
    not_content?: StringFilter | string
    not_datetime?: StringFilter | string
    not_timestemp?: IntFilter | number
    rs_member_rs_memberTors_note_not_recv_id?: XOR<rs_memberWhereInput, Rs_memberRelationFilter> | null
    rs_board_post?: XOR<rs_board_postWhereInput, Rs_board_postRelationFilter> | null
    rs_member_rs_memberTors_note_not_send_id?: XOR<rs_memberWhereInput, Rs_memberRelationFilter> | null
  }

  export type rs_noteOrderByInput = {
    not_idx?: SortOrder
    not_recv_id?: SortOrder
    not_send_id?: SortOrder
    not_type?: SortOrder
    not_title?: SortOrder
    not_relate_post_idx?: SortOrder
    not_content?: SortOrder
    not_datetime?: SortOrder
    not_timestemp?: SortOrder
  }

  export type rs_noteWhereUniqueInput = {
    not_idx?: number
  }

  export type rs_board_adminWhereInput = {
    AND?: Enumerable<rs_board_adminWhereInput>
    OR?: Enumerable<rs_board_adminWhereInput>
    NOT?: Enumerable<rs_board_adminWhereInput>
    adm_idx?: IntFilter | number
    adm_mem_idx?: IntFilter | number
    adm_mem_id?: StringFilter | string
  }

  export type rs_board_adminOrderByInput = {
    adm_idx?: SortOrder
    adm_mem_idx?: SortOrder
    adm_mem_id?: SortOrder
  }

  export type rs_board_adminWhereUniqueInput = {
    adm_idx?: number
  }

  export type pris_memberWhereInput = {
    AND?: Enumerable<pris_memberWhereInput>
    OR?: Enumerable<pris_memberWhereInput>
    NOT?: Enumerable<pris_memberWhereInput>
    mem_idx?: IntFilter | number
    mem_email?: StringFilter | string
    mem_password?: StringFilter | string
  }

  export type pris_memberOrderByInput = {
    mem_idx?: SortOrder
    mem_email?: SortOrder
    mem_password?: SortOrder
  }

  export type pris_memberWhereUniqueInput = {
    mem_idx?: number
    mem_email?: string
  }

  export type rs_menuWhereInput = {
    AND?: Enumerable<rs_menuWhereInput>
    OR?: Enumerable<rs_menuWhereInput>
    NOT?: Enumerable<rs_menuWhereInput>
    menu_idx?: IntFilter | number
    menu_code?: StringNullableFilter | string | null
    ins_date?: StringNullableFilter | string | null
    upd_date?: StringNullableFilter | string | null
    menu_name?: StringNullableFilter | string | null
  }

  export type rs_menuOrderByInput = {
    menu_idx?: SortOrder
    menu_code?: SortOrder
    ins_date?: SortOrder
    upd_date?: SortOrder
    menu_name?: SortOrder
  }

  export type rs_menuWhereUniqueInput = {
    menu_idx?: number
  }

  export type test2WhereInput = {
    AND?: Enumerable<test2WhereInput>
    OR?: Enumerable<test2WhereInput>
    NOT?: Enumerable<test2WhereInput>
    test_idx?: IntFilter | number
    test_unique?: StringFilter | string
    test_deletion?: IntFilter | number
  }

  export type test2OrderByInput = {
    test_idx?: SortOrder
    test_unique?: SortOrder
    test_deletion?: SortOrder
  }

  export type test2WhereUniqueInput = {
    test_idx?: number
    test_unique?: string
    test_unique_test_deletion_unique?: Test_unique_test_deletion_uniqueCompoundUniqueInput
  }

  export type pris_logWhereInput = {
    AND?: Enumerable<pris_logWhereInput>
    OR?: Enumerable<pris_logWhereInput>
    NOT?: Enumerable<pris_logWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
  }

  export type pris_logOrderByInput = {
    id?: SortOrder
    email?: SortOrder
  }

  export type pris_logWhereUniqueInput = {
    id?: number
  }

  export type testCreateInput = {
    test_value: string
    test_deletion?: number
  }

  export type testUpdateInput = {
    test_value?: StringFieldUpdateOperationsInput | string
    test_deletion?: IntFieldUpdateOperationsInput | number
  }

  export type testUpdateManyMutationInput = {
    test_value?: StringFieldUpdateOperationsInput | string
    test_deletion?: IntFieldUpdateOperationsInput | number
  }

  export type board_cateCreateInput = {
    tca_title: string
    board_post?: board_postCreateManyWithoutBoard_cateInput
  }

  export type board_cateUpdateInput = {
    tca_title?: StringFieldUpdateOperationsInput | string
    board_post?: board_postUpdateManyWithoutBoard_cateInput
  }

  export type board_cateUpdateManyMutationInput = {
    tca_title?: StringFieldUpdateOperationsInput | string
  }

  export type board_postCreateInput = {
    bpo_title: string
    bpo_desc: string
    board_cate: board_cateCreateOneWithoutBoard_postInput
  }

  export type board_postUpdateInput = {
    bpo_title?: StringFieldUpdateOperationsInput | string
    bpo_desc?: StringFieldUpdateOperationsInput | string
    board_cate?: board_cateUpdateOneRequiredWithoutBoard_postInput
  }

  export type board_postUpdateManyMutationInput = {
    bpo_title?: StringFieldUpdateOperationsInput | string
    bpo_desc?: StringFieldUpdateOperationsInput | string
  }

  export type rs_memberCreateInput = {
    mem_userpw?: string
    mem_userid?: string
    mem_email?: string
    mem_lastlogin_datetime: string
    mem_lastlogin_timestamp: number
    mem_inactive_check?: string | null
    mem_is_admin?: number
    mem_point?: number
    rs_mgr_mem?: rs_mgr_memCreateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
    rs_point?: rs_pointCreateOneWithoutRs_memberInput
  }

  export type rs_memberUpdateInput = {
    mem_userpw?: StringFieldUpdateOperationsInput | string
    mem_userid?: StringFieldUpdateOperationsInput | string
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_datetime?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_timestamp?: IntFieldUpdateOperationsInput | number
    mem_inactive_check?: NullableStringFieldUpdateOperationsInput | string | null
    mem_is_admin?: IntFieldUpdateOperationsInput | number
    mem_point?: IntFieldUpdateOperationsInput | number
    rs_mgr_mem?: rs_mgr_memUpdateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
    rs_point?: rs_pointUpdateOneWithoutRs_memberInput
  }

  export type rs_memberUpdateManyMutationInput = {
    mem_userpw?: StringFieldUpdateOperationsInput | string
    mem_userid?: StringFieldUpdateOperationsInput | string
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_datetime?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_timestamp?: IntFieldUpdateOperationsInput | number
    mem_inactive_check?: NullableStringFieldUpdateOperationsInput | string | null
    mem_is_admin?: IntFieldUpdateOperationsInput | number
    mem_point?: IntFieldUpdateOperationsInput | number
  }

  export type rs_mem_login_logCreateInput = {
    mll_success: number
    mll_mem_idx?: number
    mll_email?: string
    mll_datetime: string
    mll_reason?: string
    mll_timestamp?: number | null
    mll_ip: string
    mll_fail_count?: number
  }

  export type rs_mem_login_logUpdateInput = {
    mll_success?: IntFieldUpdateOperationsInput | number
    mll_mem_idx?: IntFieldUpdateOperationsInput | number
    mll_email?: StringFieldUpdateOperationsInput | string
    mll_datetime?: StringFieldUpdateOperationsInput | string
    mll_reason?: StringFieldUpdateOperationsInput | string
    mll_timestamp?: NullableIntFieldUpdateOperationsInput | number | null
    mll_ip?: StringFieldUpdateOperationsInput | string
    mll_fail_count?: IntFieldUpdateOperationsInput | number
  }

  export type rs_mem_login_logUpdateManyMutationInput = {
    mll_success?: IntFieldUpdateOperationsInput | number
    mll_mem_idx?: IntFieldUpdateOperationsInput | number
    mll_email?: StringFieldUpdateOperationsInput | string
    mll_datetime?: StringFieldUpdateOperationsInput | string
    mll_reason?: StringFieldUpdateOperationsInput | string
    mll_timestamp?: NullableIntFieldUpdateOperationsInput | number | null
    mll_ip?: StringFieldUpdateOperationsInput | string
    mll_fail_count?: IntFieldUpdateOperationsInput | number
  }

  export type rs_mgrCreateInput = {
    mgr_id: number
    mgr_title: string
    mgr_datetime: string
    mgr_timestemp: number
    rs_mgr_mem?: rs_mgr_memCreateManyWithoutRs_mgrInput
  }

  export type rs_mgrUpdateInput = {
    mgr_id?: IntFieldUpdateOperationsInput | number
    mgr_title?: StringFieldUpdateOperationsInput | string
    mgr_datetime?: StringFieldUpdateOperationsInput | string
    mgr_timestemp?: IntFieldUpdateOperationsInput | number
    rs_mgr_mem?: rs_mgr_memUpdateManyWithoutRs_mgrInput
  }

  export type rs_mgrUpdateManyMutationInput = {
    mgr_id?: IntFieldUpdateOperationsInput | number
    mgr_title?: StringFieldUpdateOperationsInput | string
    mgr_datetime?: StringFieldUpdateOperationsInput | string
    mgr_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_mgr_memCreateInput = {
    mgm_datetime: string
    mgm_timestemp: number
    rs_member: rs_memberCreateOneWithoutRs_mgr_memInput
    rs_mgr: rs_mgrCreateOneWithoutRs_mgr_memInput
  }

  export type rs_mgr_memUpdateInput = {
    mgm_datetime?: StringFieldUpdateOperationsInput | string
    mgm_timestemp?: IntFieldUpdateOperationsInput | number
    rs_member?: rs_memberUpdateOneRequiredWithoutRs_mgr_memInput
    rs_mgr?: rs_mgrUpdateOneRequiredWithoutRs_mgr_memInput
  }

  export type rs_mgr_memUpdateManyMutationInput = {
    mgm_datetime?: StringFieldUpdateOperationsInput | string
    mgm_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_point_logCreateInput = {
    poi_mem_idx?: number
    poi_mem_id: number
    poi_inc_poi: string
    poi_type?: string | null
    poi_datetime: string
    poi_timestemp: number
  }

  export type rs_point_logUpdateInput = {
    poi_mem_idx?: IntFieldUpdateOperationsInput | number
    poi_mem_id?: IntFieldUpdateOperationsInput | number
    poi_inc_poi?: StringFieldUpdateOperationsInput | string
    poi_type?: NullableStringFieldUpdateOperationsInput | string | null
    poi_datetime?: StringFieldUpdateOperationsInput | string
    poi_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_point_logUpdateManyMutationInput = {
    poi_mem_idx?: IntFieldUpdateOperationsInput | number
    poi_mem_id?: IntFieldUpdateOperationsInput | number
    poi_inc_poi?: StringFieldUpdateOperationsInput | string
    poi_type?: NullableStringFieldUpdateOperationsInput | string | null
    poi_datetime?: StringFieldUpdateOperationsInput | string
    poi_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_pointCreateInput = {
    poi_point: number
    poi_datetime: string
    poi_timestemp: number
    rs_member: rs_memberCreateOneWithoutRs_pointInput
  }

  export type rs_pointUpdateInput = {
    poi_point?: IntFieldUpdateOperationsInput | number
    poi_datetime?: StringFieldUpdateOperationsInput | string
    poi_timestemp?: IntFieldUpdateOperationsInput | number
    rs_member?: rs_memberUpdateOneRequiredWithoutRs_pointInput
  }

  export type rs_pointUpdateManyMutationInput = {
    poi_point?: IntFieldUpdateOperationsInput | number
    poi_datetime?: StringFieldUpdateOperationsInput | string
    poi_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_board_categoryCreateInput = {
    cat_idx: number
    cat_title: string
  }

  export type rs_board_categoryUpdateInput = {
    cat_idx?: IntFieldUpdateOperationsInput | number
    cat_title?: StringFieldUpdateOperationsInput | string
  }

  export type rs_board_categoryUpdateManyMutationInput = {
    cat_idx?: IntFieldUpdateOperationsInput | number
    cat_title?: StringFieldUpdateOperationsInput | string
  }

  export type rs_board_commentCreateInput = {
    cmt_idx?: number
    cmt_content: string
    cmt_mem_idx: number
    cmt_mem_id: string
    cmt_mem_nick: string
    cmt_pass?: number | null
    cmt_create_datetime: string
    cmt_create_timestemp: number
    cmt_update_datetime: string
    cmt_update_timestemp: number
    rs_board_likebad_map?: rs_board_likebad_mapCreateManyWithoutRs_board_commentInput
  }

  export type rs_board_commentUpdateInput = {
    cmt_idx?: IntFieldUpdateOperationsInput | number
    cmt_content?: StringFieldUpdateOperationsInput | string
    cmt_mem_idx?: IntFieldUpdateOperationsInput | number
    cmt_mem_id?: StringFieldUpdateOperationsInput | string
    cmt_mem_nick?: StringFieldUpdateOperationsInput | string
    cmt_pass?: NullableIntFieldUpdateOperationsInput | number | null
    cmt_create_datetime?: StringFieldUpdateOperationsInput | string
    cmt_create_timestemp?: IntFieldUpdateOperationsInput | number
    cmt_update_datetime?: StringFieldUpdateOperationsInput | string
    cmt_update_timestemp?: IntFieldUpdateOperationsInput | number
    rs_board_likebad_map?: rs_board_likebad_mapUpdateManyWithoutRs_board_commentInput
  }

  export type rs_board_commentUpdateManyMutationInput = {
    cmt_idx?: IntFieldUpdateOperationsInput | number
    cmt_content?: StringFieldUpdateOperationsInput | string
    cmt_mem_idx?: IntFieldUpdateOperationsInput | number
    cmt_mem_id?: StringFieldUpdateOperationsInput | string
    cmt_mem_nick?: StringFieldUpdateOperationsInput | string
    cmt_pass?: NullableIntFieldUpdateOperationsInput | number | null
    cmt_create_datetime?: StringFieldUpdateOperationsInput | string
    cmt_create_timestemp?: IntFieldUpdateOperationsInput | number
    cmt_update_datetime?: StringFieldUpdateOperationsInput | string
    cmt_update_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_board_postCreateInput = {
    pst_idx?: number
    pst_title: string
    pst_content: string
    pst_pass?: string | null
    pst_create_datetime: string
    pst_create_timestemp: number
    pst_update_datetime: string
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
    pst_mem_id: string
    pst_mem_nick: string
    rs_board_likebad_map?: rs_board_likebad_mapCreateManyWithoutRs_board_postInput
    rs_note?: rs_noteCreateManyWithoutRs_board_postInput
  }

  export type rs_board_postUpdateInput = {
    pst_title?: StringFieldUpdateOperationsInput | string
    pst_content?: StringFieldUpdateOperationsInput | string
    pst_pass?: NullableStringFieldUpdateOperationsInput | string | null
    pst_create_datetime?: StringFieldUpdateOperationsInput | string
    pst_create_timestemp?: IntFieldUpdateOperationsInput | number
    pst_update_datetime?: StringFieldUpdateOperationsInput | string
    pst_update_timestemp?: IntFieldUpdateOperationsInput | number
    pst_hit?: IntFieldUpdateOperationsInput | number
    pst_cat_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_id?: StringFieldUpdateOperationsInput | string
    pst_mem_nick?: StringFieldUpdateOperationsInput | string
    rs_board_likebad_map?: rs_board_likebad_mapUpdateManyWithoutRs_board_postInput
    rs_note?: rs_noteUpdateManyWithoutRs_board_postInput
  }

  export type rs_board_postUpdateManyMutationInput = {
    pst_title?: StringFieldUpdateOperationsInput | string
    pst_content?: StringFieldUpdateOperationsInput | string
    pst_pass?: NullableStringFieldUpdateOperationsInput | string | null
    pst_create_datetime?: StringFieldUpdateOperationsInput | string
    pst_create_timestemp?: IntFieldUpdateOperationsInput | number
    pst_update_datetime?: StringFieldUpdateOperationsInput | string
    pst_update_timestemp?: IntFieldUpdateOperationsInput | number
    pst_hit?: IntFieldUpdateOperationsInput | number
    pst_cat_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_id?: StringFieldUpdateOperationsInput | string
    pst_mem_nick?: StringFieldUpdateOperationsInput | string
  }

  export type rs_mem_authCreateInput = {
    auth_email?: string
    authNumber: number
    auth_datetime: string
  }

  export type rs_mem_authUpdateInput = {
    auth_email?: StringFieldUpdateOperationsInput | string
    authNumber?: IntFieldUpdateOperationsInput | number
    auth_datetime?: StringFieldUpdateOperationsInput | string
  }

  export type rs_mem_authUpdateManyMutationInput = {
    auth_email?: StringFieldUpdateOperationsInput | string
    authNumber?: IntFieldUpdateOperationsInput | number
    auth_datetime?: StringFieldUpdateOperationsInput | string
  }

  export type rs_mem_tokenCreateInput = {
    mtk_refresh: string
    mtk_email: string
  }

  export type rs_mem_tokenUpdateInput = {
    mtk_refresh?: StringFieldUpdateOperationsInput | string
    mtk_email?: StringFieldUpdateOperationsInput | string
  }

  export type rs_mem_tokenUpdateManyMutationInput = {
    mtk_refresh?: StringFieldUpdateOperationsInput | string
    mtk_email?: StringFieldUpdateOperationsInput | string
  }

  export type rs_board_likebad_logCreateInput = {
    log_cnt_like?: number | null
    log_cnt_bad?: number | null
    log_update_datetime: string
    log_update_timestemp: number
  }

  export type rs_board_likebad_logUpdateInput = {
    log_cnt_like?: NullableIntFieldUpdateOperationsInput | number | null
    log_cnt_bad?: NullableIntFieldUpdateOperationsInput | number | null
    log_update_datetime?: StringFieldUpdateOperationsInput | string
    log_update_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_board_likebad_logUpdateManyMutationInput = {
    log_cnt_like?: NullableIntFieldUpdateOperationsInput | number | null
    log_cnt_bad?: NullableIntFieldUpdateOperationsInput | number | null
    log_update_datetime?: StringFieldUpdateOperationsInput | string
    log_update_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_board_likebad_mapCreateInput = {
    blm_user_idx: number
    blm_update_timestemp: number
    blm_update_datetime: string
    blm_cnt_like?: number | null
    blm_cnt_bad?: number | null
    rs_board_comment?: rs_board_commentCreateOneWithoutRs_board_likebad_mapInput
    rs_board_post?: rs_board_postCreateOneWithoutRs_board_likebad_mapInput
  }

  export type rs_board_likebad_mapUpdateInput = {
    blm_user_idx?: IntFieldUpdateOperationsInput | number
    blm_update_timestemp?: IntFieldUpdateOperationsInput | number
    blm_update_datetime?: StringFieldUpdateOperationsInput | string
    blm_cnt_like?: NullableIntFieldUpdateOperationsInput | number | null
    blm_cnt_bad?: NullableIntFieldUpdateOperationsInput | number | null
    rs_board_comment?: rs_board_commentUpdateOneWithoutRs_board_likebad_mapInput
    rs_board_post?: rs_board_postUpdateOneWithoutRs_board_likebad_mapInput
  }

  export type rs_board_likebad_mapUpdateManyMutationInput = {
    blm_user_idx?: IntFieldUpdateOperationsInput | number
    blm_update_timestemp?: IntFieldUpdateOperationsInput | number
    blm_update_datetime?: StringFieldUpdateOperationsInput | string
    blm_cnt_like?: NullableIntFieldUpdateOperationsInput | number | null
    blm_cnt_bad?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type rs_noteCreateInput = {
    not_type: number
    not_title: string
    not_content: string
    not_datetime: string
    not_timestemp: number
    rs_member_rs_memberTors_note_not_recv_id?: rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput
    rs_board_post?: rs_board_postCreateOneWithoutRs_noteInput
    rs_member_rs_memberTors_note_not_send_id?: rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_send_idInput
  }

  export type rs_noteUpdateInput = {
    not_type?: IntFieldUpdateOperationsInput | number
    not_title?: StringFieldUpdateOperationsInput | string
    not_content?: StringFieldUpdateOperationsInput | string
    not_datetime?: StringFieldUpdateOperationsInput | string
    not_timestemp?: IntFieldUpdateOperationsInput | number
    rs_member_rs_memberTors_note_not_recv_id?: rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput
    rs_board_post?: rs_board_postUpdateOneWithoutRs_noteInput
    rs_member_rs_memberTors_note_not_send_id?: rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_send_idInput
  }

  export type rs_noteUpdateManyMutationInput = {
    not_type?: IntFieldUpdateOperationsInput | number
    not_title?: StringFieldUpdateOperationsInput | string
    not_content?: StringFieldUpdateOperationsInput | string
    not_datetime?: StringFieldUpdateOperationsInput | string
    not_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_board_adminCreateInput = {
    adm_mem_idx: number
    adm_mem_id: string
  }

  export type rs_board_adminUpdateInput = {
    adm_mem_idx?: IntFieldUpdateOperationsInput | number
    adm_mem_id?: StringFieldUpdateOperationsInput | string
  }

  export type rs_board_adminUpdateManyMutationInput = {
    adm_mem_idx?: IntFieldUpdateOperationsInput | number
    adm_mem_id?: StringFieldUpdateOperationsInput | string
  }

  export type pris_memberCreateInput = {
    mem_email: string
    mem_password: string
  }

  export type pris_memberUpdateInput = {
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_password?: StringFieldUpdateOperationsInput | string
  }

  export type pris_memberUpdateManyMutationInput = {
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_password?: StringFieldUpdateOperationsInput | string
  }

  export type rs_menuCreateInput = {
    menu_idx: number
    menu_code?: string | null
    ins_date?: string | null
    upd_date?: string | null
    menu_name?: string | null
  }

  export type rs_menuUpdateInput = {
    menu_idx?: IntFieldUpdateOperationsInput | number
    menu_code?: NullableStringFieldUpdateOperationsInput | string | null
    ins_date?: NullableStringFieldUpdateOperationsInput | string | null
    upd_date?: NullableStringFieldUpdateOperationsInput | string | null
    menu_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type rs_menuUpdateManyMutationInput = {
    menu_idx?: IntFieldUpdateOperationsInput | number
    menu_code?: NullableStringFieldUpdateOperationsInput | string | null
    ins_date?: NullableStringFieldUpdateOperationsInput | string | null
    upd_date?: NullableStringFieldUpdateOperationsInput | string | null
    menu_name?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type test2CreateInput = {
    test_unique: string
    test_deletion?: number
  }

  export type test2UpdateInput = {
    test_unique?: StringFieldUpdateOperationsInput | string
    test_deletion?: IntFieldUpdateOperationsInput | number
  }

  export type test2UpdateManyMutationInput = {
    test_unique?: StringFieldUpdateOperationsInput | string
    test_deletion?: IntFieldUpdateOperationsInput | number
  }

  export type pris_logCreateInput = {
    email: string
  }

  export type pris_logUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type pris_logUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type Board_postListRelationFilter = {
    every?: board_postWhereInput
    some?: board_postWhereInput
    none?: board_postWhereInput
  }

  export type Board_cateRelationFilter = {
    is?: board_cateWhereInput
    isNot?: board_cateWhereInput
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type Rs_mgr_memRelationFilter = {
    is?: rs_mgr_memWhereInput | null
    isNot?: rs_mgr_memWhereInput | null
  }

  export type Rs_noteListRelationFilter = {
    every?: rs_noteWhereInput
    some?: rs_noteWhereInput
    none?: rs_noteWhereInput
  }

  export type Rs_pointRelationFilter = {
    is?: rs_pointWhereInput | null
    isNot?: rs_pointWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type Rs_mgr_memListRelationFilter = {
    every?: rs_mgr_memWhereInput
    some?: rs_mgr_memWhereInput
    none?: rs_mgr_memWhereInput
  }

  export type Rs_memberRelationFilter = {
    is?: rs_memberWhereInput
    isNot?: rs_memberWhereInput
  }

  export type Rs_mgrRelationFilter = {
    is?: rs_mgrWhereInput
    isNot?: rs_mgrWhereInput
  }

  export type Mgm_mgr_idxMgm_mem_idxCompoundUniqueInput = {
    mgm_mgr_idx: number
    mgm_mem_idx: number
  }

  export type Poi_mem_idxPoi_mem_idCompoundUniqueInput = {
    poi_mem_idx: number
    poi_mem_id: number
  }

  export type Rs_board_likebad_mapListRelationFilter = {
    every?: rs_board_likebad_mapWhereInput
    some?: rs_board_likebad_mapWhereInput
    none?: rs_board_likebad_mapWhereInput
  }

  export type Cmt_idxCmt_mem_idxCompoundUniqueInput = {
    cmt_idx: number
    cmt_mem_idx: number
  }

  export type Pst_idxPst_mem_idxCompoundUniqueInput = {
    pst_idx: number
    pst_mem_idx: number
  }

  export type Rs_board_commentRelationFilter = {
    is?: rs_board_commentWhereInput | null
    isNot?: rs_board_commentWhereInput | null
  }

  export type Rs_board_postRelationFilter = {
    is?: rs_board_postWhereInput | null
    isNot?: rs_board_postWhereInput | null
  }

  export type Test_unique_test_deletion_uniqueCompoundUniqueInput = {
    test_unique: string
    test_deletion: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type board_postCreateManyWithoutBoard_cateInput = {
    create?: Enumerable<board_postCreateWithoutBoard_cateInput>
    connect?: Enumerable<board_postWhereUniqueInput>
    connectOrCreate?: Enumerable<board_postCreateOrConnectWithoutboard_cateInput>
  }

  export type board_postUpdateManyWithoutBoard_cateInput = {
    create?: Enumerable<board_postCreateWithoutBoard_cateInput>
    connect?: Enumerable<board_postWhereUniqueInput>
    set?: Enumerable<board_postWhereUniqueInput>
    disconnect?: Enumerable<board_postWhereUniqueInput>
    delete?: Enumerable<board_postWhereUniqueInput>
    update?: Enumerable<board_postUpdateWithWhereUniqueWithoutBoard_cateInput>
    updateMany?: Enumerable<board_postUpdateManyWithWhereWithoutBoard_cateInput>
    deleteMany?: Enumerable<board_postScalarWhereInput>
    upsert?: Enumerable<board_postUpsertWithWhereUniqueWithoutBoard_cateInput>
    connectOrCreate?: Enumerable<board_postCreateOrConnectWithoutboard_cateInput>
  }

  export type board_cateCreateOneWithoutBoard_postInput = {
    create?: board_cateCreateWithoutBoard_postInput
    connect?: board_cateWhereUniqueInput
    connectOrCreate?: board_cateCreateOrConnectWithoutboard_postInput
  }

  export type board_cateUpdateOneRequiredWithoutBoard_postInput = {
    create?: board_cateCreateWithoutBoard_postInput
    connect?: board_cateWhereUniqueInput
    update?: board_cateUpdateWithoutBoard_postInput
    upsert?: board_cateUpsertWithoutBoard_postInput
    connectOrCreate?: board_cateCreateOrConnectWithoutboard_postInput
  }

  export type rs_mgr_memCreateOneWithoutRs_memberInput = {
    create?: rs_mgr_memCreateWithoutRs_memberInput
    connect?: rs_mgr_memWhereUniqueInput
    connectOrCreate?: rs_mgr_memCreateOrConnectWithoutrs_memberInput
  }

  export type rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput = {
    create?: Enumerable<rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput>
    connect?: Enumerable<rs_noteWhereUniqueInput>
    connectOrCreate?: Enumerable<rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_recv_idInput>
  }

  export type rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput = {
    create?: Enumerable<rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput>
    connect?: Enumerable<rs_noteWhereUniqueInput>
    connectOrCreate?: Enumerable<rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_send_idInput>
  }

  export type rs_pointCreateOneWithoutRs_memberInput = {
    create?: rs_pointCreateWithoutRs_memberInput
    connect?: rs_pointWhereUniqueInput
    connectOrCreate?: rs_pointCreateOrConnectWithoutrs_memberInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type rs_mgr_memUpdateOneWithoutRs_memberInput = {
    create?: rs_mgr_memCreateWithoutRs_memberInput
    connect?: rs_mgr_memWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: rs_mgr_memUpdateWithoutRs_memberInput
    upsert?: rs_mgr_memUpsertWithoutRs_memberInput
    connectOrCreate?: rs_mgr_memCreateOrConnectWithoutrs_memberInput
  }

  export type rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput = {
    create?: Enumerable<rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput>
    connect?: Enumerable<rs_noteWhereUniqueInput>
    set?: Enumerable<rs_noteWhereUniqueInput>
    disconnect?: Enumerable<rs_noteWhereUniqueInput>
    delete?: Enumerable<rs_noteWhereUniqueInput>
    update?: Enumerable<rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput>
    updateMany?: Enumerable<rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_recv_idInput>
    deleteMany?: Enumerable<rs_noteScalarWhereInput>
    upsert?: Enumerable<rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput>
    connectOrCreate?: Enumerable<rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_recv_idInput>
  }

  export type rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput = {
    create?: Enumerable<rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput>
    connect?: Enumerable<rs_noteWhereUniqueInput>
    set?: Enumerable<rs_noteWhereUniqueInput>
    disconnect?: Enumerable<rs_noteWhereUniqueInput>
    delete?: Enumerable<rs_noteWhereUniqueInput>
    update?: Enumerable<rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput>
    updateMany?: Enumerable<rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_send_idInput>
    deleteMany?: Enumerable<rs_noteScalarWhereInput>
    upsert?: Enumerable<rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput>
    connectOrCreate?: Enumerable<rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_send_idInput>
  }

  export type rs_pointUpdateOneWithoutRs_memberInput = {
    create?: rs_pointCreateWithoutRs_memberInput
    connect?: rs_pointWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: rs_pointUpdateWithoutRs_memberInput
    upsert?: rs_pointUpsertWithoutRs_memberInput
    connectOrCreate?: rs_pointCreateOrConnectWithoutrs_memberInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type rs_mgr_memCreateManyWithoutRs_mgrInput = {
    create?: Enumerable<rs_mgr_memCreateWithoutRs_mgrInput>
    connect?: Enumerable<rs_mgr_memWhereUniqueInput>
    connectOrCreate?: Enumerable<rs_mgr_memCreateOrConnectWithoutrs_mgrInput>
  }

  export type rs_mgr_memUpdateManyWithoutRs_mgrInput = {
    create?: Enumerable<rs_mgr_memCreateWithoutRs_mgrInput>
    connect?: Enumerable<rs_mgr_memWhereUniqueInput>
    set?: Enumerable<rs_mgr_memWhereUniqueInput>
    disconnect?: Enumerable<rs_mgr_memWhereUniqueInput>
    delete?: Enumerable<rs_mgr_memWhereUniqueInput>
    update?: Enumerable<rs_mgr_memUpdateWithWhereUniqueWithoutRs_mgrInput>
    updateMany?: Enumerable<rs_mgr_memUpdateManyWithWhereWithoutRs_mgrInput>
    deleteMany?: Enumerable<rs_mgr_memScalarWhereInput>
    upsert?: Enumerable<rs_mgr_memUpsertWithWhereUniqueWithoutRs_mgrInput>
    connectOrCreate?: Enumerable<rs_mgr_memCreateOrConnectWithoutrs_mgrInput>
  }

  export type rs_memberCreateOneWithoutRs_mgr_memInput = {
    create?: rs_memberCreateWithoutRs_mgr_memInput
    connect?: rs_memberWhereUniqueInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_mgr_memInput
  }

  export type rs_mgrCreateOneWithoutRs_mgr_memInput = {
    create?: rs_mgrCreateWithoutRs_mgr_memInput
    connect?: rs_mgrWhereUniqueInput
    connectOrCreate?: rs_mgrCreateOrConnectWithoutrs_mgr_memInput
  }

  export type rs_memberUpdateOneRequiredWithoutRs_mgr_memInput = {
    create?: rs_memberCreateWithoutRs_mgr_memInput
    connect?: rs_memberWhereUniqueInput
    update?: rs_memberUpdateWithoutRs_mgr_memInput
    upsert?: rs_memberUpsertWithoutRs_mgr_memInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_mgr_memInput
  }

  export type rs_mgrUpdateOneRequiredWithoutRs_mgr_memInput = {
    create?: rs_mgrCreateWithoutRs_mgr_memInput
    connect?: rs_mgrWhereUniqueInput
    update?: rs_mgrUpdateWithoutRs_mgr_memInput
    upsert?: rs_mgrUpsertWithoutRs_mgr_memInput
    connectOrCreate?: rs_mgrCreateOrConnectWithoutrs_mgr_memInput
  }

  export type rs_memberCreateOneWithoutRs_pointInput = {
    create?: rs_memberCreateWithoutRs_pointInput
    connect?: rs_memberWhereUniqueInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_pointInput
  }

  export type rs_memberUpdateOneRequiredWithoutRs_pointInput = {
    create?: rs_memberCreateWithoutRs_pointInput
    connect?: rs_memberWhereUniqueInput
    update?: rs_memberUpdateWithoutRs_pointInput
    upsert?: rs_memberUpsertWithoutRs_pointInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_pointInput
  }

  export type rs_board_likebad_mapCreateManyWithoutRs_board_commentInput = {
    create?: Enumerable<rs_board_likebad_mapCreateWithoutRs_board_commentInput>
    connect?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    connectOrCreate?: Enumerable<rs_board_likebad_mapCreateOrConnectWithoutrs_board_commentInput>
  }

  export type rs_board_likebad_mapUpdateManyWithoutRs_board_commentInput = {
    create?: Enumerable<rs_board_likebad_mapCreateWithoutRs_board_commentInput>
    connect?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    set?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    disconnect?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    delete?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    update?: Enumerable<rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_commentInput>
    updateMany?: Enumerable<rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_commentInput>
    deleteMany?: Enumerable<rs_board_likebad_mapScalarWhereInput>
    upsert?: Enumerable<rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_commentInput>
    connectOrCreate?: Enumerable<rs_board_likebad_mapCreateOrConnectWithoutrs_board_commentInput>
  }

  export type rs_board_likebad_mapCreateManyWithoutRs_board_postInput = {
    create?: Enumerable<rs_board_likebad_mapCreateWithoutRs_board_postInput>
    connect?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    connectOrCreate?: Enumerable<rs_board_likebad_mapCreateOrConnectWithoutrs_board_postInput>
  }

  export type rs_noteCreateManyWithoutRs_board_postInput = {
    create?: Enumerable<rs_noteCreateWithoutRs_board_postInput>
    connect?: Enumerable<rs_noteWhereUniqueInput>
    connectOrCreate?: Enumerable<rs_noteCreateOrConnectWithoutrs_board_postInput>
  }

  export type rs_board_likebad_mapUpdateManyWithoutRs_board_postInput = {
    create?: Enumerable<rs_board_likebad_mapCreateWithoutRs_board_postInput>
    connect?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    set?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    disconnect?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    delete?: Enumerable<rs_board_likebad_mapWhereUniqueInput>
    update?: Enumerable<rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_postInput>
    updateMany?: Enumerable<rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_postInput>
    deleteMany?: Enumerable<rs_board_likebad_mapScalarWhereInput>
    upsert?: Enumerable<rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_postInput>
    connectOrCreate?: Enumerable<rs_board_likebad_mapCreateOrConnectWithoutrs_board_postInput>
  }

  export type rs_noteUpdateManyWithoutRs_board_postInput = {
    create?: Enumerable<rs_noteCreateWithoutRs_board_postInput>
    connect?: Enumerable<rs_noteWhereUniqueInput>
    set?: Enumerable<rs_noteWhereUniqueInput>
    disconnect?: Enumerable<rs_noteWhereUniqueInput>
    delete?: Enumerable<rs_noteWhereUniqueInput>
    update?: Enumerable<rs_noteUpdateWithWhereUniqueWithoutRs_board_postInput>
    updateMany?: Enumerable<rs_noteUpdateManyWithWhereWithoutRs_board_postInput>
    deleteMany?: Enumerable<rs_noteScalarWhereInput>
    upsert?: Enumerable<rs_noteUpsertWithWhereUniqueWithoutRs_board_postInput>
    connectOrCreate?: Enumerable<rs_noteCreateOrConnectWithoutrs_board_postInput>
  }

  export type rs_board_commentCreateOneWithoutRs_board_likebad_mapInput = {
    create?: rs_board_commentCreateWithoutRs_board_likebad_mapInput
    connect?: rs_board_commentWhereUniqueInput
    connectOrCreate?: rs_board_commentCreateOrConnectWithoutrs_board_likebad_mapInput
  }

  export type rs_board_postCreateOneWithoutRs_board_likebad_mapInput = {
    create?: rs_board_postCreateWithoutRs_board_likebad_mapInput
    connect?: rs_board_postWhereUniqueInput
    connectOrCreate?: rs_board_postCreateOrConnectWithoutrs_board_likebad_mapInput
  }

  export type rs_board_commentUpdateOneWithoutRs_board_likebad_mapInput = {
    create?: rs_board_commentCreateWithoutRs_board_likebad_mapInput
    connect?: rs_board_commentWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: rs_board_commentUpdateWithoutRs_board_likebad_mapInput
    upsert?: rs_board_commentUpsertWithoutRs_board_likebad_mapInput
    connectOrCreate?: rs_board_commentCreateOrConnectWithoutrs_board_likebad_mapInput
  }

  export type rs_board_postUpdateOneWithoutRs_board_likebad_mapInput = {
    create?: rs_board_postCreateWithoutRs_board_likebad_mapInput
    connect?: rs_board_postWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: rs_board_postUpdateWithoutRs_board_likebad_mapInput
    upsert?: rs_board_postUpsertWithoutRs_board_likebad_mapInput
    connectOrCreate?: rs_board_postCreateOrConnectWithoutrs_board_likebad_mapInput
  }

  export type rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput = {
    create?: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput
    connect?: rs_memberWhereUniqueInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_recv_idInput
  }

  export type rs_board_postCreateOneWithoutRs_noteInput = {
    create?: rs_board_postCreateWithoutRs_noteInput
    connect?: rs_board_postWhereUniqueInput
    connectOrCreate?: rs_board_postCreateOrConnectWithoutrs_noteInput
  }

  export type rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_send_idInput = {
    create?: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput
    connect?: rs_memberWhereUniqueInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_send_idInput
  }

  export type rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput = {
    create?: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput
    connect?: rs_memberWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_recv_idInput
    upsert?: rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_recv_idInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_recv_idInput
  }

  export type rs_board_postUpdateOneWithoutRs_noteInput = {
    create?: rs_board_postCreateWithoutRs_noteInput
    connect?: rs_board_postWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: rs_board_postUpdateWithoutRs_noteInput
    upsert?: rs_board_postUpsertWithoutRs_noteInput
    connectOrCreate?: rs_board_postCreateOrConnectWithoutrs_noteInput
  }

  export type rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_send_idInput = {
    create?: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput
    connect?: rs_memberWhereUniqueInput
    disconnect?: boolean
    delete?: boolean
    update?: rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_send_idInput
    upsert?: rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_send_idInput
    connectOrCreate?: rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_send_idInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type board_postCreateWithoutBoard_cateInput = {
    bpo_title: string
    bpo_desc: string
  }

  export type board_postCreateOrConnectWithoutboard_cateInput = {
    where: board_postWhereUniqueInput
    create: board_postCreateWithoutBoard_cateInput
  }

  export type board_postUpdateWithWhereUniqueWithoutBoard_cateInput = {
    where: board_postWhereUniqueInput
    data: board_postUpdateWithoutBoard_cateInput
  }

  export type board_postUpdateManyWithWhereWithoutBoard_cateInput = {
    where: board_postScalarWhereInput
    data: board_postUpdateManyMutationInput
  }

  export type board_postScalarWhereInput = {
    AND?: Enumerable<board_postScalarWhereInput>
    OR?: Enumerable<board_postScalarWhereInput>
    NOT?: Enumerable<board_postScalarWhereInput>
    bpo_idx?: IntFilter | number
    bpo_bca_idx?: IntFilter | number
    bpo_title?: StringFilter | string
    bpo_desc?: StringFilter | string
  }

  export type board_postUpsertWithWhereUniqueWithoutBoard_cateInput = {
    where: board_postWhereUniqueInput
    update: board_postUpdateWithoutBoard_cateInput
    create: board_postCreateWithoutBoard_cateInput
  }

  export type board_cateCreateWithoutBoard_postInput = {
    tca_title: string
  }

  export type board_cateCreateOrConnectWithoutboard_postInput = {
    where: board_cateWhereUniqueInput
    create: board_cateCreateWithoutBoard_postInput
  }

  export type board_cateUpdateWithoutBoard_postInput = {
    tca_title?: StringFieldUpdateOperationsInput | string
  }

  export type board_cateUpsertWithoutBoard_postInput = {
    update: board_cateUpdateWithoutBoard_postInput
    create: board_cateCreateWithoutBoard_postInput
  }

  export type rs_mgr_memCreateWithoutRs_memberInput = {
    mgm_datetime: string
    mgm_timestemp: number
    rs_mgr: rs_mgrCreateOneWithoutRs_mgr_memInput
  }

  export type rs_mgr_memCreateOrConnectWithoutrs_memberInput = {
    where: rs_mgr_memWhereUniqueInput
    create: rs_mgr_memCreateWithoutRs_memberInput
  }

  export type rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput = {
    not_type: number
    not_title: string
    not_content: string
    not_datetime: string
    not_timestemp: number
    rs_board_post?: rs_board_postCreateOneWithoutRs_noteInput
    rs_member_rs_memberTors_note_not_send_id?: rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_send_idInput
  }

  export type rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_recv_idInput = {
    where: rs_noteWhereUniqueInput
    create: rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput
  }

  export type rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput = {
    not_type: number
    not_title: string
    not_content: string
    not_datetime: string
    not_timestemp: number
    rs_member_rs_memberTors_note_not_recv_id?: rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput
    rs_board_post?: rs_board_postCreateOneWithoutRs_noteInput
  }

  export type rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_send_idInput = {
    where: rs_noteWhereUniqueInput
    create: rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput
  }

  export type rs_pointCreateWithoutRs_memberInput = {
    poi_point: number
    poi_datetime: string
    poi_timestemp: number
  }

  export type rs_pointCreateOrConnectWithoutrs_memberInput = {
    where: rs_pointWhereUniqueInput
    create: rs_pointCreateWithoutRs_memberInput
  }

  export type rs_mgr_memUpdateWithoutRs_memberInput = {
    mgm_datetime?: StringFieldUpdateOperationsInput | string
    mgm_timestemp?: IntFieldUpdateOperationsInput | number
    rs_mgr?: rs_mgrUpdateOneRequiredWithoutRs_mgr_memInput
  }

  export type rs_mgr_memUpsertWithoutRs_memberInput = {
    update: rs_mgr_memUpdateWithoutRs_memberInput
    create: rs_mgr_memCreateWithoutRs_memberInput
  }

  export type rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput = {
    where: rs_noteWhereUniqueInput
    data: rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_recv_idInput
  }

  export type rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_recv_idInput = {
    where: rs_noteScalarWhereInput
    data: rs_noteUpdateManyMutationInput
  }

  export type rs_noteScalarWhereInput = {
    AND?: Enumerable<rs_noteScalarWhereInput>
    OR?: Enumerable<rs_noteScalarWhereInput>
    NOT?: Enumerable<rs_noteScalarWhereInput>
    not_idx?: IntFilter | number
    not_recv_id?: IntNullableFilter | number | null
    not_send_id?: IntNullableFilter | number | null
    not_type?: IntFilter | number
    not_title?: StringFilter | string
    not_relate_post_idx?: IntNullableFilter | number | null
    not_content?: StringFilter | string
    not_datetime?: StringFilter | string
    not_timestemp?: IntFilter | number
  }

  export type rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput = {
    where: rs_noteWhereUniqueInput
    update: rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_recv_idInput
    create: rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput
  }

  export type rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput = {
    where: rs_noteWhereUniqueInput
    data: rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_send_idInput
  }

  export type rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_send_idInput = {
    where: rs_noteScalarWhereInput
    data: rs_noteUpdateManyMutationInput
  }

  export type rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput = {
    where: rs_noteWhereUniqueInput
    update: rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_send_idInput
    create: rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput
  }

  export type rs_pointUpdateWithoutRs_memberInput = {
    poi_point?: IntFieldUpdateOperationsInput | number
    poi_datetime?: StringFieldUpdateOperationsInput | string
    poi_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_pointUpsertWithoutRs_memberInput = {
    update: rs_pointUpdateWithoutRs_memberInput
    create: rs_pointCreateWithoutRs_memberInput
  }

  export type rs_mgr_memCreateWithoutRs_mgrInput = {
    mgm_datetime: string
    mgm_timestemp: number
    rs_member: rs_memberCreateOneWithoutRs_mgr_memInput
  }

  export type rs_mgr_memCreateOrConnectWithoutrs_mgrInput = {
    where: rs_mgr_memWhereUniqueInput
    create: rs_mgr_memCreateWithoutRs_mgrInput
  }

  export type rs_mgr_memUpdateWithWhereUniqueWithoutRs_mgrInput = {
    where: rs_mgr_memWhereUniqueInput
    data: rs_mgr_memUpdateWithoutRs_mgrInput
  }

  export type rs_mgr_memUpdateManyWithWhereWithoutRs_mgrInput = {
    where: rs_mgr_memScalarWhereInput
    data: rs_mgr_memUpdateManyMutationInput
  }

  export type rs_mgr_memScalarWhereInput = {
    AND?: Enumerable<rs_mgr_memScalarWhereInput>
    OR?: Enumerable<rs_mgr_memScalarWhereInput>
    NOT?: Enumerable<rs_mgr_memScalarWhereInput>
    mgm_mgr_idx?: IntFilter | number
    mgm_mem_idx?: IntFilter | number
    mgm_datetime?: StringFilter | string
    mgm_timestemp?: IntFilter | number
  }

  export type rs_mgr_memUpsertWithWhereUniqueWithoutRs_mgrInput = {
    where: rs_mgr_memWhereUniqueInput
    update: rs_mgr_memUpdateWithoutRs_mgrInput
    create: rs_mgr_memCreateWithoutRs_mgrInput
  }

  export type rs_memberCreateWithoutRs_mgr_memInput = {
    mem_userpw?: string
    mem_userid?: string
    mem_email?: string
    mem_lastlogin_datetime: string
    mem_lastlogin_timestamp: number
    mem_inactive_check?: string | null
    mem_is_admin?: number
    mem_point?: number
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
    rs_point?: rs_pointCreateOneWithoutRs_memberInput
  }

  export type rs_memberCreateOrConnectWithoutrs_mgr_memInput = {
    where: rs_memberWhereUniqueInput
    create: rs_memberCreateWithoutRs_mgr_memInput
  }

  export type rs_mgrCreateWithoutRs_mgr_memInput = {
    mgr_id: number
    mgr_title: string
    mgr_datetime: string
    mgr_timestemp: number
  }

  export type rs_mgrCreateOrConnectWithoutrs_mgr_memInput = {
    where: rs_mgrWhereUniqueInput
    create: rs_mgrCreateWithoutRs_mgr_memInput
  }

  export type rs_memberUpdateWithoutRs_mgr_memInput = {
    mem_userpw?: StringFieldUpdateOperationsInput | string
    mem_userid?: StringFieldUpdateOperationsInput | string
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_datetime?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_timestamp?: IntFieldUpdateOperationsInput | number
    mem_inactive_check?: NullableStringFieldUpdateOperationsInput | string | null
    mem_is_admin?: IntFieldUpdateOperationsInput | number
    mem_point?: IntFieldUpdateOperationsInput | number
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
    rs_point?: rs_pointUpdateOneWithoutRs_memberInput
  }

  export type rs_memberUpsertWithoutRs_mgr_memInput = {
    update: rs_memberUpdateWithoutRs_mgr_memInput
    create: rs_memberCreateWithoutRs_mgr_memInput
  }

  export type rs_mgrUpdateWithoutRs_mgr_memInput = {
    mgr_id?: IntFieldUpdateOperationsInput | number
    mgr_title?: StringFieldUpdateOperationsInput | string
    mgr_datetime?: StringFieldUpdateOperationsInput | string
    mgr_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_mgrUpsertWithoutRs_mgr_memInput = {
    update: rs_mgrUpdateWithoutRs_mgr_memInput
    create: rs_mgrCreateWithoutRs_mgr_memInput
  }

  export type rs_memberCreateWithoutRs_pointInput = {
    mem_userpw?: string
    mem_userid?: string
    mem_email?: string
    mem_lastlogin_datetime: string
    mem_lastlogin_timestamp: number
    mem_inactive_check?: string | null
    mem_is_admin?: number
    mem_point?: number
    rs_mgr_mem?: rs_mgr_memCreateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
  }

  export type rs_memberCreateOrConnectWithoutrs_pointInput = {
    where: rs_memberWhereUniqueInput
    create: rs_memberCreateWithoutRs_pointInput
  }

  export type rs_memberUpdateWithoutRs_pointInput = {
    mem_userpw?: StringFieldUpdateOperationsInput | string
    mem_userid?: StringFieldUpdateOperationsInput | string
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_datetime?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_timestamp?: IntFieldUpdateOperationsInput | number
    mem_inactive_check?: NullableStringFieldUpdateOperationsInput | string | null
    mem_is_admin?: IntFieldUpdateOperationsInput | number
    mem_point?: IntFieldUpdateOperationsInput | number
    rs_mgr_mem?: rs_mgr_memUpdateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
  }

  export type rs_memberUpsertWithoutRs_pointInput = {
    update: rs_memberUpdateWithoutRs_pointInput
    create: rs_memberCreateWithoutRs_pointInput
  }

  export type rs_board_likebad_mapCreateWithoutRs_board_commentInput = {
    blm_user_idx: number
    blm_update_timestemp: number
    blm_update_datetime: string
    blm_cnt_like?: number | null
    blm_cnt_bad?: number | null
    rs_board_post?: rs_board_postCreateOneWithoutRs_board_likebad_mapInput
  }

  export type rs_board_likebad_mapCreateOrConnectWithoutrs_board_commentInput = {
    where: rs_board_likebad_mapWhereUniqueInput
    create: rs_board_likebad_mapCreateWithoutRs_board_commentInput
  }

  export type rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_commentInput = {
    where: rs_board_likebad_mapWhereUniqueInput
    data: rs_board_likebad_mapUpdateWithoutRs_board_commentInput
  }

  export type rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_commentInput = {
    where: rs_board_likebad_mapScalarWhereInput
    data: rs_board_likebad_mapUpdateManyMutationInput
  }

  export type rs_board_likebad_mapScalarWhereInput = {
    AND?: Enumerable<rs_board_likebad_mapScalarWhereInput>
    OR?: Enumerable<rs_board_likebad_mapScalarWhereInput>
    NOT?: Enumerable<rs_board_likebad_mapScalarWhereInput>
    blm_idx?: IntFilter | number
    blm_user_idx?: IntFilter | number
    blm_post_idx?: IntNullableFilter | number | null
    blm_cmt_idx?: IntNullableFilter | number | null
    blm_update_timestemp?: IntFilter | number
    blm_update_datetime?: StringFilter | string
    blm_cnt_like?: IntNullableFilter | number | null
    blm_cnt_bad?: IntNullableFilter | number | null
  }

  export type rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_commentInput = {
    where: rs_board_likebad_mapWhereUniqueInput
    update: rs_board_likebad_mapUpdateWithoutRs_board_commentInput
    create: rs_board_likebad_mapCreateWithoutRs_board_commentInput
  }

  export type rs_board_likebad_mapCreateWithoutRs_board_postInput = {
    blm_user_idx: number
    blm_update_timestemp: number
    blm_update_datetime: string
    blm_cnt_like?: number | null
    blm_cnt_bad?: number | null
    rs_board_comment?: rs_board_commentCreateOneWithoutRs_board_likebad_mapInput
  }

  export type rs_board_likebad_mapCreateOrConnectWithoutrs_board_postInput = {
    where: rs_board_likebad_mapWhereUniqueInput
    create: rs_board_likebad_mapCreateWithoutRs_board_postInput
  }

  export type rs_noteCreateWithoutRs_board_postInput = {
    not_type: number
    not_title: string
    not_content: string
    not_datetime: string
    not_timestemp: number
    rs_member_rs_memberTors_note_not_recv_id?: rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput
    rs_member_rs_memberTors_note_not_send_id?: rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_send_idInput
  }

  export type rs_noteCreateOrConnectWithoutrs_board_postInput = {
    where: rs_noteWhereUniqueInput
    create: rs_noteCreateWithoutRs_board_postInput
  }

  export type rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_postInput = {
    where: rs_board_likebad_mapWhereUniqueInput
    data: rs_board_likebad_mapUpdateWithoutRs_board_postInput
  }

  export type rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_postInput = {
    where: rs_board_likebad_mapScalarWhereInput
    data: rs_board_likebad_mapUpdateManyMutationInput
  }

  export type rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_postInput = {
    where: rs_board_likebad_mapWhereUniqueInput
    update: rs_board_likebad_mapUpdateWithoutRs_board_postInput
    create: rs_board_likebad_mapCreateWithoutRs_board_postInput
  }

  export type rs_noteUpdateWithWhereUniqueWithoutRs_board_postInput = {
    where: rs_noteWhereUniqueInput
    data: rs_noteUpdateWithoutRs_board_postInput
  }

  export type rs_noteUpdateManyWithWhereWithoutRs_board_postInput = {
    where: rs_noteScalarWhereInput
    data: rs_noteUpdateManyMutationInput
  }

  export type rs_noteUpsertWithWhereUniqueWithoutRs_board_postInput = {
    where: rs_noteWhereUniqueInput
    update: rs_noteUpdateWithoutRs_board_postInput
    create: rs_noteCreateWithoutRs_board_postInput
  }

  export type rs_board_commentCreateWithoutRs_board_likebad_mapInput = {
    cmt_idx?: number
    cmt_content: string
    cmt_mem_idx: number
    cmt_mem_id: string
    cmt_mem_nick: string
    cmt_pass?: number | null
    cmt_create_datetime: string
    cmt_create_timestemp: number
    cmt_update_datetime: string
    cmt_update_timestemp: number
  }

  export type rs_board_commentCreateOrConnectWithoutrs_board_likebad_mapInput = {
    where: rs_board_commentWhereUniqueInput
    create: rs_board_commentCreateWithoutRs_board_likebad_mapInput
  }

  export type rs_board_postCreateWithoutRs_board_likebad_mapInput = {
    pst_idx?: number
    pst_title: string
    pst_content: string
    pst_pass?: string | null
    pst_create_datetime: string
    pst_create_timestemp: number
    pst_update_datetime: string
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
    pst_mem_id: string
    pst_mem_nick: string
    rs_note?: rs_noteCreateManyWithoutRs_board_postInput
  }

  export type rs_board_postCreateOrConnectWithoutrs_board_likebad_mapInput = {
    where: rs_board_postWhereUniqueInput
    create: rs_board_postCreateWithoutRs_board_likebad_mapInput
  }

  export type rs_board_commentUpdateWithoutRs_board_likebad_mapInput = {
    cmt_idx?: IntFieldUpdateOperationsInput | number
    cmt_content?: StringFieldUpdateOperationsInput | string
    cmt_mem_idx?: IntFieldUpdateOperationsInput | number
    cmt_mem_id?: StringFieldUpdateOperationsInput | string
    cmt_mem_nick?: StringFieldUpdateOperationsInput | string
    cmt_pass?: NullableIntFieldUpdateOperationsInput | number | null
    cmt_create_datetime?: StringFieldUpdateOperationsInput | string
    cmt_create_timestemp?: IntFieldUpdateOperationsInput | number
    cmt_update_datetime?: StringFieldUpdateOperationsInput | string
    cmt_update_timestemp?: IntFieldUpdateOperationsInput | number
  }

  export type rs_board_commentUpsertWithoutRs_board_likebad_mapInput = {
    update: rs_board_commentUpdateWithoutRs_board_likebad_mapInput
    create: rs_board_commentCreateWithoutRs_board_likebad_mapInput
  }

  export type rs_board_postUpdateWithoutRs_board_likebad_mapInput = {
    pst_title?: StringFieldUpdateOperationsInput | string
    pst_content?: StringFieldUpdateOperationsInput | string
    pst_pass?: NullableStringFieldUpdateOperationsInput | string | null
    pst_create_datetime?: StringFieldUpdateOperationsInput | string
    pst_create_timestemp?: IntFieldUpdateOperationsInput | number
    pst_update_datetime?: StringFieldUpdateOperationsInput | string
    pst_update_timestemp?: IntFieldUpdateOperationsInput | number
    pst_hit?: IntFieldUpdateOperationsInput | number
    pst_cat_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_id?: StringFieldUpdateOperationsInput | string
    pst_mem_nick?: StringFieldUpdateOperationsInput | string
    rs_note?: rs_noteUpdateManyWithoutRs_board_postInput
  }

  export type rs_board_postUpsertWithoutRs_board_likebad_mapInput = {
    update: rs_board_postUpdateWithoutRs_board_likebad_mapInput
    create: rs_board_postCreateWithoutRs_board_likebad_mapInput
  }

  export type rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput = {
    mem_userpw?: string
    mem_userid?: string
    mem_email?: string
    mem_lastlogin_datetime: string
    mem_lastlogin_timestamp: number
    mem_inactive_check?: string | null
    mem_is_admin?: number
    mem_point?: number
    rs_mgr_mem?: rs_mgr_memCreateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
    rs_point?: rs_pointCreateOneWithoutRs_memberInput
  }

  export type rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_recv_idInput = {
    where: rs_memberWhereUniqueInput
    create: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput
  }

  export type rs_board_postCreateWithoutRs_noteInput = {
    pst_idx?: number
    pst_title: string
    pst_content: string
    pst_pass?: string | null
    pst_create_datetime: string
    pst_create_timestemp: number
    pst_update_datetime: string
    pst_update_timestemp: number
    pst_hit: number
    pst_cat_idx: number
    pst_mem_idx: number
    pst_mem_id: string
    pst_mem_nick: string
    rs_board_likebad_map?: rs_board_likebad_mapCreateManyWithoutRs_board_postInput
  }

  export type rs_board_postCreateOrConnectWithoutrs_noteInput = {
    where: rs_board_postWhereUniqueInput
    create: rs_board_postCreateWithoutRs_noteInput
  }

  export type rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput = {
    mem_userpw?: string
    mem_userid?: string
    mem_email?: string
    mem_lastlogin_datetime: string
    mem_lastlogin_timestamp: number
    mem_inactive_check?: string | null
    mem_is_admin?: number
    mem_point?: number
    rs_mgr_mem?: rs_mgr_memCreateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_point?: rs_pointCreateOneWithoutRs_memberInput
  }

  export type rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_send_idInput = {
    where: rs_memberWhereUniqueInput
    create: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput
  }

  export type rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_recv_idInput = {
    mem_userpw?: StringFieldUpdateOperationsInput | string
    mem_userid?: StringFieldUpdateOperationsInput | string
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_datetime?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_timestamp?: IntFieldUpdateOperationsInput | number
    mem_inactive_check?: NullableStringFieldUpdateOperationsInput | string | null
    mem_is_admin?: IntFieldUpdateOperationsInput | number
    mem_point?: IntFieldUpdateOperationsInput | number
    rs_mgr_mem?: rs_mgr_memUpdateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_send_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput
    rs_point?: rs_pointUpdateOneWithoutRs_memberInput
  }

  export type rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_recv_idInput = {
    update: rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_recv_idInput
    create: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput
  }

  export type rs_board_postUpdateWithoutRs_noteInput = {
    pst_title?: StringFieldUpdateOperationsInput | string
    pst_content?: StringFieldUpdateOperationsInput | string
    pst_pass?: NullableStringFieldUpdateOperationsInput | string | null
    pst_create_datetime?: StringFieldUpdateOperationsInput | string
    pst_create_timestemp?: IntFieldUpdateOperationsInput | number
    pst_update_datetime?: StringFieldUpdateOperationsInput | string
    pst_update_timestemp?: IntFieldUpdateOperationsInput | number
    pst_hit?: IntFieldUpdateOperationsInput | number
    pst_cat_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_idx?: IntFieldUpdateOperationsInput | number
    pst_mem_id?: StringFieldUpdateOperationsInput | string
    pst_mem_nick?: StringFieldUpdateOperationsInput | string
    rs_board_likebad_map?: rs_board_likebad_mapUpdateManyWithoutRs_board_postInput
  }

  export type rs_board_postUpsertWithoutRs_noteInput = {
    update: rs_board_postUpdateWithoutRs_noteInput
    create: rs_board_postCreateWithoutRs_noteInput
  }

  export type rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_send_idInput = {
    mem_userpw?: StringFieldUpdateOperationsInput | string
    mem_userid?: StringFieldUpdateOperationsInput | string
    mem_email?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_datetime?: StringFieldUpdateOperationsInput | string
    mem_lastlogin_timestamp?: IntFieldUpdateOperationsInput | number
    mem_inactive_check?: NullableStringFieldUpdateOperationsInput | string | null
    mem_is_admin?: IntFieldUpdateOperationsInput | number
    mem_point?: IntFieldUpdateOperationsInput | number
    rs_mgr_mem?: rs_mgr_memUpdateOneWithoutRs_memberInput
    rs_note_rs_memberTors_note_not_recv_id?: rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput
    rs_point?: rs_pointUpdateOneWithoutRs_memberInput
  }

  export type rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_send_idInput = {
    update: rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_send_idInput
    create: rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput
  }

  export type board_postUpdateWithoutBoard_cateInput = {
    bpo_title?: StringFieldUpdateOperationsInput | string
    bpo_desc?: StringFieldUpdateOperationsInput | string
  }

  export type rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_recv_idInput = {
    not_type?: IntFieldUpdateOperationsInput | number
    not_title?: StringFieldUpdateOperationsInput | string
    not_content?: StringFieldUpdateOperationsInput | string
    not_datetime?: StringFieldUpdateOperationsInput | string
    not_timestemp?: IntFieldUpdateOperationsInput | number
    rs_board_post?: rs_board_postUpdateOneWithoutRs_noteInput
    rs_member_rs_memberTors_note_not_send_id?: rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_send_idInput
  }

  export type rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_send_idInput = {
    not_type?: IntFieldUpdateOperationsInput | number
    not_title?: StringFieldUpdateOperationsInput | string
    not_content?: StringFieldUpdateOperationsInput | string
    not_datetime?: StringFieldUpdateOperationsInput | string
    not_timestemp?: IntFieldUpdateOperationsInput | number
    rs_member_rs_memberTors_note_not_recv_id?: rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput
    rs_board_post?: rs_board_postUpdateOneWithoutRs_noteInput
  }

  export type rs_mgr_memUpdateWithoutRs_mgrInput = {
    mgm_datetime?: StringFieldUpdateOperationsInput | string
    mgm_timestemp?: IntFieldUpdateOperationsInput | number
    rs_member?: rs_memberUpdateOneRequiredWithoutRs_mgr_memInput
  }

  export type rs_board_likebad_mapUpdateWithoutRs_board_commentInput = {
    blm_user_idx?: IntFieldUpdateOperationsInput | number
    blm_update_timestemp?: IntFieldUpdateOperationsInput | number
    blm_update_datetime?: StringFieldUpdateOperationsInput | string
    blm_cnt_like?: NullableIntFieldUpdateOperationsInput | number | null
    blm_cnt_bad?: NullableIntFieldUpdateOperationsInput | number | null
    rs_board_post?: rs_board_postUpdateOneWithoutRs_board_likebad_mapInput
  }

  export type rs_board_likebad_mapUpdateWithoutRs_board_postInput = {
    blm_user_idx?: IntFieldUpdateOperationsInput | number
    blm_update_timestemp?: IntFieldUpdateOperationsInput | number
    blm_update_datetime?: StringFieldUpdateOperationsInput | string
    blm_cnt_like?: NullableIntFieldUpdateOperationsInput | number | null
    blm_cnt_bad?: NullableIntFieldUpdateOperationsInput | number | null
    rs_board_comment?: rs_board_commentUpdateOneWithoutRs_board_likebad_mapInput
  }

  export type rs_noteUpdateWithoutRs_board_postInput = {
    not_type?: IntFieldUpdateOperationsInput | number
    not_title?: StringFieldUpdateOperationsInput | string
    not_content?: StringFieldUpdateOperationsInput | string
    not_datetime?: StringFieldUpdateOperationsInput | string
    not_timestemp?: IntFieldUpdateOperationsInput | number
    rs_member_rs_memberTors_note_not_recv_id?: rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput
    rs_member_rs_memberTors_note_not_send_id?: rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_send_idInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.TestScalarFieldEnum`
 */
export type TestScalarFieldEnum = Prisma.TestScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Board_cateScalarFieldEnum`
 */
export type Board_cateScalarFieldEnum = Prisma.Board_cateScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Board_postScalarFieldEnum`
 */
export type Board_postScalarFieldEnum = Prisma.Board_postScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_memberScalarFieldEnum`
 */
export type Rs_memberScalarFieldEnum = Prisma.Rs_memberScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logScalarFieldEnum`
 */
export type Rs_mem_login_logScalarFieldEnum = Prisma.Rs_mem_login_logScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_mgrScalarFieldEnum`
 */
export type Rs_mgrScalarFieldEnum = Prisma.Rs_mgrScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memScalarFieldEnum`
 */
export type Rs_mgr_memScalarFieldEnum = Prisma.Rs_mgr_memScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_point_logScalarFieldEnum`
 */
export type Rs_point_logScalarFieldEnum = Prisma.Rs_point_logScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_pointScalarFieldEnum`
 */
export type Rs_pointScalarFieldEnum = Prisma.Rs_pointScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryScalarFieldEnum`
 */
export type Rs_board_categoryScalarFieldEnum = Prisma.Rs_board_categoryScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentScalarFieldEnum`
 */
export type Rs_board_commentScalarFieldEnum = Prisma.Rs_board_commentScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_board_postScalarFieldEnum`
 */
export type Rs_board_postScalarFieldEnum = Prisma.Rs_board_postScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authScalarFieldEnum`
 */
export type Rs_mem_authScalarFieldEnum = Prisma.Rs_mem_authScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenScalarFieldEnum`
 */
export type Rs_mem_tokenScalarFieldEnum = Prisma.Rs_mem_tokenScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logScalarFieldEnum`
 */
export type Rs_board_likebad_logScalarFieldEnum = Prisma.Rs_board_likebad_logScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapScalarFieldEnum`
 */
export type Rs_board_likebad_mapScalarFieldEnum = Prisma.Rs_board_likebad_mapScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_noteScalarFieldEnum`
 */
export type Rs_noteScalarFieldEnum = Prisma.Rs_noteScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminScalarFieldEnum`
 */
export type Rs_board_adminScalarFieldEnum = Prisma.Rs_board_adminScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Pris_memberScalarFieldEnum`
 */
export type Pris_memberScalarFieldEnum = Prisma.Pris_memberScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Rs_menuScalarFieldEnum`
 */
export type Rs_menuScalarFieldEnum = Prisma.Rs_menuScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Test2ScalarFieldEnum`
 */
export type Test2ScalarFieldEnum = Prisma.Test2ScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.Pris_logScalarFieldEnum`
 */
export type Pris_logScalarFieldEnum = Prisma.Pris_logScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateTest`
 */
export type AggregateTest = Prisma.AggregateTest

/**
 * @deprecated Renamed to `Prisma.TestAvgAggregateOutputType`
 */
export type TestAvgAggregateOutputType = Prisma.TestAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TestSumAggregateOutputType`
 */
export type TestSumAggregateOutputType = Prisma.TestSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TestMinAggregateOutputType`
 */
export type TestMinAggregateOutputType = Prisma.TestMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TestMaxAggregateOutputType`
 */
export type TestMaxAggregateOutputType = Prisma.TestMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.TestCountAggregateOutputType`
 */
export type TestCountAggregateOutputType = Prisma.TestCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateTestArgs`
 */
export type AggregateTestArgs = Prisma.AggregateTestArgs

/**
 * @deprecated Renamed to `Prisma.TestAvgAggregateInputType`
 */
export type TestAvgAggregateInputType = Prisma.TestAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TestSumAggregateInputType`
 */
export type TestSumAggregateInputType = Prisma.TestSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TestMinAggregateInputType`
 */
export type TestMinAggregateInputType = Prisma.TestMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TestMaxAggregateInputType`
 */
export type TestMaxAggregateInputType = Prisma.TestMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.TestCountAggregateInputType`
 */
export type TestCountAggregateInputType = Prisma.TestCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.testSelect`
 */
export type testSelect = Prisma.testSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquetestArgs`
 */
export type FindUniquetestArgs = Prisma.FindUniquetestArgs

/**
 * @deprecated Renamed to `Prisma.FindFirsttestArgs`
 */
export type FindFirsttestArgs = Prisma.FindFirsttestArgs

/**
 * @deprecated Renamed to `Prisma.FindManytestArgs`
 */
export type FindManytestArgs = Prisma.FindManytestArgs

/**
 * @deprecated Renamed to `Prisma.testCreateArgs`
 */
export type testCreateArgs = Prisma.testCreateArgs

/**
 * @deprecated Renamed to `Prisma.testUpdateArgs`
 */
export type testUpdateArgs = Prisma.testUpdateArgs

/**
 * @deprecated Renamed to `Prisma.testUpdateManyArgs`
 */
export type testUpdateManyArgs = Prisma.testUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.testUpsertArgs`
 */
export type testUpsertArgs = Prisma.testUpsertArgs

/**
 * @deprecated Renamed to `Prisma.testDeleteArgs`
 */
export type testDeleteArgs = Prisma.testDeleteArgs

/**
 * @deprecated Renamed to `Prisma.testDeleteManyArgs`
 */
export type testDeleteManyArgs = Prisma.testDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateBoard_cate`
 */
export type AggregateBoard_cate = Prisma.AggregateBoard_cate

/**
 * @deprecated Renamed to `Prisma.Board_cateAvgAggregateOutputType`
 */
export type Board_cateAvgAggregateOutputType = Prisma.Board_cateAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_cateSumAggregateOutputType`
 */
export type Board_cateSumAggregateOutputType = Prisma.Board_cateSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_cateMinAggregateOutputType`
 */
export type Board_cateMinAggregateOutputType = Prisma.Board_cateMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_cateMaxAggregateOutputType`
 */
export type Board_cateMaxAggregateOutputType = Prisma.Board_cateMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_cateCountAggregateOutputType`
 */
export type Board_cateCountAggregateOutputType = Prisma.Board_cateCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateBoard_cateArgs`
 */
export type AggregateBoard_cateArgs = Prisma.AggregateBoard_cateArgs

/**
 * @deprecated Renamed to `Prisma.Board_cateAvgAggregateInputType`
 */
export type Board_cateAvgAggregateInputType = Prisma.Board_cateAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_cateSumAggregateInputType`
 */
export type Board_cateSumAggregateInputType = Prisma.Board_cateSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_cateMinAggregateInputType`
 */
export type Board_cateMinAggregateInputType = Prisma.Board_cateMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_cateMaxAggregateInputType`
 */
export type Board_cateMaxAggregateInputType = Prisma.Board_cateMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_cateCountAggregateInputType`
 */
export type Board_cateCountAggregateInputType = Prisma.Board_cateCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.board_cateSelect`
 */
export type board_cateSelect = Prisma.board_cateSelect

/**
 * @deprecated Renamed to `Prisma.board_cateInclude`
 */
export type board_cateInclude = Prisma.board_cateInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueboard_cateArgs`
 */
export type FindUniqueboard_cateArgs = Prisma.FindUniqueboard_cateArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstboard_cateArgs`
 */
export type FindFirstboard_cateArgs = Prisma.FindFirstboard_cateArgs

/**
 * @deprecated Renamed to `Prisma.FindManyboard_cateArgs`
 */
export type FindManyboard_cateArgs = Prisma.FindManyboard_cateArgs

/**
 * @deprecated Renamed to `Prisma.board_cateCreateArgs`
 */
export type board_cateCreateArgs = Prisma.board_cateCreateArgs

/**
 * @deprecated Renamed to `Prisma.board_cateUpdateArgs`
 */
export type board_cateUpdateArgs = Prisma.board_cateUpdateArgs

/**
 * @deprecated Renamed to `Prisma.board_cateUpdateManyArgs`
 */
export type board_cateUpdateManyArgs = Prisma.board_cateUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.board_cateUpsertArgs`
 */
export type board_cateUpsertArgs = Prisma.board_cateUpsertArgs

/**
 * @deprecated Renamed to `Prisma.board_cateDeleteArgs`
 */
export type board_cateDeleteArgs = Prisma.board_cateDeleteArgs

/**
 * @deprecated Renamed to `Prisma.board_cateDeleteManyArgs`
 */
export type board_cateDeleteManyArgs = Prisma.board_cateDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateBoard_post`
 */
export type AggregateBoard_post = Prisma.AggregateBoard_post

/**
 * @deprecated Renamed to `Prisma.Board_postAvgAggregateOutputType`
 */
export type Board_postAvgAggregateOutputType = Prisma.Board_postAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_postSumAggregateOutputType`
 */
export type Board_postSumAggregateOutputType = Prisma.Board_postSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_postMinAggregateOutputType`
 */
export type Board_postMinAggregateOutputType = Prisma.Board_postMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_postMaxAggregateOutputType`
 */
export type Board_postMaxAggregateOutputType = Prisma.Board_postMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Board_postCountAggregateOutputType`
 */
export type Board_postCountAggregateOutputType = Prisma.Board_postCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateBoard_postArgs`
 */
export type AggregateBoard_postArgs = Prisma.AggregateBoard_postArgs

/**
 * @deprecated Renamed to `Prisma.Board_postAvgAggregateInputType`
 */
export type Board_postAvgAggregateInputType = Prisma.Board_postAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_postSumAggregateInputType`
 */
export type Board_postSumAggregateInputType = Prisma.Board_postSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_postMinAggregateInputType`
 */
export type Board_postMinAggregateInputType = Prisma.Board_postMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_postMaxAggregateInputType`
 */
export type Board_postMaxAggregateInputType = Prisma.Board_postMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Board_postCountAggregateInputType`
 */
export type Board_postCountAggregateInputType = Prisma.Board_postCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.board_postSelect`
 */
export type board_postSelect = Prisma.board_postSelect

/**
 * @deprecated Renamed to `Prisma.board_postInclude`
 */
export type board_postInclude = Prisma.board_postInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueboard_postArgs`
 */
export type FindUniqueboard_postArgs = Prisma.FindUniqueboard_postArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstboard_postArgs`
 */
export type FindFirstboard_postArgs = Prisma.FindFirstboard_postArgs

/**
 * @deprecated Renamed to `Prisma.FindManyboard_postArgs`
 */
export type FindManyboard_postArgs = Prisma.FindManyboard_postArgs

/**
 * @deprecated Renamed to `Prisma.board_postCreateArgs`
 */
export type board_postCreateArgs = Prisma.board_postCreateArgs

/**
 * @deprecated Renamed to `Prisma.board_postUpdateArgs`
 */
export type board_postUpdateArgs = Prisma.board_postUpdateArgs

/**
 * @deprecated Renamed to `Prisma.board_postUpdateManyArgs`
 */
export type board_postUpdateManyArgs = Prisma.board_postUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.board_postUpsertArgs`
 */
export type board_postUpsertArgs = Prisma.board_postUpsertArgs

/**
 * @deprecated Renamed to `Prisma.board_postDeleteArgs`
 */
export type board_postDeleteArgs = Prisma.board_postDeleteArgs

/**
 * @deprecated Renamed to `Prisma.board_postDeleteManyArgs`
 */
export type board_postDeleteManyArgs = Prisma.board_postDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_member`
 */
export type AggregateRs_member = Prisma.AggregateRs_member

/**
 * @deprecated Renamed to `Prisma.Rs_memberAvgAggregateOutputType`
 */
export type Rs_memberAvgAggregateOutputType = Prisma.Rs_memberAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberSumAggregateOutputType`
 */
export type Rs_memberSumAggregateOutputType = Prisma.Rs_memberSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberMinAggregateOutputType`
 */
export type Rs_memberMinAggregateOutputType = Prisma.Rs_memberMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberMaxAggregateOutputType`
 */
export type Rs_memberMaxAggregateOutputType = Prisma.Rs_memberMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberCountAggregateOutputType`
 */
export type Rs_memberCountAggregateOutputType = Prisma.Rs_memberCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_memberArgs`
 */
export type AggregateRs_memberArgs = Prisma.AggregateRs_memberArgs

/**
 * @deprecated Renamed to `Prisma.Rs_memberAvgAggregateInputType`
 */
export type Rs_memberAvgAggregateInputType = Prisma.Rs_memberAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberSumAggregateInputType`
 */
export type Rs_memberSumAggregateInputType = Prisma.Rs_memberSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberMinAggregateInputType`
 */
export type Rs_memberMinAggregateInputType = Prisma.Rs_memberMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberMaxAggregateInputType`
 */
export type Rs_memberMaxAggregateInputType = Prisma.Rs_memberMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_memberCountAggregateInputType`
 */
export type Rs_memberCountAggregateInputType = Prisma.Rs_memberCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_memberSelect`
 */
export type rs_memberSelect = Prisma.rs_memberSelect

/**
 * @deprecated Renamed to `Prisma.rs_memberInclude`
 */
export type rs_memberInclude = Prisma.rs_memberInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_memberArgs`
 */
export type FindUniquers_memberArgs = Prisma.FindUniquers_memberArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_memberArgs`
 */
export type FindFirstrs_memberArgs = Prisma.FindFirstrs_memberArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_memberArgs`
 */
export type FindManyrs_memberArgs = Prisma.FindManyrs_memberArgs

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateArgs`
 */
export type rs_memberCreateArgs = Prisma.rs_memberCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateArgs`
 */
export type rs_memberUpdateArgs = Prisma.rs_memberUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateManyArgs`
 */
export type rs_memberUpdateManyArgs = Prisma.rs_memberUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_memberUpsertArgs`
 */
export type rs_memberUpsertArgs = Prisma.rs_memberUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_memberDeleteArgs`
 */
export type rs_memberDeleteArgs = Prisma.rs_memberDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_memberDeleteManyArgs`
 */
export type rs_memberDeleteManyArgs = Prisma.rs_memberDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mem_login_log`
 */
export type AggregateRs_mem_login_log = Prisma.AggregateRs_mem_login_log

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logAvgAggregateOutputType`
 */
export type Rs_mem_login_logAvgAggregateOutputType = Prisma.Rs_mem_login_logAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logSumAggregateOutputType`
 */
export type Rs_mem_login_logSumAggregateOutputType = Prisma.Rs_mem_login_logSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logMinAggregateOutputType`
 */
export type Rs_mem_login_logMinAggregateOutputType = Prisma.Rs_mem_login_logMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logMaxAggregateOutputType`
 */
export type Rs_mem_login_logMaxAggregateOutputType = Prisma.Rs_mem_login_logMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logCountAggregateOutputType`
 */
export type Rs_mem_login_logCountAggregateOutputType = Prisma.Rs_mem_login_logCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mem_login_logArgs`
 */
export type AggregateRs_mem_login_logArgs = Prisma.AggregateRs_mem_login_logArgs

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logAvgAggregateInputType`
 */
export type Rs_mem_login_logAvgAggregateInputType = Prisma.Rs_mem_login_logAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logSumAggregateInputType`
 */
export type Rs_mem_login_logSumAggregateInputType = Prisma.Rs_mem_login_logSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logMinAggregateInputType`
 */
export type Rs_mem_login_logMinAggregateInputType = Prisma.Rs_mem_login_logMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logMaxAggregateInputType`
 */
export type Rs_mem_login_logMaxAggregateInputType = Prisma.Rs_mem_login_logMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_login_logCountAggregateInputType`
 */
export type Rs_mem_login_logCountAggregateInputType = Prisma.Rs_mem_login_logCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logSelect`
 */
export type rs_mem_login_logSelect = Prisma.rs_mem_login_logSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_mem_login_logArgs`
 */
export type FindUniquers_mem_login_logArgs = Prisma.FindUniquers_mem_login_logArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_mem_login_logArgs`
 */
export type FindFirstrs_mem_login_logArgs = Prisma.FindFirstrs_mem_login_logArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_mem_login_logArgs`
 */
export type FindManyrs_mem_login_logArgs = Prisma.FindManyrs_mem_login_logArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logCreateArgs`
 */
export type rs_mem_login_logCreateArgs = Prisma.rs_mem_login_logCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logUpdateArgs`
 */
export type rs_mem_login_logUpdateArgs = Prisma.rs_mem_login_logUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logUpdateManyArgs`
 */
export type rs_mem_login_logUpdateManyArgs = Prisma.rs_mem_login_logUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logUpsertArgs`
 */
export type rs_mem_login_logUpsertArgs = Prisma.rs_mem_login_logUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logDeleteArgs`
 */
export type rs_mem_login_logDeleteArgs = Prisma.rs_mem_login_logDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logDeleteManyArgs`
 */
export type rs_mem_login_logDeleteManyArgs = Prisma.rs_mem_login_logDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mgr`
 */
export type AggregateRs_mgr = Prisma.AggregateRs_mgr

/**
 * @deprecated Renamed to `Prisma.Rs_mgrAvgAggregateOutputType`
 */
export type Rs_mgrAvgAggregateOutputType = Prisma.Rs_mgrAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrSumAggregateOutputType`
 */
export type Rs_mgrSumAggregateOutputType = Prisma.Rs_mgrSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrMinAggregateOutputType`
 */
export type Rs_mgrMinAggregateOutputType = Prisma.Rs_mgrMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrMaxAggregateOutputType`
 */
export type Rs_mgrMaxAggregateOutputType = Prisma.Rs_mgrMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrCountAggregateOutputType`
 */
export type Rs_mgrCountAggregateOutputType = Prisma.Rs_mgrCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mgrArgs`
 */
export type AggregateRs_mgrArgs = Prisma.AggregateRs_mgrArgs

/**
 * @deprecated Renamed to `Prisma.Rs_mgrAvgAggregateInputType`
 */
export type Rs_mgrAvgAggregateInputType = Prisma.Rs_mgrAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrSumAggregateInputType`
 */
export type Rs_mgrSumAggregateInputType = Prisma.Rs_mgrSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrMinAggregateInputType`
 */
export type Rs_mgrMinAggregateInputType = Prisma.Rs_mgrMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrMaxAggregateInputType`
 */
export type Rs_mgrMaxAggregateInputType = Prisma.Rs_mgrMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgrCountAggregateInputType`
 */
export type Rs_mgrCountAggregateInputType = Prisma.Rs_mgrCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_mgrSelect`
 */
export type rs_mgrSelect = Prisma.rs_mgrSelect

/**
 * @deprecated Renamed to `Prisma.rs_mgrInclude`
 */
export type rs_mgrInclude = Prisma.rs_mgrInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_mgrArgs`
 */
export type FindUniquers_mgrArgs = Prisma.FindUniquers_mgrArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_mgrArgs`
 */
export type FindFirstrs_mgrArgs = Prisma.FindFirstrs_mgrArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_mgrArgs`
 */
export type FindManyrs_mgrArgs = Prisma.FindManyrs_mgrArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgrCreateArgs`
 */
export type rs_mgrCreateArgs = Prisma.rs_mgrCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpdateArgs`
 */
export type rs_mgrUpdateArgs = Prisma.rs_mgrUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpdateManyArgs`
 */
export type rs_mgrUpdateManyArgs = Prisma.rs_mgrUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpsertArgs`
 */
export type rs_mgrUpsertArgs = Prisma.rs_mgrUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgrDeleteArgs`
 */
export type rs_mgrDeleteArgs = Prisma.rs_mgrDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgrDeleteManyArgs`
 */
export type rs_mgrDeleteManyArgs = Prisma.rs_mgrDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mgr_mem`
 */
export type AggregateRs_mgr_mem = Prisma.AggregateRs_mgr_mem

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memAvgAggregateOutputType`
 */
export type Rs_mgr_memAvgAggregateOutputType = Prisma.Rs_mgr_memAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memSumAggregateOutputType`
 */
export type Rs_mgr_memSumAggregateOutputType = Prisma.Rs_mgr_memSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memMinAggregateOutputType`
 */
export type Rs_mgr_memMinAggregateOutputType = Prisma.Rs_mgr_memMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memMaxAggregateOutputType`
 */
export type Rs_mgr_memMaxAggregateOutputType = Prisma.Rs_mgr_memMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memCountAggregateOutputType`
 */
export type Rs_mgr_memCountAggregateOutputType = Prisma.Rs_mgr_memCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mgr_memArgs`
 */
export type AggregateRs_mgr_memArgs = Prisma.AggregateRs_mgr_memArgs

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memAvgAggregateInputType`
 */
export type Rs_mgr_memAvgAggregateInputType = Prisma.Rs_mgr_memAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memSumAggregateInputType`
 */
export type Rs_mgr_memSumAggregateInputType = Prisma.Rs_mgr_memSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memMinAggregateInputType`
 */
export type Rs_mgr_memMinAggregateInputType = Prisma.Rs_mgr_memMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memMaxAggregateInputType`
 */
export type Rs_mgr_memMaxAggregateInputType = Prisma.Rs_mgr_memMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memCountAggregateInputType`
 */
export type Rs_mgr_memCountAggregateInputType = Prisma.Rs_mgr_memCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memSelect`
 */
export type rs_mgr_memSelect = Prisma.rs_mgr_memSelect

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memInclude`
 */
export type rs_mgr_memInclude = Prisma.rs_mgr_memInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_mgr_memArgs`
 */
export type FindUniquers_mgr_memArgs = Prisma.FindUniquers_mgr_memArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_mgr_memArgs`
 */
export type FindFirstrs_mgr_memArgs = Prisma.FindFirstrs_mgr_memArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_mgr_memArgs`
 */
export type FindManyrs_mgr_memArgs = Prisma.FindManyrs_mgr_memArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateArgs`
 */
export type rs_mgr_memCreateArgs = Prisma.rs_mgr_memCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateArgs`
 */
export type rs_mgr_memUpdateArgs = Prisma.rs_mgr_memUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateManyArgs`
 */
export type rs_mgr_memUpdateManyArgs = Prisma.rs_mgr_memUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpsertArgs`
 */
export type rs_mgr_memUpsertArgs = Prisma.rs_mgr_memUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memDeleteArgs`
 */
export type rs_mgr_memDeleteArgs = Prisma.rs_mgr_memDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memDeleteManyArgs`
 */
export type rs_mgr_memDeleteManyArgs = Prisma.rs_mgr_memDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_point_log`
 */
export type AggregateRs_point_log = Prisma.AggregateRs_point_log

/**
 * @deprecated Renamed to `Prisma.Rs_point_logAvgAggregateOutputType`
 */
export type Rs_point_logAvgAggregateOutputType = Prisma.Rs_point_logAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logSumAggregateOutputType`
 */
export type Rs_point_logSumAggregateOutputType = Prisma.Rs_point_logSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logMinAggregateOutputType`
 */
export type Rs_point_logMinAggregateOutputType = Prisma.Rs_point_logMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logMaxAggregateOutputType`
 */
export type Rs_point_logMaxAggregateOutputType = Prisma.Rs_point_logMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logCountAggregateOutputType`
 */
export type Rs_point_logCountAggregateOutputType = Prisma.Rs_point_logCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_point_logArgs`
 */
export type AggregateRs_point_logArgs = Prisma.AggregateRs_point_logArgs

/**
 * @deprecated Renamed to `Prisma.Rs_point_logAvgAggregateInputType`
 */
export type Rs_point_logAvgAggregateInputType = Prisma.Rs_point_logAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logSumAggregateInputType`
 */
export type Rs_point_logSumAggregateInputType = Prisma.Rs_point_logSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logMinAggregateInputType`
 */
export type Rs_point_logMinAggregateInputType = Prisma.Rs_point_logMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logMaxAggregateInputType`
 */
export type Rs_point_logMaxAggregateInputType = Prisma.Rs_point_logMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_point_logCountAggregateInputType`
 */
export type Rs_point_logCountAggregateInputType = Prisma.Rs_point_logCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_point_logSelect`
 */
export type rs_point_logSelect = Prisma.rs_point_logSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_point_logArgs`
 */
export type FindUniquers_point_logArgs = Prisma.FindUniquers_point_logArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_point_logArgs`
 */
export type FindFirstrs_point_logArgs = Prisma.FindFirstrs_point_logArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_point_logArgs`
 */
export type FindManyrs_point_logArgs = Prisma.FindManyrs_point_logArgs

/**
 * @deprecated Renamed to `Prisma.rs_point_logCreateArgs`
 */
export type rs_point_logCreateArgs = Prisma.rs_point_logCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_point_logUpdateArgs`
 */
export type rs_point_logUpdateArgs = Prisma.rs_point_logUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_point_logUpdateManyArgs`
 */
export type rs_point_logUpdateManyArgs = Prisma.rs_point_logUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_point_logUpsertArgs`
 */
export type rs_point_logUpsertArgs = Prisma.rs_point_logUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_point_logDeleteArgs`
 */
export type rs_point_logDeleteArgs = Prisma.rs_point_logDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_point_logDeleteManyArgs`
 */
export type rs_point_logDeleteManyArgs = Prisma.rs_point_logDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_point`
 */
export type AggregateRs_point = Prisma.AggregateRs_point

/**
 * @deprecated Renamed to `Prisma.Rs_pointAvgAggregateOutputType`
 */
export type Rs_pointAvgAggregateOutputType = Prisma.Rs_pointAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointSumAggregateOutputType`
 */
export type Rs_pointSumAggregateOutputType = Prisma.Rs_pointSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointMinAggregateOutputType`
 */
export type Rs_pointMinAggregateOutputType = Prisma.Rs_pointMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointMaxAggregateOutputType`
 */
export type Rs_pointMaxAggregateOutputType = Prisma.Rs_pointMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointCountAggregateOutputType`
 */
export type Rs_pointCountAggregateOutputType = Prisma.Rs_pointCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_pointArgs`
 */
export type AggregateRs_pointArgs = Prisma.AggregateRs_pointArgs

/**
 * @deprecated Renamed to `Prisma.Rs_pointAvgAggregateInputType`
 */
export type Rs_pointAvgAggregateInputType = Prisma.Rs_pointAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointSumAggregateInputType`
 */
export type Rs_pointSumAggregateInputType = Prisma.Rs_pointSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointMinAggregateInputType`
 */
export type Rs_pointMinAggregateInputType = Prisma.Rs_pointMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointMaxAggregateInputType`
 */
export type Rs_pointMaxAggregateInputType = Prisma.Rs_pointMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_pointCountAggregateInputType`
 */
export type Rs_pointCountAggregateInputType = Prisma.Rs_pointCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_pointSelect`
 */
export type rs_pointSelect = Prisma.rs_pointSelect

/**
 * @deprecated Renamed to `Prisma.rs_pointInclude`
 */
export type rs_pointInclude = Prisma.rs_pointInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_pointArgs`
 */
export type FindUniquers_pointArgs = Prisma.FindUniquers_pointArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_pointArgs`
 */
export type FindFirstrs_pointArgs = Prisma.FindFirstrs_pointArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_pointArgs`
 */
export type FindManyrs_pointArgs = Prisma.FindManyrs_pointArgs

/**
 * @deprecated Renamed to `Prisma.rs_pointCreateArgs`
 */
export type rs_pointCreateArgs = Prisma.rs_pointCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_pointUpdateArgs`
 */
export type rs_pointUpdateArgs = Prisma.rs_pointUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_pointUpdateManyArgs`
 */
export type rs_pointUpdateManyArgs = Prisma.rs_pointUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_pointUpsertArgs`
 */
export type rs_pointUpsertArgs = Prisma.rs_pointUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_pointDeleteArgs`
 */
export type rs_pointDeleteArgs = Prisma.rs_pointDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_pointDeleteManyArgs`
 */
export type rs_pointDeleteManyArgs = Prisma.rs_pointDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_category`
 */
export type AggregateRs_board_category = Prisma.AggregateRs_board_category

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryAvgAggregateOutputType`
 */
export type Rs_board_categoryAvgAggregateOutputType = Prisma.Rs_board_categoryAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categorySumAggregateOutputType`
 */
export type Rs_board_categorySumAggregateOutputType = Prisma.Rs_board_categorySumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryMinAggregateOutputType`
 */
export type Rs_board_categoryMinAggregateOutputType = Prisma.Rs_board_categoryMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryMaxAggregateOutputType`
 */
export type Rs_board_categoryMaxAggregateOutputType = Prisma.Rs_board_categoryMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryCountAggregateOutputType`
 */
export type Rs_board_categoryCountAggregateOutputType = Prisma.Rs_board_categoryCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_categoryArgs`
 */
export type AggregateRs_board_categoryArgs = Prisma.AggregateRs_board_categoryArgs

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryAvgAggregateInputType`
 */
export type Rs_board_categoryAvgAggregateInputType = Prisma.Rs_board_categoryAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categorySumAggregateInputType`
 */
export type Rs_board_categorySumAggregateInputType = Prisma.Rs_board_categorySumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryMinAggregateInputType`
 */
export type Rs_board_categoryMinAggregateInputType = Prisma.Rs_board_categoryMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryMaxAggregateInputType`
 */
export type Rs_board_categoryMaxAggregateInputType = Prisma.Rs_board_categoryMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_categoryCountAggregateInputType`
 */
export type Rs_board_categoryCountAggregateInputType = Prisma.Rs_board_categoryCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_board_categorySelect`
 */
export type rs_board_categorySelect = Prisma.rs_board_categorySelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_board_categoryArgs`
 */
export type FindUniquers_board_categoryArgs = Prisma.FindUniquers_board_categoryArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_board_categoryArgs`
 */
export type FindFirstrs_board_categoryArgs = Prisma.FindFirstrs_board_categoryArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_board_categoryArgs`
 */
export type FindManyrs_board_categoryArgs = Prisma.FindManyrs_board_categoryArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryCreateArgs`
 */
export type rs_board_categoryCreateArgs = Prisma.rs_board_categoryCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryUpdateArgs`
 */
export type rs_board_categoryUpdateArgs = Prisma.rs_board_categoryUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryUpdateManyArgs`
 */
export type rs_board_categoryUpdateManyArgs = Prisma.rs_board_categoryUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryUpsertArgs`
 */
export type rs_board_categoryUpsertArgs = Prisma.rs_board_categoryUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryDeleteArgs`
 */
export type rs_board_categoryDeleteArgs = Prisma.rs_board_categoryDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryDeleteManyArgs`
 */
export type rs_board_categoryDeleteManyArgs = Prisma.rs_board_categoryDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_comment`
 */
export type AggregateRs_board_comment = Prisma.AggregateRs_board_comment

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentAvgAggregateOutputType`
 */
export type Rs_board_commentAvgAggregateOutputType = Prisma.Rs_board_commentAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentSumAggregateOutputType`
 */
export type Rs_board_commentSumAggregateOutputType = Prisma.Rs_board_commentSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentMinAggregateOutputType`
 */
export type Rs_board_commentMinAggregateOutputType = Prisma.Rs_board_commentMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentMaxAggregateOutputType`
 */
export type Rs_board_commentMaxAggregateOutputType = Prisma.Rs_board_commentMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentCountAggregateOutputType`
 */
export type Rs_board_commentCountAggregateOutputType = Prisma.Rs_board_commentCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_commentArgs`
 */
export type AggregateRs_board_commentArgs = Prisma.AggregateRs_board_commentArgs

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentAvgAggregateInputType`
 */
export type Rs_board_commentAvgAggregateInputType = Prisma.Rs_board_commentAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentSumAggregateInputType`
 */
export type Rs_board_commentSumAggregateInputType = Prisma.Rs_board_commentSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentMinAggregateInputType`
 */
export type Rs_board_commentMinAggregateInputType = Prisma.Rs_board_commentMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentMaxAggregateInputType`
 */
export type Rs_board_commentMaxAggregateInputType = Prisma.Rs_board_commentMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentCountAggregateInputType`
 */
export type Rs_board_commentCountAggregateInputType = Prisma.Rs_board_commentCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_board_commentSelect`
 */
export type rs_board_commentSelect = Prisma.rs_board_commentSelect

/**
 * @deprecated Renamed to `Prisma.rs_board_commentInclude`
 */
export type rs_board_commentInclude = Prisma.rs_board_commentInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_board_commentArgs`
 */
export type FindUniquers_board_commentArgs = Prisma.FindUniquers_board_commentArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_board_commentArgs`
 */
export type FindFirstrs_board_commentArgs = Prisma.FindFirstrs_board_commentArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_board_commentArgs`
 */
export type FindManyrs_board_commentArgs = Prisma.FindManyrs_board_commentArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_commentCreateArgs`
 */
export type rs_board_commentCreateArgs = Prisma.rs_board_commentCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpdateArgs`
 */
export type rs_board_commentUpdateArgs = Prisma.rs_board_commentUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpdateManyArgs`
 */
export type rs_board_commentUpdateManyArgs = Prisma.rs_board_commentUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpsertArgs`
 */
export type rs_board_commentUpsertArgs = Prisma.rs_board_commentUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_commentDeleteArgs`
 */
export type rs_board_commentDeleteArgs = Prisma.rs_board_commentDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_commentDeleteManyArgs`
 */
export type rs_board_commentDeleteManyArgs = Prisma.rs_board_commentDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_post`
 */
export type AggregateRs_board_post = Prisma.AggregateRs_board_post

/**
 * @deprecated Renamed to `Prisma.Rs_board_postAvgAggregateOutputType`
 */
export type Rs_board_postAvgAggregateOutputType = Prisma.Rs_board_postAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postSumAggregateOutputType`
 */
export type Rs_board_postSumAggregateOutputType = Prisma.Rs_board_postSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postMinAggregateOutputType`
 */
export type Rs_board_postMinAggregateOutputType = Prisma.Rs_board_postMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postMaxAggregateOutputType`
 */
export type Rs_board_postMaxAggregateOutputType = Prisma.Rs_board_postMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postCountAggregateOutputType`
 */
export type Rs_board_postCountAggregateOutputType = Prisma.Rs_board_postCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_postArgs`
 */
export type AggregateRs_board_postArgs = Prisma.AggregateRs_board_postArgs

/**
 * @deprecated Renamed to `Prisma.Rs_board_postAvgAggregateInputType`
 */
export type Rs_board_postAvgAggregateInputType = Prisma.Rs_board_postAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postSumAggregateInputType`
 */
export type Rs_board_postSumAggregateInputType = Prisma.Rs_board_postSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postMinAggregateInputType`
 */
export type Rs_board_postMinAggregateInputType = Prisma.Rs_board_postMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postMaxAggregateInputType`
 */
export type Rs_board_postMaxAggregateInputType = Prisma.Rs_board_postMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_postCountAggregateInputType`
 */
export type Rs_board_postCountAggregateInputType = Prisma.Rs_board_postCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_board_postSelect`
 */
export type rs_board_postSelect = Prisma.rs_board_postSelect

/**
 * @deprecated Renamed to `Prisma.rs_board_postInclude`
 */
export type rs_board_postInclude = Prisma.rs_board_postInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_board_postArgs`
 */
export type FindUniquers_board_postArgs = Prisma.FindUniquers_board_postArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_board_postArgs`
 */
export type FindFirstrs_board_postArgs = Prisma.FindFirstrs_board_postArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_board_postArgs`
 */
export type FindManyrs_board_postArgs = Prisma.FindManyrs_board_postArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateArgs`
 */
export type rs_board_postCreateArgs = Prisma.rs_board_postCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateArgs`
 */
export type rs_board_postUpdateArgs = Prisma.rs_board_postUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateManyArgs`
 */
export type rs_board_postUpdateManyArgs = Prisma.rs_board_postUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpsertArgs`
 */
export type rs_board_postUpsertArgs = Prisma.rs_board_postUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_postDeleteArgs`
 */
export type rs_board_postDeleteArgs = Prisma.rs_board_postDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_postDeleteManyArgs`
 */
export type rs_board_postDeleteManyArgs = Prisma.rs_board_postDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mem_auth`
 */
export type AggregateRs_mem_auth = Prisma.AggregateRs_mem_auth

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authAvgAggregateOutputType`
 */
export type Rs_mem_authAvgAggregateOutputType = Prisma.Rs_mem_authAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authSumAggregateOutputType`
 */
export type Rs_mem_authSumAggregateOutputType = Prisma.Rs_mem_authSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authMinAggregateOutputType`
 */
export type Rs_mem_authMinAggregateOutputType = Prisma.Rs_mem_authMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authMaxAggregateOutputType`
 */
export type Rs_mem_authMaxAggregateOutputType = Prisma.Rs_mem_authMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authCountAggregateOutputType`
 */
export type Rs_mem_authCountAggregateOutputType = Prisma.Rs_mem_authCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mem_authArgs`
 */
export type AggregateRs_mem_authArgs = Prisma.AggregateRs_mem_authArgs

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authAvgAggregateInputType`
 */
export type Rs_mem_authAvgAggregateInputType = Prisma.Rs_mem_authAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authSumAggregateInputType`
 */
export type Rs_mem_authSumAggregateInputType = Prisma.Rs_mem_authSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authMinAggregateInputType`
 */
export type Rs_mem_authMinAggregateInputType = Prisma.Rs_mem_authMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authMaxAggregateInputType`
 */
export type Rs_mem_authMaxAggregateInputType = Prisma.Rs_mem_authMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_authCountAggregateInputType`
 */
export type Rs_mem_authCountAggregateInputType = Prisma.Rs_mem_authCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_mem_authSelect`
 */
export type rs_mem_authSelect = Prisma.rs_mem_authSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_mem_authArgs`
 */
export type FindUniquers_mem_authArgs = Prisma.FindUniquers_mem_authArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_mem_authArgs`
 */
export type FindFirstrs_mem_authArgs = Prisma.FindFirstrs_mem_authArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_mem_authArgs`
 */
export type FindManyrs_mem_authArgs = Prisma.FindManyrs_mem_authArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_authCreateArgs`
 */
export type rs_mem_authCreateArgs = Prisma.rs_mem_authCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_authUpdateArgs`
 */
export type rs_mem_authUpdateArgs = Prisma.rs_mem_authUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_authUpdateManyArgs`
 */
export type rs_mem_authUpdateManyArgs = Prisma.rs_mem_authUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_authUpsertArgs`
 */
export type rs_mem_authUpsertArgs = Prisma.rs_mem_authUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_authDeleteArgs`
 */
export type rs_mem_authDeleteArgs = Prisma.rs_mem_authDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_authDeleteManyArgs`
 */
export type rs_mem_authDeleteManyArgs = Prisma.rs_mem_authDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mem_token`
 */
export type AggregateRs_mem_token = Prisma.AggregateRs_mem_token

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenAvgAggregateOutputType`
 */
export type Rs_mem_tokenAvgAggregateOutputType = Prisma.Rs_mem_tokenAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenSumAggregateOutputType`
 */
export type Rs_mem_tokenSumAggregateOutputType = Prisma.Rs_mem_tokenSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenMinAggregateOutputType`
 */
export type Rs_mem_tokenMinAggregateOutputType = Prisma.Rs_mem_tokenMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenMaxAggregateOutputType`
 */
export type Rs_mem_tokenMaxAggregateOutputType = Prisma.Rs_mem_tokenMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenCountAggregateOutputType`
 */
export type Rs_mem_tokenCountAggregateOutputType = Prisma.Rs_mem_tokenCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_mem_tokenArgs`
 */
export type AggregateRs_mem_tokenArgs = Prisma.AggregateRs_mem_tokenArgs

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenAvgAggregateInputType`
 */
export type Rs_mem_tokenAvgAggregateInputType = Prisma.Rs_mem_tokenAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenSumAggregateInputType`
 */
export type Rs_mem_tokenSumAggregateInputType = Prisma.Rs_mem_tokenSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenMinAggregateInputType`
 */
export type Rs_mem_tokenMinAggregateInputType = Prisma.Rs_mem_tokenMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenMaxAggregateInputType`
 */
export type Rs_mem_tokenMaxAggregateInputType = Prisma.Rs_mem_tokenMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_mem_tokenCountAggregateInputType`
 */
export type Rs_mem_tokenCountAggregateInputType = Prisma.Rs_mem_tokenCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenSelect`
 */
export type rs_mem_tokenSelect = Prisma.rs_mem_tokenSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_mem_tokenArgs`
 */
export type FindUniquers_mem_tokenArgs = Prisma.FindUniquers_mem_tokenArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_mem_tokenArgs`
 */
export type FindFirstrs_mem_tokenArgs = Prisma.FindFirstrs_mem_tokenArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_mem_tokenArgs`
 */
export type FindManyrs_mem_tokenArgs = Prisma.FindManyrs_mem_tokenArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenCreateArgs`
 */
export type rs_mem_tokenCreateArgs = Prisma.rs_mem_tokenCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenUpdateArgs`
 */
export type rs_mem_tokenUpdateArgs = Prisma.rs_mem_tokenUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenUpdateManyArgs`
 */
export type rs_mem_tokenUpdateManyArgs = Prisma.rs_mem_tokenUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenUpsertArgs`
 */
export type rs_mem_tokenUpsertArgs = Prisma.rs_mem_tokenUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenDeleteArgs`
 */
export type rs_mem_tokenDeleteArgs = Prisma.rs_mem_tokenDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenDeleteManyArgs`
 */
export type rs_mem_tokenDeleteManyArgs = Prisma.rs_mem_tokenDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_likebad_log`
 */
export type AggregateRs_board_likebad_log = Prisma.AggregateRs_board_likebad_log

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logAvgAggregateOutputType`
 */
export type Rs_board_likebad_logAvgAggregateOutputType = Prisma.Rs_board_likebad_logAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logSumAggregateOutputType`
 */
export type Rs_board_likebad_logSumAggregateOutputType = Prisma.Rs_board_likebad_logSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logMinAggregateOutputType`
 */
export type Rs_board_likebad_logMinAggregateOutputType = Prisma.Rs_board_likebad_logMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logMaxAggregateOutputType`
 */
export type Rs_board_likebad_logMaxAggregateOutputType = Prisma.Rs_board_likebad_logMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logCountAggregateOutputType`
 */
export type Rs_board_likebad_logCountAggregateOutputType = Prisma.Rs_board_likebad_logCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_likebad_logArgs`
 */
export type AggregateRs_board_likebad_logArgs = Prisma.AggregateRs_board_likebad_logArgs

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logAvgAggregateInputType`
 */
export type Rs_board_likebad_logAvgAggregateInputType = Prisma.Rs_board_likebad_logAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logSumAggregateInputType`
 */
export type Rs_board_likebad_logSumAggregateInputType = Prisma.Rs_board_likebad_logSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logMinAggregateInputType`
 */
export type Rs_board_likebad_logMinAggregateInputType = Prisma.Rs_board_likebad_logMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logMaxAggregateInputType`
 */
export type Rs_board_likebad_logMaxAggregateInputType = Prisma.Rs_board_likebad_logMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_logCountAggregateInputType`
 */
export type Rs_board_likebad_logCountAggregateInputType = Prisma.Rs_board_likebad_logCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logSelect`
 */
export type rs_board_likebad_logSelect = Prisma.rs_board_likebad_logSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_board_likebad_logArgs`
 */
export type FindUniquers_board_likebad_logArgs = Prisma.FindUniquers_board_likebad_logArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_board_likebad_logArgs`
 */
export type FindFirstrs_board_likebad_logArgs = Prisma.FindFirstrs_board_likebad_logArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_board_likebad_logArgs`
 */
export type FindManyrs_board_likebad_logArgs = Prisma.FindManyrs_board_likebad_logArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logCreateArgs`
 */
export type rs_board_likebad_logCreateArgs = Prisma.rs_board_likebad_logCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logUpdateArgs`
 */
export type rs_board_likebad_logUpdateArgs = Prisma.rs_board_likebad_logUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logUpdateManyArgs`
 */
export type rs_board_likebad_logUpdateManyArgs = Prisma.rs_board_likebad_logUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logUpsertArgs`
 */
export type rs_board_likebad_logUpsertArgs = Prisma.rs_board_likebad_logUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logDeleteArgs`
 */
export type rs_board_likebad_logDeleteArgs = Prisma.rs_board_likebad_logDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logDeleteManyArgs`
 */
export type rs_board_likebad_logDeleteManyArgs = Prisma.rs_board_likebad_logDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_likebad_map`
 */
export type AggregateRs_board_likebad_map = Prisma.AggregateRs_board_likebad_map

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapAvgAggregateOutputType`
 */
export type Rs_board_likebad_mapAvgAggregateOutputType = Prisma.Rs_board_likebad_mapAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapSumAggregateOutputType`
 */
export type Rs_board_likebad_mapSumAggregateOutputType = Prisma.Rs_board_likebad_mapSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapMinAggregateOutputType`
 */
export type Rs_board_likebad_mapMinAggregateOutputType = Prisma.Rs_board_likebad_mapMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapMaxAggregateOutputType`
 */
export type Rs_board_likebad_mapMaxAggregateOutputType = Prisma.Rs_board_likebad_mapMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapCountAggregateOutputType`
 */
export type Rs_board_likebad_mapCountAggregateOutputType = Prisma.Rs_board_likebad_mapCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_likebad_mapArgs`
 */
export type AggregateRs_board_likebad_mapArgs = Prisma.AggregateRs_board_likebad_mapArgs

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapAvgAggregateInputType`
 */
export type Rs_board_likebad_mapAvgAggregateInputType = Prisma.Rs_board_likebad_mapAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapSumAggregateInputType`
 */
export type Rs_board_likebad_mapSumAggregateInputType = Prisma.Rs_board_likebad_mapSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapMinAggregateInputType`
 */
export type Rs_board_likebad_mapMinAggregateInputType = Prisma.Rs_board_likebad_mapMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapMaxAggregateInputType`
 */
export type Rs_board_likebad_mapMaxAggregateInputType = Prisma.Rs_board_likebad_mapMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapCountAggregateInputType`
 */
export type Rs_board_likebad_mapCountAggregateInputType = Prisma.Rs_board_likebad_mapCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapSelect`
 */
export type rs_board_likebad_mapSelect = Prisma.rs_board_likebad_mapSelect

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapInclude`
 */
export type rs_board_likebad_mapInclude = Prisma.rs_board_likebad_mapInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_board_likebad_mapArgs`
 */
export type FindUniquers_board_likebad_mapArgs = Prisma.FindUniquers_board_likebad_mapArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_board_likebad_mapArgs`
 */
export type FindFirstrs_board_likebad_mapArgs = Prisma.FindFirstrs_board_likebad_mapArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_board_likebad_mapArgs`
 */
export type FindManyrs_board_likebad_mapArgs = Prisma.FindManyrs_board_likebad_mapArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateArgs`
 */
export type rs_board_likebad_mapCreateArgs = Prisma.rs_board_likebad_mapCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateArgs`
 */
export type rs_board_likebad_mapUpdateArgs = Prisma.rs_board_likebad_mapUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateManyArgs`
 */
export type rs_board_likebad_mapUpdateManyArgs = Prisma.rs_board_likebad_mapUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpsertArgs`
 */
export type rs_board_likebad_mapUpsertArgs = Prisma.rs_board_likebad_mapUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapDeleteArgs`
 */
export type rs_board_likebad_mapDeleteArgs = Prisma.rs_board_likebad_mapDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapDeleteManyArgs`
 */
export type rs_board_likebad_mapDeleteManyArgs = Prisma.rs_board_likebad_mapDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_note`
 */
export type AggregateRs_note = Prisma.AggregateRs_note

/**
 * @deprecated Renamed to `Prisma.Rs_noteAvgAggregateOutputType`
 */
export type Rs_noteAvgAggregateOutputType = Prisma.Rs_noteAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteSumAggregateOutputType`
 */
export type Rs_noteSumAggregateOutputType = Prisma.Rs_noteSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteMinAggregateOutputType`
 */
export type Rs_noteMinAggregateOutputType = Prisma.Rs_noteMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteMaxAggregateOutputType`
 */
export type Rs_noteMaxAggregateOutputType = Prisma.Rs_noteMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteCountAggregateOutputType`
 */
export type Rs_noteCountAggregateOutputType = Prisma.Rs_noteCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_noteArgs`
 */
export type AggregateRs_noteArgs = Prisma.AggregateRs_noteArgs

/**
 * @deprecated Renamed to `Prisma.Rs_noteAvgAggregateInputType`
 */
export type Rs_noteAvgAggregateInputType = Prisma.Rs_noteAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteSumAggregateInputType`
 */
export type Rs_noteSumAggregateInputType = Prisma.Rs_noteSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteMinAggregateInputType`
 */
export type Rs_noteMinAggregateInputType = Prisma.Rs_noteMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteMaxAggregateInputType`
 */
export type Rs_noteMaxAggregateInputType = Prisma.Rs_noteMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_noteCountAggregateInputType`
 */
export type Rs_noteCountAggregateInputType = Prisma.Rs_noteCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_noteSelect`
 */
export type rs_noteSelect = Prisma.rs_noteSelect

/**
 * @deprecated Renamed to `Prisma.rs_noteInclude`
 */
export type rs_noteInclude = Prisma.rs_noteInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquers_noteArgs`
 */
export type FindUniquers_noteArgs = Prisma.FindUniquers_noteArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_noteArgs`
 */
export type FindFirstrs_noteArgs = Prisma.FindFirstrs_noteArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_noteArgs`
 */
export type FindManyrs_noteArgs = Prisma.FindManyrs_noteArgs

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateArgs`
 */
export type rs_noteCreateArgs = Prisma.rs_noteCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateArgs`
 */
export type rs_noteUpdateArgs = Prisma.rs_noteUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyArgs`
 */
export type rs_noteUpdateManyArgs = Prisma.rs_noteUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_noteUpsertArgs`
 */
export type rs_noteUpsertArgs = Prisma.rs_noteUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_noteDeleteArgs`
 */
export type rs_noteDeleteArgs = Prisma.rs_noteDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_noteDeleteManyArgs`
 */
export type rs_noteDeleteManyArgs = Prisma.rs_noteDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_admin`
 */
export type AggregateRs_board_admin = Prisma.AggregateRs_board_admin

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminAvgAggregateOutputType`
 */
export type Rs_board_adminAvgAggregateOutputType = Prisma.Rs_board_adminAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminSumAggregateOutputType`
 */
export type Rs_board_adminSumAggregateOutputType = Prisma.Rs_board_adminSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminMinAggregateOutputType`
 */
export type Rs_board_adminMinAggregateOutputType = Prisma.Rs_board_adminMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminMaxAggregateOutputType`
 */
export type Rs_board_adminMaxAggregateOutputType = Prisma.Rs_board_adminMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminCountAggregateOutputType`
 */
export type Rs_board_adminCountAggregateOutputType = Prisma.Rs_board_adminCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_board_adminArgs`
 */
export type AggregateRs_board_adminArgs = Prisma.AggregateRs_board_adminArgs

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminAvgAggregateInputType`
 */
export type Rs_board_adminAvgAggregateInputType = Prisma.Rs_board_adminAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminSumAggregateInputType`
 */
export type Rs_board_adminSumAggregateInputType = Prisma.Rs_board_adminSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminMinAggregateInputType`
 */
export type Rs_board_adminMinAggregateInputType = Prisma.Rs_board_adminMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminMaxAggregateInputType`
 */
export type Rs_board_adminMaxAggregateInputType = Prisma.Rs_board_adminMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_board_adminCountAggregateInputType`
 */
export type Rs_board_adminCountAggregateInputType = Prisma.Rs_board_adminCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_board_adminSelect`
 */
export type rs_board_adminSelect = Prisma.rs_board_adminSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_board_adminArgs`
 */
export type FindUniquers_board_adminArgs = Prisma.FindUniquers_board_adminArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_board_adminArgs`
 */
export type FindFirstrs_board_adminArgs = Prisma.FindFirstrs_board_adminArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_board_adminArgs`
 */
export type FindManyrs_board_adminArgs = Prisma.FindManyrs_board_adminArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_adminCreateArgs`
 */
export type rs_board_adminCreateArgs = Prisma.rs_board_adminCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_adminUpdateArgs`
 */
export type rs_board_adminUpdateArgs = Prisma.rs_board_adminUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_adminUpdateManyArgs`
 */
export type rs_board_adminUpdateManyArgs = Prisma.rs_board_adminUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_adminUpsertArgs`
 */
export type rs_board_adminUpsertArgs = Prisma.rs_board_adminUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_adminDeleteArgs`
 */
export type rs_board_adminDeleteArgs = Prisma.rs_board_adminDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_board_adminDeleteManyArgs`
 */
export type rs_board_adminDeleteManyArgs = Prisma.rs_board_adminDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePris_member`
 */
export type AggregatePris_member = Prisma.AggregatePris_member

/**
 * @deprecated Renamed to `Prisma.Pris_memberAvgAggregateOutputType`
 */
export type Pris_memberAvgAggregateOutputType = Prisma.Pris_memberAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberSumAggregateOutputType`
 */
export type Pris_memberSumAggregateOutputType = Prisma.Pris_memberSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberMinAggregateOutputType`
 */
export type Pris_memberMinAggregateOutputType = Prisma.Pris_memberMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberMaxAggregateOutputType`
 */
export type Pris_memberMaxAggregateOutputType = Prisma.Pris_memberMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberCountAggregateOutputType`
 */
export type Pris_memberCountAggregateOutputType = Prisma.Pris_memberCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePris_memberArgs`
 */
export type AggregatePris_memberArgs = Prisma.AggregatePris_memberArgs

/**
 * @deprecated Renamed to `Prisma.Pris_memberAvgAggregateInputType`
 */
export type Pris_memberAvgAggregateInputType = Prisma.Pris_memberAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberSumAggregateInputType`
 */
export type Pris_memberSumAggregateInputType = Prisma.Pris_memberSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberMinAggregateInputType`
 */
export type Pris_memberMinAggregateInputType = Prisma.Pris_memberMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberMaxAggregateInputType`
 */
export type Pris_memberMaxAggregateInputType = Prisma.Pris_memberMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_memberCountAggregateInputType`
 */
export type Pris_memberCountAggregateInputType = Prisma.Pris_memberCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.pris_memberSelect`
 */
export type pris_memberSelect = Prisma.pris_memberSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquepris_memberArgs`
 */
export type FindUniquepris_memberArgs = Prisma.FindUniquepris_memberArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstpris_memberArgs`
 */
export type FindFirstpris_memberArgs = Prisma.FindFirstpris_memberArgs

/**
 * @deprecated Renamed to `Prisma.FindManypris_memberArgs`
 */
export type FindManypris_memberArgs = Prisma.FindManypris_memberArgs

/**
 * @deprecated Renamed to `Prisma.pris_memberCreateArgs`
 */
export type pris_memberCreateArgs = Prisma.pris_memberCreateArgs

/**
 * @deprecated Renamed to `Prisma.pris_memberUpdateArgs`
 */
export type pris_memberUpdateArgs = Prisma.pris_memberUpdateArgs

/**
 * @deprecated Renamed to `Prisma.pris_memberUpdateManyArgs`
 */
export type pris_memberUpdateManyArgs = Prisma.pris_memberUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.pris_memberUpsertArgs`
 */
export type pris_memberUpsertArgs = Prisma.pris_memberUpsertArgs

/**
 * @deprecated Renamed to `Prisma.pris_memberDeleteArgs`
 */
export type pris_memberDeleteArgs = Prisma.pris_memberDeleteArgs

/**
 * @deprecated Renamed to `Prisma.pris_memberDeleteManyArgs`
 */
export type pris_memberDeleteManyArgs = Prisma.pris_memberDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateRs_menu`
 */
export type AggregateRs_menu = Prisma.AggregateRs_menu

/**
 * @deprecated Renamed to `Prisma.Rs_menuAvgAggregateOutputType`
 */
export type Rs_menuAvgAggregateOutputType = Prisma.Rs_menuAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuSumAggregateOutputType`
 */
export type Rs_menuSumAggregateOutputType = Prisma.Rs_menuSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuMinAggregateOutputType`
 */
export type Rs_menuMinAggregateOutputType = Prisma.Rs_menuMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuMaxAggregateOutputType`
 */
export type Rs_menuMaxAggregateOutputType = Prisma.Rs_menuMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuCountAggregateOutputType`
 */
export type Rs_menuCountAggregateOutputType = Prisma.Rs_menuCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateRs_menuArgs`
 */
export type AggregateRs_menuArgs = Prisma.AggregateRs_menuArgs

/**
 * @deprecated Renamed to `Prisma.Rs_menuAvgAggregateInputType`
 */
export type Rs_menuAvgAggregateInputType = Prisma.Rs_menuAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuSumAggregateInputType`
 */
export type Rs_menuSumAggregateInputType = Prisma.Rs_menuSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuMinAggregateInputType`
 */
export type Rs_menuMinAggregateInputType = Prisma.Rs_menuMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuMaxAggregateInputType`
 */
export type Rs_menuMaxAggregateInputType = Prisma.Rs_menuMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Rs_menuCountAggregateInputType`
 */
export type Rs_menuCountAggregateInputType = Prisma.Rs_menuCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.rs_menuSelect`
 */
export type rs_menuSelect = Prisma.rs_menuSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquers_menuArgs`
 */
export type FindUniquers_menuArgs = Prisma.FindUniquers_menuArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstrs_menuArgs`
 */
export type FindFirstrs_menuArgs = Prisma.FindFirstrs_menuArgs

/**
 * @deprecated Renamed to `Prisma.FindManyrs_menuArgs`
 */
export type FindManyrs_menuArgs = Prisma.FindManyrs_menuArgs

/**
 * @deprecated Renamed to `Prisma.rs_menuCreateArgs`
 */
export type rs_menuCreateArgs = Prisma.rs_menuCreateArgs

/**
 * @deprecated Renamed to `Prisma.rs_menuUpdateArgs`
 */
export type rs_menuUpdateArgs = Prisma.rs_menuUpdateArgs

/**
 * @deprecated Renamed to `Prisma.rs_menuUpdateManyArgs`
 */
export type rs_menuUpdateManyArgs = Prisma.rs_menuUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.rs_menuUpsertArgs`
 */
export type rs_menuUpsertArgs = Prisma.rs_menuUpsertArgs

/**
 * @deprecated Renamed to `Prisma.rs_menuDeleteArgs`
 */
export type rs_menuDeleteArgs = Prisma.rs_menuDeleteArgs

/**
 * @deprecated Renamed to `Prisma.rs_menuDeleteManyArgs`
 */
export type rs_menuDeleteManyArgs = Prisma.rs_menuDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateTest2`
 */
export type AggregateTest2 = Prisma.AggregateTest2

/**
 * @deprecated Renamed to `Prisma.Test2AvgAggregateOutputType`
 */
export type Test2AvgAggregateOutputType = Prisma.Test2AvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Test2SumAggregateOutputType`
 */
export type Test2SumAggregateOutputType = Prisma.Test2SumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Test2MinAggregateOutputType`
 */
export type Test2MinAggregateOutputType = Prisma.Test2MinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Test2MaxAggregateOutputType`
 */
export type Test2MaxAggregateOutputType = Prisma.Test2MaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Test2CountAggregateOutputType`
 */
export type Test2CountAggregateOutputType = Prisma.Test2CountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateTest2Args`
 */
export type AggregateTest2Args = Prisma.AggregateTest2Args

/**
 * @deprecated Renamed to `Prisma.Test2AvgAggregateInputType`
 */
export type Test2AvgAggregateInputType = Prisma.Test2AvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Test2SumAggregateInputType`
 */
export type Test2SumAggregateInputType = Prisma.Test2SumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Test2MinAggregateInputType`
 */
export type Test2MinAggregateInputType = Prisma.Test2MinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Test2MaxAggregateInputType`
 */
export type Test2MaxAggregateInputType = Prisma.Test2MaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Test2CountAggregateInputType`
 */
export type Test2CountAggregateInputType = Prisma.Test2CountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.test2Select`
 */
export type test2Select = Prisma.test2Select

/**
 * @deprecated Renamed to `Prisma.FindUniquetest2Args`
 */
export type FindUniquetest2Args = Prisma.FindUniquetest2Args

/**
 * @deprecated Renamed to `Prisma.FindFirsttest2Args`
 */
export type FindFirsttest2Args = Prisma.FindFirsttest2Args

/**
 * @deprecated Renamed to `Prisma.FindManytest2Args`
 */
export type FindManytest2Args = Prisma.FindManytest2Args

/**
 * @deprecated Renamed to `Prisma.test2CreateArgs`
 */
export type test2CreateArgs = Prisma.test2CreateArgs

/**
 * @deprecated Renamed to `Prisma.test2UpdateArgs`
 */
export type test2UpdateArgs = Prisma.test2UpdateArgs

/**
 * @deprecated Renamed to `Prisma.test2UpdateManyArgs`
 */
export type test2UpdateManyArgs = Prisma.test2UpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.test2UpsertArgs`
 */
export type test2UpsertArgs = Prisma.test2UpsertArgs

/**
 * @deprecated Renamed to `Prisma.test2DeleteArgs`
 */
export type test2DeleteArgs = Prisma.test2DeleteArgs

/**
 * @deprecated Renamed to `Prisma.test2DeleteManyArgs`
 */
export type test2DeleteManyArgs = Prisma.test2DeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePris_log`
 */
export type AggregatePris_log = Prisma.AggregatePris_log

/**
 * @deprecated Renamed to `Prisma.Pris_logAvgAggregateOutputType`
 */
export type Pris_logAvgAggregateOutputType = Prisma.Pris_logAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_logSumAggregateOutputType`
 */
export type Pris_logSumAggregateOutputType = Prisma.Pris_logSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_logMinAggregateOutputType`
 */
export type Pris_logMinAggregateOutputType = Prisma.Pris_logMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_logMaxAggregateOutputType`
 */
export type Pris_logMaxAggregateOutputType = Prisma.Pris_logMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.Pris_logCountAggregateOutputType`
 */
export type Pris_logCountAggregateOutputType = Prisma.Pris_logCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePris_logArgs`
 */
export type AggregatePris_logArgs = Prisma.AggregatePris_logArgs

/**
 * @deprecated Renamed to `Prisma.Pris_logAvgAggregateInputType`
 */
export type Pris_logAvgAggregateInputType = Prisma.Pris_logAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_logSumAggregateInputType`
 */
export type Pris_logSumAggregateInputType = Prisma.Pris_logSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_logMinAggregateInputType`
 */
export type Pris_logMinAggregateInputType = Prisma.Pris_logMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_logMaxAggregateInputType`
 */
export type Pris_logMaxAggregateInputType = Prisma.Pris_logMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.Pris_logCountAggregateInputType`
 */
export type Pris_logCountAggregateInputType = Prisma.Pris_logCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.pris_logSelect`
 */
export type pris_logSelect = Prisma.pris_logSelect

/**
 * @deprecated Renamed to `Prisma.FindUniquepris_logArgs`
 */
export type FindUniquepris_logArgs = Prisma.FindUniquepris_logArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstpris_logArgs`
 */
export type FindFirstpris_logArgs = Prisma.FindFirstpris_logArgs

/**
 * @deprecated Renamed to `Prisma.FindManypris_logArgs`
 */
export type FindManypris_logArgs = Prisma.FindManypris_logArgs

/**
 * @deprecated Renamed to `Prisma.pris_logCreateArgs`
 */
export type pris_logCreateArgs = Prisma.pris_logCreateArgs

/**
 * @deprecated Renamed to `Prisma.pris_logUpdateArgs`
 */
export type pris_logUpdateArgs = Prisma.pris_logUpdateArgs

/**
 * @deprecated Renamed to `Prisma.pris_logUpdateManyArgs`
 */
export type pris_logUpdateManyArgs = Prisma.pris_logUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.pris_logUpsertArgs`
 */
export type pris_logUpsertArgs = Prisma.pris_logUpsertArgs

/**
 * @deprecated Renamed to `Prisma.pris_logDeleteArgs`
 */
export type pris_logDeleteArgs = Prisma.pris_logDeleteArgs

/**
 * @deprecated Renamed to `Prisma.pris_logDeleteManyArgs`
 */
export type pris_logDeleteManyArgs = Prisma.pris_logDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.testWhereInput`
 */
export type testWhereInput = Prisma.testWhereInput

/**
 * @deprecated Renamed to `Prisma.testOrderByInput`
 */
export type testOrderByInput = Prisma.testOrderByInput

/**
 * @deprecated Renamed to `Prisma.testWhereUniqueInput`
 */
export type testWhereUniqueInput = Prisma.testWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.board_cateWhereInput`
 */
export type board_cateWhereInput = Prisma.board_cateWhereInput

/**
 * @deprecated Renamed to `Prisma.board_cateOrderByInput`
 */
export type board_cateOrderByInput = Prisma.board_cateOrderByInput

/**
 * @deprecated Renamed to `Prisma.board_cateWhereUniqueInput`
 */
export type board_cateWhereUniqueInput = Prisma.board_cateWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.board_postWhereInput`
 */
export type board_postWhereInput = Prisma.board_postWhereInput

/**
 * @deprecated Renamed to `Prisma.board_postOrderByInput`
 */
export type board_postOrderByInput = Prisma.board_postOrderByInput

/**
 * @deprecated Renamed to `Prisma.board_postWhereUniqueInput`
 */
export type board_postWhereUniqueInput = Prisma.board_postWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_memberWhereInput`
 */
export type rs_memberWhereInput = Prisma.rs_memberWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_memberOrderByInput`
 */
export type rs_memberOrderByInput = Prisma.rs_memberOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_memberWhereUniqueInput`
 */
export type rs_memberWhereUniqueInput = Prisma.rs_memberWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logWhereInput`
 */
export type rs_mem_login_logWhereInput = Prisma.rs_mem_login_logWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logOrderByInput`
 */
export type rs_mem_login_logOrderByInput = Prisma.rs_mem_login_logOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logWhereUniqueInput`
 */
export type rs_mem_login_logWhereUniqueInput = Prisma.rs_mem_login_logWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrWhereInput`
 */
export type rs_mgrWhereInput = Prisma.rs_mgrWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrOrderByInput`
 */
export type rs_mgrOrderByInput = Prisma.rs_mgrOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrWhereUniqueInput`
 */
export type rs_mgrWhereUniqueInput = Prisma.rs_mgrWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memWhereInput`
 */
export type rs_mgr_memWhereInput = Prisma.rs_mgr_memWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memOrderByInput`
 */
export type rs_mgr_memOrderByInput = Prisma.rs_mgr_memOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memWhereUniqueInput`
 */
export type rs_mgr_memWhereUniqueInput = Prisma.rs_mgr_memWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_point_logWhereInput`
 */
export type rs_point_logWhereInput = Prisma.rs_point_logWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_point_logOrderByInput`
 */
export type rs_point_logOrderByInput = Prisma.rs_point_logOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_point_logWhereUniqueInput`
 */
export type rs_point_logWhereUniqueInput = Prisma.rs_point_logWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_pointWhereInput`
 */
export type rs_pointWhereInput = Prisma.rs_pointWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_pointOrderByInput`
 */
export type rs_pointOrderByInput = Prisma.rs_pointOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_pointWhereUniqueInput`
 */
export type rs_pointWhereUniqueInput = Prisma.rs_pointWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryWhereInput`
 */
export type rs_board_categoryWhereInput = Prisma.rs_board_categoryWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryOrderByInput`
 */
export type rs_board_categoryOrderByInput = Prisma.rs_board_categoryOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryWhereUniqueInput`
 */
export type rs_board_categoryWhereUniqueInput = Prisma.rs_board_categoryWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentWhereInput`
 */
export type rs_board_commentWhereInput = Prisma.rs_board_commentWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentOrderByInput`
 */
export type rs_board_commentOrderByInput = Prisma.rs_board_commentOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentWhereUniqueInput`
 */
export type rs_board_commentWhereUniqueInput = Prisma.rs_board_commentWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postWhereInput`
 */
export type rs_board_postWhereInput = Prisma.rs_board_postWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postOrderByInput`
 */
export type rs_board_postOrderByInput = Prisma.rs_board_postOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postWhereUniqueInput`
 */
export type rs_board_postWhereUniqueInput = Prisma.rs_board_postWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_authWhereInput`
 */
export type rs_mem_authWhereInput = Prisma.rs_mem_authWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_authOrderByInput`
 */
export type rs_mem_authOrderByInput = Prisma.rs_mem_authOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_authWhereUniqueInput`
 */
export type rs_mem_authWhereUniqueInput = Prisma.rs_mem_authWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenWhereInput`
 */
export type rs_mem_tokenWhereInput = Prisma.rs_mem_tokenWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenOrderByInput`
 */
export type rs_mem_tokenOrderByInput = Prisma.rs_mem_tokenOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenWhereUniqueInput`
 */
export type rs_mem_tokenWhereUniqueInput = Prisma.rs_mem_tokenWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logWhereInput`
 */
export type rs_board_likebad_logWhereInput = Prisma.rs_board_likebad_logWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logOrderByInput`
 */
export type rs_board_likebad_logOrderByInput = Prisma.rs_board_likebad_logOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logWhereUniqueInput`
 */
export type rs_board_likebad_logWhereUniqueInput = Prisma.rs_board_likebad_logWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapWhereInput`
 */
export type rs_board_likebad_mapWhereInput = Prisma.rs_board_likebad_mapWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapOrderByInput`
 */
export type rs_board_likebad_mapOrderByInput = Prisma.rs_board_likebad_mapOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapWhereUniqueInput`
 */
export type rs_board_likebad_mapWhereUniqueInput = Prisma.rs_board_likebad_mapWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_noteWhereInput`
 */
export type rs_noteWhereInput = Prisma.rs_noteWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_noteOrderByInput`
 */
export type rs_noteOrderByInput = Prisma.rs_noteOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_noteWhereUniqueInput`
 */
export type rs_noteWhereUniqueInput = Prisma.rs_noteWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_board_adminWhereInput`
 */
export type rs_board_adminWhereInput = Prisma.rs_board_adminWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_board_adminOrderByInput`
 */
export type rs_board_adminOrderByInput = Prisma.rs_board_adminOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_board_adminWhereUniqueInput`
 */
export type rs_board_adminWhereUniqueInput = Prisma.rs_board_adminWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.pris_memberWhereInput`
 */
export type pris_memberWhereInput = Prisma.pris_memberWhereInput

/**
 * @deprecated Renamed to `Prisma.pris_memberOrderByInput`
 */
export type pris_memberOrderByInput = Prisma.pris_memberOrderByInput

/**
 * @deprecated Renamed to `Prisma.pris_memberWhereUniqueInput`
 */
export type pris_memberWhereUniqueInput = Prisma.pris_memberWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.rs_menuWhereInput`
 */
export type rs_menuWhereInput = Prisma.rs_menuWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_menuOrderByInput`
 */
export type rs_menuOrderByInput = Prisma.rs_menuOrderByInput

/**
 * @deprecated Renamed to `Prisma.rs_menuWhereUniqueInput`
 */
export type rs_menuWhereUniqueInput = Prisma.rs_menuWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.test2WhereInput`
 */
export type test2WhereInput = Prisma.test2WhereInput

/**
 * @deprecated Renamed to `Prisma.test2OrderByInput`
 */
export type test2OrderByInput = Prisma.test2OrderByInput

/**
 * @deprecated Renamed to `Prisma.test2WhereUniqueInput`
 */
export type test2WhereUniqueInput = Prisma.test2WhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.pris_logWhereInput`
 */
export type pris_logWhereInput = Prisma.pris_logWhereInput

/**
 * @deprecated Renamed to `Prisma.pris_logOrderByInput`
 */
export type pris_logOrderByInput = Prisma.pris_logOrderByInput

/**
 * @deprecated Renamed to `Prisma.pris_logWhereUniqueInput`
 */
export type pris_logWhereUniqueInput = Prisma.pris_logWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.testCreateInput`
 */
export type testCreateInput = Prisma.testCreateInput

/**
 * @deprecated Renamed to `Prisma.testUpdateInput`
 */
export type testUpdateInput = Prisma.testUpdateInput

/**
 * @deprecated Renamed to `Prisma.testUpdateManyMutationInput`
 */
export type testUpdateManyMutationInput = Prisma.testUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.board_cateCreateInput`
 */
export type board_cateCreateInput = Prisma.board_cateCreateInput

/**
 * @deprecated Renamed to `Prisma.board_cateUpdateInput`
 */
export type board_cateUpdateInput = Prisma.board_cateUpdateInput

/**
 * @deprecated Renamed to `Prisma.board_cateUpdateManyMutationInput`
 */
export type board_cateUpdateManyMutationInput = Prisma.board_cateUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.board_postCreateInput`
 */
export type board_postCreateInput = Prisma.board_postCreateInput

/**
 * @deprecated Renamed to `Prisma.board_postUpdateInput`
 */
export type board_postUpdateInput = Prisma.board_postUpdateInput

/**
 * @deprecated Renamed to `Prisma.board_postUpdateManyMutationInput`
 */
export type board_postUpdateManyMutationInput = Prisma.board_postUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateInput`
 */
export type rs_memberCreateInput = Prisma.rs_memberCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateInput`
 */
export type rs_memberUpdateInput = Prisma.rs_memberUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateManyMutationInput`
 */
export type rs_memberUpdateManyMutationInput = Prisma.rs_memberUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logCreateInput`
 */
export type rs_mem_login_logCreateInput = Prisma.rs_mem_login_logCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logUpdateInput`
 */
export type rs_mem_login_logUpdateInput = Prisma.rs_mem_login_logUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_login_logUpdateManyMutationInput`
 */
export type rs_mem_login_logUpdateManyMutationInput = Prisma.rs_mem_login_logUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrCreateInput`
 */
export type rs_mgrCreateInput = Prisma.rs_mgrCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpdateInput`
 */
export type rs_mgrUpdateInput = Prisma.rs_mgrUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpdateManyMutationInput`
 */
export type rs_mgrUpdateManyMutationInput = Prisma.rs_mgrUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateInput`
 */
export type rs_mgr_memCreateInput = Prisma.rs_mgr_memCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateInput`
 */
export type rs_mgr_memUpdateInput = Prisma.rs_mgr_memUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateManyMutationInput`
 */
export type rs_mgr_memUpdateManyMutationInput = Prisma.rs_mgr_memUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_point_logCreateInput`
 */
export type rs_point_logCreateInput = Prisma.rs_point_logCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_point_logUpdateInput`
 */
export type rs_point_logUpdateInput = Prisma.rs_point_logUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_point_logUpdateManyMutationInput`
 */
export type rs_point_logUpdateManyMutationInput = Prisma.rs_point_logUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_pointCreateInput`
 */
export type rs_pointCreateInput = Prisma.rs_pointCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_pointUpdateInput`
 */
export type rs_pointUpdateInput = Prisma.rs_pointUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_pointUpdateManyMutationInput`
 */
export type rs_pointUpdateManyMutationInput = Prisma.rs_pointUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryCreateInput`
 */
export type rs_board_categoryCreateInput = Prisma.rs_board_categoryCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryUpdateInput`
 */
export type rs_board_categoryUpdateInput = Prisma.rs_board_categoryUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_categoryUpdateManyMutationInput`
 */
export type rs_board_categoryUpdateManyMutationInput = Prisma.rs_board_categoryUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentCreateInput`
 */
export type rs_board_commentCreateInput = Prisma.rs_board_commentCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpdateInput`
 */
export type rs_board_commentUpdateInput = Prisma.rs_board_commentUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpdateManyMutationInput`
 */
export type rs_board_commentUpdateManyMutationInput = Prisma.rs_board_commentUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateInput`
 */
export type rs_board_postCreateInput = Prisma.rs_board_postCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateInput`
 */
export type rs_board_postUpdateInput = Prisma.rs_board_postUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateManyMutationInput`
 */
export type rs_board_postUpdateManyMutationInput = Prisma.rs_board_postUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_authCreateInput`
 */
export type rs_mem_authCreateInput = Prisma.rs_mem_authCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_authUpdateInput`
 */
export type rs_mem_authUpdateInput = Prisma.rs_mem_authUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_authUpdateManyMutationInput`
 */
export type rs_mem_authUpdateManyMutationInput = Prisma.rs_mem_authUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenCreateInput`
 */
export type rs_mem_tokenCreateInput = Prisma.rs_mem_tokenCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenUpdateInput`
 */
export type rs_mem_tokenUpdateInput = Prisma.rs_mem_tokenUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_mem_tokenUpdateManyMutationInput`
 */
export type rs_mem_tokenUpdateManyMutationInput = Prisma.rs_mem_tokenUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logCreateInput`
 */
export type rs_board_likebad_logCreateInput = Prisma.rs_board_likebad_logCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logUpdateInput`
 */
export type rs_board_likebad_logUpdateInput = Prisma.rs_board_likebad_logUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_logUpdateManyMutationInput`
 */
export type rs_board_likebad_logUpdateManyMutationInput = Prisma.rs_board_likebad_logUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateInput`
 */
export type rs_board_likebad_mapCreateInput = Prisma.rs_board_likebad_mapCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateInput`
 */
export type rs_board_likebad_mapUpdateInput = Prisma.rs_board_likebad_mapUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateManyMutationInput`
 */
export type rs_board_likebad_mapUpdateManyMutationInput = Prisma.rs_board_likebad_mapUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateInput`
 */
export type rs_noteCreateInput = Prisma.rs_noteCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateInput`
 */
export type rs_noteUpdateInput = Prisma.rs_noteUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyMutationInput`
 */
export type rs_noteUpdateManyMutationInput = Prisma.rs_noteUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_board_adminCreateInput`
 */
export type rs_board_adminCreateInput = Prisma.rs_board_adminCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_adminUpdateInput`
 */
export type rs_board_adminUpdateInput = Prisma.rs_board_adminUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_board_adminUpdateManyMutationInput`
 */
export type rs_board_adminUpdateManyMutationInput = Prisma.rs_board_adminUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.pris_memberCreateInput`
 */
export type pris_memberCreateInput = Prisma.pris_memberCreateInput

/**
 * @deprecated Renamed to `Prisma.pris_memberUpdateInput`
 */
export type pris_memberUpdateInput = Prisma.pris_memberUpdateInput

/**
 * @deprecated Renamed to `Prisma.pris_memberUpdateManyMutationInput`
 */
export type pris_memberUpdateManyMutationInput = Prisma.pris_memberUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.rs_menuCreateInput`
 */
export type rs_menuCreateInput = Prisma.rs_menuCreateInput

/**
 * @deprecated Renamed to `Prisma.rs_menuUpdateInput`
 */
export type rs_menuUpdateInput = Prisma.rs_menuUpdateInput

/**
 * @deprecated Renamed to `Prisma.rs_menuUpdateManyMutationInput`
 */
export type rs_menuUpdateManyMutationInput = Prisma.rs_menuUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.test2CreateInput`
 */
export type test2CreateInput = Prisma.test2CreateInput

/**
 * @deprecated Renamed to `Prisma.test2UpdateInput`
 */
export type test2UpdateInput = Prisma.test2UpdateInput

/**
 * @deprecated Renamed to `Prisma.test2UpdateManyMutationInput`
 */
export type test2UpdateManyMutationInput = Prisma.test2UpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.pris_logCreateInput`
 */
export type pris_logCreateInput = Prisma.pris_logCreateInput

/**
 * @deprecated Renamed to `Prisma.pris_logUpdateInput`
 */
export type pris_logUpdateInput = Prisma.pris_logUpdateInput

/**
 * @deprecated Renamed to `Prisma.pris_logUpdateManyMutationInput`
 */
export type pris_logUpdateManyMutationInput = Prisma.pris_logUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.Board_postListRelationFilter`
 */
export type Board_postListRelationFilter = Prisma.Board_postListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Board_cateRelationFilter`
 */
export type Board_cateRelationFilter = Prisma.Board_cateRelationFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memRelationFilter`
 */
export type Rs_mgr_memRelationFilter = Prisma.Rs_mgr_memRelationFilter

/**
 * @deprecated Renamed to `Prisma.Rs_noteListRelationFilter`
 */
export type Rs_noteListRelationFilter = Prisma.Rs_noteListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Rs_pointRelationFilter`
 */
export type Rs_pointRelationFilter = Prisma.Rs_pointRelationFilter

/**
 * @deprecated Renamed to `Prisma.IntNullableFilter`
 */
export type IntNullableFilter = Prisma.IntNullableFilter

/**
 * @deprecated Renamed to `Prisma.Rs_mgr_memListRelationFilter`
 */
export type Rs_mgr_memListRelationFilter = Prisma.Rs_mgr_memListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Rs_memberRelationFilter`
 */
export type Rs_memberRelationFilter = Prisma.Rs_memberRelationFilter

/**
 * @deprecated Renamed to `Prisma.Rs_mgrRelationFilter`
 */
export type Rs_mgrRelationFilter = Prisma.Rs_mgrRelationFilter

/**
 * @deprecated Renamed to `Prisma.Mgm_mgr_idxMgm_mem_idxCompoundUniqueInput`
 */
export type Mgm_mgr_idxMgm_mem_idxCompoundUniqueInput = Prisma.Mgm_mgr_idxMgm_mem_idxCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.Poi_mem_idxPoi_mem_idCompoundUniqueInput`
 */
export type Poi_mem_idxPoi_mem_idCompoundUniqueInput = Prisma.Poi_mem_idxPoi_mem_idCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.Rs_board_likebad_mapListRelationFilter`
 */
export type Rs_board_likebad_mapListRelationFilter = Prisma.Rs_board_likebad_mapListRelationFilter

/**
 * @deprecated Renamed to `Prisma.Cmt_idxCmt_mem_idxCompoundUniqueInput`
 */
export type Cmt_idxCmt_mem_idxCompoundUniqueInput = Prisma.Cmt_idxCmt_mem_idxCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.Pst_idxPst_mem_idxCompoundUniqueInput`
 */
export type Pst_idxPst_mem_idxCompoundUniqueInput = Prisma.Pst_idxPst_mem_idxCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.Rs_board_commentRelationFilter`
 */
export type Rs_board_commentRelationFilter = Prisma.Rs_board_commentRelationFilter

/**
 * @deprecated Renamed to `Prisma.Rs_board_postRelationFilter`
 */
export type Rs_board_postRelationFilter = Prisma.Rs_board_postRelationFilter

/**
 * @deprecated Renamed to `Prisma.Test_unique_test_deletion_uniqueCompoundUniqueInput`
 */
export type Test_unique_test_deletion_uniqueCompoundUniqueInput = Prisma.Test_unique_test_deletion_uniqueCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.board_postCreateManyWithoutBoard_cateInput`
 */
export type board_postCreateManyWithoutBoard_cateInput = Prisma.board_postCreateManyWithoutBoard_cateInput

/**
 * @deprecated Renamed to `Prisma.board_postUpdateManyWithoutBoard_cateInput`
 */
export type board_postUpdateManyWithoutBoard_cateInput = Prisma.board_postUpdateManyWithoutBoard_cateInput

/**
 * @deprecated Renamed to `Prisma.board_cateCreateOneWithoutBoard_postInput`
 */
export type board_cateCreateOneWithoutBoard_postInput = Prisma.board_cateCreateOneWithoutBoard_postInput

/**
 * @deprecated Renamed to `Prisma.board_cateUpdateOneRequiredWithoutBoard_postInput`
 */
export type board_cateUpdateOneRequiredWithoutBoard_postInput = Prisma.board_cateUpdateOneRequiredWithoutBoard_postInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateOneWithoutRs_memberInput`
 */
export type rs_mgr_memCreateOneWithoutRs_memberInput = Prisma.rs_mgr_memCreateOneWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteCreateManyWithoutRs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_pointCreateOneWithoutRs_memberInput`
 */
export type rs_pointCreateOneWithoutRs_memberInput = Prisma.rs_pointCreateOneWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateOneWithoutRs_memberInput`
 */
export type rs_mgr_memUpdateOneWithoutRs_memberInput = Prisma.rs_mgr_memUpdateOneWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteUpdateManyWithoutRs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_pointUpdateOneWithoutRs_memberInput`
 */
export type rs_pointUpdateOneWithoutRs_memberInput = Prisma.rs_pointUpdateOneWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.NullableIntFieldUpdateOperationsInput`
 */
export type NullableIntFieldUpdateOperationsInput = Prisma.NullableIntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateManyWithoutRs_mgrInput`
 */
export type rs_mgr_memCreateManyWithoutRs_mgrInput = Prisma.rs_mgr_memCreateManyWithoutRs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateManyWithoutRs_mgrInput`
 */
export type rs_mgr_memUpdateManyWithoutRs_mgrInput = Prisma.rs_mgr_memUpdateManyWithoutRs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOneWithoutRs_mgr_memInput`
 */
export type rs_memberCreateOneWithoutRs_mgr_memInput = Prisma.rs_memberCreateOneWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrCreateOneWithoutRs_mgr_memInput`
 */
export type rs_mgrCreateOneWithoutRs_mgr_memInput = Prisma.rs_mgrCreateOneWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateOneRequiredWithoutRs_mgr_memInput`
 */
export type rs_memberUpdateOneRequiredWithoutRs_mgr_memInput = Prisma.rs_memberUpdateOneRequiredWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpdateOneRequiredWithoutRs_mgr_memInput`
 */
export type rs_mgrUpdateOneRequiredWithoutRs_mgr_memInput = Prisma.rs_mgrUpdateOneRequiredWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOneWithoutRs_pointInput`
 */
export type rs_memberCreateOneWithoutRs_pointInput = Prisma.rs_memberCreateOneWithoutRs_pointInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateOneRequiredWithoutRs_pointInput`
 */
export type rs_memberUpdateOneRequiredWithoutRs_pointInput = Prisma.rs_memberUpdateOneRequiredWithoutRs_pointInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateManyWithoutRs_board_commentInput`
 */
export type rs_board_likebad_mapCreateManyWithoutRs_board_commentInput = Prisma.rs_board_likebad_mapCreateManyWithoutRs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateManyWithoutRs_board_commentInput`
 */
export type rs_board_likebad_mapUpdateManyWithoutRs_board_commentInput = Prisma.rs_board_likebad_mapUpdateManyWithoutRs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateManyWithoutRs_board_postInput`
 */
export type rs_board_likebad_mapCreateManyWithoutRs_board_postInput = Prisma.rs_board_likebad_mapCreateManyWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateManyWithoutRs_board_postInput`
 */
export type rs_noteCreateManyWithoutRs_board_postInput = Prisma.rs_noteCreateManyWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateManyWithoutRs_board_postInput`
 */
export type rs_board_likebad_mapUpdateManyWithoutRs_board_postInput = Prisma.rs_board_likebad_mapUpdateManyWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyWithoutRs_board_postInput`
 */
export type rs_noteUpdateManyWithoutRs_board_postInput = Prisma.rs_noteUpdateManyWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentCreateOneWithoutRs_board_likebad_mapInput`
 */
export type rs_board_commentCreateOneWithoutRs_board_likebad_mapInput = Prisma.rs_board_commentCreateOneWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateOneWithoutRs_board_likebad_mapInput`
 */
export type rs_board_postCreateOneWithoutRs_board_likebad_mapInput = Prisma.rs_board_postCreateOneWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpdateOneWithoutRs_board_likebad_mapInput`
 */
export type rs_board_commentUpdateOneWithoutRs_board_likebad_mapInput = Prisma.rs_board_commentUpdateOneWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateOneWithoutRs_board_likebad_mapInput`
 */
export type rs_board_postUpdateOneWithoutRs_board_likebad_mapInput = Prisma.rs_board_postUpdateOneWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput`
 */
export type rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput = Prisma.rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateOneWithoutRs_noteInput`
 */
export type rs_board_postCreateOneWithoutRs_noteInput = Prisma.rs_board_postCreateOneWithoutRs_noteInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_send_idInput`
 */
export type rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_send_idInput = Prisma.rs_memberCreateOneWithoutRs_note_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput`
 */
export type rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput = Prisma.rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateOneWithoutRs_noteInput`
 */
export type rs_board_postUpdateOneWithoutRs_noteInput = Prisma.rs_board_postUpdateOneWithoutRs_noteInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_send_idInput`
 */
export type rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_send_idInput = Prisma.rs_memberUpdateOneWithoutRs_note_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedIntNullableFilter`
 */
export type NestedIntNullableFilter = Prisma.NestedIntNullableFilter

/**
 * @deprecated Renamed to `Prisma.board_postCreateWithoutBoard_cateInput`
 */
export type board_postCreateWithoutBoard_cateInput = Prisma.board_postCreateWithoutBoard_cateInput

/**
 * @deprecated Renamed to `Prisma.board_postCreateOrConnectWithoutboard_cateInput`
 */
export type board_postCreateOrConnectWithoutboard_cateInput = Prisma.board_postCreateOrConnectWithoutboard_cateInput

/**
 * @deprecated Renamed to `Prisma.board_postUpdateWithWhereUniqueWithoutBoard_cateInput`
 */
export type board_postUpdateWithWhereUniqueWithoutBoard_cateInput = Prisma.board_postUpdateWithWhereUniqueWithoutBoard_cateInput

/**
 * @deprecated Renamed to `Prisma.board_postUpdateManyWithWhereWithoutBoard_cateInput`
 */
export type board_postUpdateManyWithWhereWithoutBoard_cateInput = Prisma.board_postUpdateManyWithWhereWithoutBoard_cateInput

/**
 * @deprecated Renamed to `Prisma.board_postScalarWhereInput`
 */
export type board_postScalarWhereInput = Prisma.board_postScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.board_postUpsertWithWhereUniqueWithoutBoard_cateInput`
 */
export type board_postUpsertWithWhereUniqueWithoutBoard_cateInput = Prisma.board_postUpsertWithWhereUniqueWithoutBoard_cateInput

/**
 * @deprecated Renamed to `Prisma.board_cateCreateWithoutBoard_postInput`
 */
export type board_cateCreateWithoutBoard_postInput = Prisma.board_cateCreateWithoutBoard_postInput

/**
 * @deprecated Renamed to `Prisma.board_cateCreateOrConnectWithoutboard_postInput`
 */
export type board_cateCreateOrConnectWithoutboard_postInput = Prisma.board_cateCreateOrConnectWithoutboard_postInput

/**
 * @deprecated Renamed to `Prisma.board_cateUpdateWithoutBoard_postInput`
 */
export type board_cateUpdateWithoutBoard_postInput = Prisma.board_cateUpdateWithoutBoard_postInput

/**
 * @deprecated Renamed to `Prisma.board_cateUpsertWithoutBoard_postInput`
 */
export type board_cateUpsertWithoutBoard_postInput = Prisma.board_cateUpsertWithoutBoard_postInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateWithoutRs_memberInput`
 */
export type rs_mgr_memCreateWithoutRs_memberInput = Prisma.rs_mgr_memCreateWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateOrConnectWithoutrs_memberInput`
 */
export type rs_mgr_memCreateOrConnectWithoutrs_memberInput = Prisma.rs_mgr_memCreateOrConnectWithoutrs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteCreateWithoutRs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteCreateWithoutRs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteCreateOrConnectWithoutrs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_pointCreateWithoutRs_memberInput`
 */
export type rs_pointCreateWithoutRs_memberInput = Prisma.rs_pointCreateWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_pointCreateOrConnectWithoutrs_memberInput`
 */
export type rs_pointCreateOrConnectWithoutrs_memberInput = Prisma.rs_pointCreateOrConnectWithoutrs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateWithoutRs_memberInput`
 */
export type rs_mgr_memUpdateWithoutRs_memberInput = Prisma.rs_mgr_memUpdateWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpsertWithoutRs_memberInput`
 */
export type rs_mgr_memUpsertWithoutRs_memberInput = Prisma.rs_mgr_memUpsertWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteScalarWhereInput`
 */
export type rs_noteScalarWhereInput = Prisma.rs_noteScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteUpdateWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteUpdateManyWithWhereWithoutRs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteUpsertWithWhereUniqueWithoutRs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_pointUpdateWithoutRs_memberInput`
 */
export type rs_pointUpdateWithoutRs_memberInput = Prisma.rs_pointUpdateWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_pointUpsertWithoutRs_memberInput`
 */
export type rs_pointUpsertWithoutRs_memberInput = Prisma.rs_pointUpsertWithoutRs_memberInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateWithoutRs_mgrInput`
 */
export type rs_mgr_memCreateWithoutRs_mgrInput = Prisma.rs_mgr_memCreateWithoutRs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memCreateOrConnectWithoutrs_mgrInput`
 */
export type rs_mgr_memCreateOrConnectWithoutrs_mgrInput = Prisma.rs_mgr_memCreateOrConnectWithoutrs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateWithWhereUniqueWithoutRs_mgrInput`
 */
export type rs_mgr_memUpdateWithWhereUniqueWithoutRs_mgrInput = Prisma.rs_mgr_memUpdateWithWhereUniqueWithoutRs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateManyWithWhereWithoutRs_mgrInput`
 */
export type rs_mgr_memUpdateManyWithWhereWithoutRs_mgrInput = Prisma.rs_mgr_memUpdateManyWithWhereWithoutRs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memScalarWhereInput`
 */
export type rs_mgr_memScalarWhereInput = Prisma.rs_mgr_memScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpsertWithWhereUniqueWithoutRs_mgrInput`
 */
export type rs_mgr_memUpsertWithWhereUniqueWithoutRs_mgrInput = Prisma.rs_mgr_memUpsertWithWhereUniqueWithoutRs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateWithoutRs_mgr_memInput`
 */
export type rs_memberCreateWithoutRs_mgr_memInput = Prisma.rs_memberCreateWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOrConnectWithoutrs_mgr_memInput`
 */
export type rs_memberCreateOrConnectWithoutrs_mgr_memInput = Prisma.rs_memberCreateOrConnectWithoutrs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrCreateWithoutRs_mgr_memInput`
 */
export type rs_mgrCreateWithoutRs_mgr_memInput = Prisma.rs_mgrCreateWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrCreateOrConnectWithoutrs_mgr_memInput`
 */
export type rs_mgrCreateOrConnectWithoutrs_mgr_memInput = Prisma.rs_mgrCreateOrConnectWithoutrs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateWithoutRs_mgr_memInput`
 */
export type rs_memberUpdateWithoutRs_mgr_memInput = Prisma.rs_memberUpdateWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpsertWithoutRs_mgr_memInput`
 */
export type rs_memberUpsertWithoutRs_mgr_memInput = Prisma.rs_memberUpsertWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpdateWithoutRs_mgr_memInput`
 */
export type rs_mgrUpdateWithoutRs_mgr_memInput = Prisma.rs_mgrUpdateWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_mgrUpsertWithoutRs_mgr_memInput`
 */
export type rs_mgrUpsertWithoutRs_mgr_memInput = Prisma.rs_mgrUpsertWithoutRs_mgr_memInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateWithoutRs_pointInput`
 */
export type rs_memberCreateWithoutRs_pointInput = Prisma.rs_memberCreateWithoutRs_pointInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOrConnectWithoutrs_pointInput`
 */
export type rs_memberCreateOrConnectWithoutrs_pointInput = Prisma.rs_memberCreateOrConnectWithoutrs_pointInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateWithoutRs_pointInput`
 */
export type rs_memberUpdateWithoutRs_pointInput = Prisma.rs_memberUpdateWithoutRs_pointInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpsertWithoutRs_pointInput`
 */
export type rs_memberUpsertWithoutRs_pointInput = Prisma.rs_memberUpsertWithoutRs_pointInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateWithoutRs_board_commentInput`
 */
export type rs_board_likebad_mapCreateWithoutRs_board_commentInput = Prisma.rs_board_likebad_mapCreateWithoutRs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateOrConnectWithoutrs_board_commentInput`
 */
export type rs_board_likebad_mapCreateOrConnectWithoutrs_board_commentInput = Prisma.rs_board_likebad_mapCreateOrConnectWithoutrs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_commentInput`
 */
export type rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_commentInput = Prisma.rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_commentInput`
 */
export type rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_commentInput = Prisma.rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapScalarWhereInput`
 */
export type rs_board_likebad_mapScalarWhereInput = Prisma.rs_board_likebad_mapScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_commentInput`
 */
export type rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_commentInput = Prisma.rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateWithoutRs_board_postInput`
 */
export type rs_board_likebad_mapCreateWithoutRs_board_postInput = Prisma.rs_board_likebad_mapCreateWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapCreateOrConnectWithoutrs_board_postInput`
 */
export type rs_board_likebad_mapCreateOrConnectWithoutrs_board_postInput = Prisma.rs_board_likebad_mapCreateOrConnectWithoutrs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateWithoutRs_board_postInput`
 */
export type rs_noteCreateWithoutRs_board_postInput = Prisma.rs_noteCreateWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteCreateOrConnectWithoutrs_board_postInput`
 */
export type rs_noteCreateOrConnectWithoutrs_board_postInput = Prisma.rs_noteCreateOrConnectWithoutrs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_postInput`
 */
export type rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_postInput = Prisma.rs_board_likebad_mapUpdateWithWhereUniqueWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_postInput`
 */
export type rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_postInput = Prisma.rs_board_likebad_mapUpdateManyWithWhereWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_postInput`
 */
export type rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_postInput = Prisma.rs_board_likebad_mapUpsertWithWhereUniqueWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateWithWhereUniqueWithoutRs_board_postInput`
 */
export type rs_noteUpdateWithWhereUniqueWithoutRs_board_postInput = Prisma.rs_noteUpdateWithWhereUniqueWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateManyWithWhereWithoutRs_board_postInput`
 */
export type rs_noteUpdateManyWithWhereWithoutRs_board_postInput = Prisma.rs_noteUpdateManyWithWhereWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpsertWithWhereUniqueWithoutRs_board_postInput`
 */
export type rs_noteUpsertWithWhereUniqueWithoutRs_board_postInput = Prisma.rs_noteUpsertWithWhereUniqueWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentCreateWithoutRs_board_likebad_mapInput`
 */
export type rs_board_commentCreateWithoutRs_board_likebad_mapInput = Prisma.rs_board_commentCreateWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentCreateOrConnectWithoutrs_board_likebad_mapInput`
 */
export type rs_board_commentCreateOrConnectWithoutrs_board_likebad_mapInput = Prisma.rs_board_commentCreateOrConnectWithoutrs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateWithoutRs_board_likebad_mapInput`
 */
export type rs_board_postCreateWithoutRs_board_likebad_mapInput = Prisma.rs_board_postCreateWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateOrConnectWithoutrs_board_likebad_mapInput`
 */
export type rs_board_postCreateOrConnectWithoutrs_board_likebad_mapInput = Prisma.rs_board_postCreateOrConnectWithoutrs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpdateWithoutRs_board_likebad_mapInput`
 */
export type rs_board_commentUpdateWithoutRs_board_likebad_mapInput = Prisma.rs_board_commentUpdateWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_commentUpsertWithoutRs_board_likebad_mapInput`
 */
export type rs_board_commentUpsertWithoutRs_board_likebad_mapInput = Prisma.rs_board_commentUpsertWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateWithoutRs_board_likebad_mapInput`
 */
export type rs_board_postUpdateWithoutRs_board_likebad_mapInput = Prisma.rs_board_postUpdateWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpsertWithoutRs_board_likebad_mapInput`
 */
export type rs_board_postUpsertWithoutRs_board_likebad_mapInput = Prisma.rs_board_postUpsertWithoutRs_board_likebad_mapInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput`
 */
export type rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput = Prisma.rs_memberCreateWithoutRs_note_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_recv_idInput`
 */
export type rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_recv_idInput = Prisma.rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateWithoutRs_noteInput`
 */
export type rs_board_postCreateWithoutRs_noteInput = Prisma.rs_board_postCreateWithoutRs_noteInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postCreateOrConnectWithoutrs_noteInput`
 */
export type rs_board_postCreateOrConnectWithoutrs_noteInput = Prisma.rs_board_postCreateOrConnectWithoutrs_noteInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput`
 */
export type rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput = Prisma.rs_memberCreateWithoutRs_note_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_send_idInput`
 */
export type rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_send_idInput = Prisma.rs_memberCreateOrConnectWithoutrs_note_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_recv_idInput`
 */
export type rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_recv_idInput = Prisma.rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_recv_idInput`
 */
export type rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_recv_idInput = Prisma.rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpdateWithoutRs_noteInput`
 */
export type rs_board_postUpdateWithoutRs_noteInput = Prisma.rs_board_postUpdateWithoutRs_noteInput

/**
 * @deprecated Renamed to `Prisma.rs_board_postUpsertWithoutRs_noteInput`
 */
export type rs_board_postUpsertWithoutRs_noteInput = Prisma.rs_board_postUpsertWithoutRs_noteInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_send_idInput`
 */
export type rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_send_idInput = Prisma.rs_memberUpdateWithoutRs_note_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_send_idInput`
 */
export type rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_send_idInput = Prisma.rs_memberUpsertWithoutRs_note_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.board_postUpdateWithoutBoard_cateInput`
 */
export type board_postUpdateWithoutBoard_cateInput = Prisma.board_postUpdateWithoutBoard_cateInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_recv_idInput`
 */
export type rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_recv_idInput = Prisma.rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_recv_idInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_send_idInput`
 */
export type rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_send_idInput = Prisma.rs_noteUpdateWithoutRs_member_rs_memberTors_note_not_send_idInput

/**
 * @deprecated Renamed to `Prisma.rs_mgr_memUpdateWithoutRs_mgrInput`
 */
export type rs_mgr_memUpdateWithoutRs_mgrInput = Prisma.rs_mgr_memUpdateWithoutRs_mgrInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateWithoutRs_board_commentInput`
 */
export type rs_board_likebad_mapUpdateWithoutRs_board_commentInput = Prisma.rs_board_likebad_mapUpdateWithoutRs_board_commentInput

/**
 * @deprecated Renamed to `Prisma.rs_board_likebad_mapUpdateWithoutRs_board_postInput`
 */
export type rs_board_likebad_mapUpdateWithoutRs_board_postInput = Prisma.rs_board_likebad_mapUpdateWithoutRs_board_postInput

/**
 * @deprecated Renamed to `Prisma.rs_noteUpdateWithoutRs_board_postInput`
 */
export type rs_noteUpdateWithoutRs_board_postInput = Prisma.rs_noteUpdateWithoutRs_board_postInput